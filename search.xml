<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript ES2019 中的 8 个新功能</title>
    <url>//post/ES2019/</url>
    <content><![CDATA[<p>JavaScript 一直在不断改进和添加更多新功能。TC39 已经完成，并批准了 ES2019 的 8 项新功能。这个过程包含了 5 个阶段：</p>
<ul>
<li>第 0 阶段：稻草人</li>
<li>第 1 阶段：提案</li>
<li>第 2 阶段：草案</li>
<li>第 3 阶段：候选</li>
<li>第 4 阶段：已完成 &#x2F; 已批准</li>
</ul>
<p>第 0 阶段的提案：<br><a href="https://github.com/tc39/proposals/blob/master/stage-0-proposals.md">https://github.com/tc39/proposals/blob/master/stage-0-proposals.md</a></p>
<p>第 1 至 3 阶段的提案：<br><a href="https://github.com/tc39/proposals">https://github.com/tc39/proposals</a></p>
<p>第 4 阶段的提案：<br><a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md">https://github.com/tc39/proposals/blob/master/finished-proposals.md</a></p>
<p>废话不多说，接下来让我们来逐一介绍这些功能。</p>
<span id="more"></span>

<h3 id="1-可选的-catch-绑定"><a href="#1-可选的-catch-绑定" class="headerlink" title="1.可选的 catch 绑定"></a>1.可选的 catch 绑定</h3><p>可选的 catch 绑定提案是为了能够选择性地移除使用不到的 catch 绑定。</p>
<pre class="line-numbers language-none"><code class="language-none">try &#123;
	
  &#x2F;&#x2F; trying to use a new ES2019 feature
	
  &#x2F;&#x2F; which may not be implemented in other browsers
	
&#125; catch (unused) &#123;
	
  &#x2F;&#x2F; revert back to old way
	
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在可以删除使用不到的绑定。</p>
<pre class="line-numbers language-none"><code class="language-none">try &#123;
	
  ...
	
&#125; catch &#123;
	
  ...
	
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-JSON-超集"><a href="#2-JSON-超集" class="headerlink" title="2.JSON 超集"></a>2.JSON 超集</h3><p>这个提案的目的是让 JSON 字符串可以包含未转义的 U+2028 LINE SEPARATOR 和 U+2029 PARAGRAPH SEPARATOR 字符，而 ECMAScript 字符串是不能包含这些字符的。在 ES2019 生效之前，这样做会出现“SyntaxError: Invalid or unexpected token”错误。</p>
<pre class="line-numbers language-none"><code class="language-none">const LS &#x3D; eval(&#39;&quot;\u2028&quot;&#39;);
	
const PS &#x3D; eval(&quot;&#39;\u2029&#39;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-符号描述"><a href="#3-符号描述" class="headerlink" title="3. 符号描述"></a>3. 符号描述</h3><p>符号是在 ES2015 中引入的，具有非常独特的功能。在 ES2019 中可以提供给定的描述，目的是避免间接从 Symbol.prototype.toString 获取描述。</p>
<pre class="line-numbers language-none"><code class="language-none">const mySymbol &#x3D; Symbol(&#39;myDescription&#39;);
	
console.log(mySymbol); &#x2F;&#x2F; Symbol(myDescription)
	
console.log(mySymbol.toString()); &#x2F;&#x2F; Symbol(myDescription)
	
console.log(mySymbol.description); &#x2F;&#x2F; myDescription<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-修订版的-Function-prototype-toString"><a href="#4-修订版的-Function-prototype-toString" class="headerlink" title="4. 修订版的 Function.prototype.toString"></a>4. 修订版的 Function.prototype.toString</h3><p>之前的函数原型已经有 toString 方法，但是在 ES2019 中，它经过了修订，可以包含函数内的注释，不过不适应于箭头函数。</p>
<pre class="line-numbers language-none"><code class="language-none">function &#x2F;* comment *&#x2F; foo &#x2F;* another comment *&#x2F; ()&#123;&#125;
	
 
	
&#x2F;&#x2F; Before
	
console.log(foo.toString()); &#x2F;&#x2F; function foo()&#123;&#125;
	
 
	
&#x2F;&#x2F; Now ES2019
	
console.log(foo.toString()); &#x2F;&#x2F; function &#x2F;* comment *&#x2F; foo &#x2F;* another comment *&#x2F; ()&#123;&#125;
	
 
	
&#x2F;&#x2F; Arrow Syntax
	
const bar &#x2F;* comment *&#x2F; &#x3D; &#x2F;* another comment *&#x2F; () &#x3D;&gt; &#123;&#125;
	
 
	
console.log(bar.toString()); &#x2F;&#x2F; () &#x3D;&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-Object-fromEntries"><a href="#5-Object-fromEntries" class="headerlink" title="5.Object.fromEntries"></a>5.Object.fromEntries</h3><p>它是 Object.entries 方法的反向操作，可用于克隆对象。</p>
<pre class="line-numbers language-none"><code class="language-none">const obj &#x3D; &#123;
	
    prop1: 1,
	
    prop2: 2,
	
&#125;;
	
 
	
const entries &#x3D; Object.entries(obj);
	
console.log(entries); &#x2F;&#x2F; [ [ &#39;prop1&#39;, 1 ], [ &#39;prop2&#39;, 2 ] ]
	
const fromEntries &#x3D; Object.fromEntries(entries);
	
console.log(fromEntries); &#x2F;&#x2F; Object &#123; prop1: 1, prop2: 2 &#125;
	
console.log(obj &#x3D;&#x3D;&#x3D; fromEntries); &#x2F;&#x2F; false

不过需要注意的是，嵌入式对象 &#x2F; 数组都只是引用。
 

	
const obj &#x3D; &#123;
	
    prop1: 1,
	
    prop2: 2,
	
    deepCopy: &#123;
	
        mutateMe: true
	
    &#125;
	
&#125;;
	
 
	
const entries &#x3D; Object.entries(obj);
	
const fromEntries &#x3D; Object.fromEntries(entries);
	
fromEntries.deepCopy.mutateMe &#x3D; false;
	
console.log(obj.deepCopy.mutateMe); &#x2F;&#x2F; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-格式化的-JSON-stringify"><a href="#6-格式化的-JSON-stringify" class="headerlink" title="6. 格式化的 JSON.stringify"></a>6. 格式化的 JSON.stringify</h3><p>这个提案是由同一个人提出来的，与 JSON 超集有关。ES2019 将使用 JSON 转义序列表示输出结果，而不是返回 UTF-16 代码单元。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Before
	
console.log(JSON.stringify(&#39;\uD800&#39;)); &#x2F;&#x2F; &quot;?&quot;
	
 
	
&#x2F;&#x2F; Now ES2019
	
console.log(JSON.stringify(&#39;\uD800&#39;)); &#x2F;&#x2F; &quot;\ud800&quot;

7.String.prototype 的 trimStart 和 trimEnd

String 原型已经有了 trim 方法，用来移除字符串开头和结尾的空格。而 ES2019 引入了 trimStart 和 trimEnd。
 

	
&#x2F;&#x2F; Trim
	
const name &#x3D; &quot;   Codedam &quot;;
	
console.log(name.trim());   &#x2F;&#x2F; &quot;Codedam&quot;
	
 
	
&#x2F;&#x2F; Trim Start
	
const description &#x3D; &quot;   Unlocks Secret Codes &quot;;
	
console.log(description.trimStart());   &#x2F;&#x2F; &quot;Unlocks Secret Codes &quot;
	
 
	
&#x2F;&#x2F; Trim End
	
const category &#x3D; &quot;  JavaScript &quot;;
	
console.log(category.trimEnd());    &#x2F;&#x2F; &quot;  JavaScript&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="8-Array-prototype-的-flat-和-flatMap"><a href="#8-Array-prototype-的-flat-和-flatMap" class="headerlink" title="8.Array.prototype 的 flat 和 flatMap"></a>8.Array.prototype 的 flat 和 flatMap</h3><p>flat 方法通过将所有子数组元素以递归方式连接到指定的深度来创建数组。默认深度为 1，使数组的第一层嵌套展平。</p>
<pre class="line-numbers language-none"><code class="language-none">const arr &#x3D; [1, 2, [3, 4, [5, 6]]];
	
arr.flat(); &#x2F;&#x2F; [1, 2, 3, 4, [5, 6]]
	
arr.flat(2); &#x2F;&#x2F; [1, 2, 3, 4, 5, 6]
	
 
	
&#x2F;&#x2F; You can use Infinity to flatten all the nested arrays no matter how deep the array is
	
 
	
const arrExtreme &#x3D; [1, [2, [3, [4, [5, 6, 7, [8, 9]]]]]];
	
arrExtreme.flat(Infinity); &#x2F;&#x2F; [1, 2, 3, 4, 5, 6, 7, 8, 9]

flatMap 方法类似于 flat，并且还与 map 相关，它会先映射数组然后将其展平。
 

	
const arr &#x3D; [&#39;Codedam&#39;, &#39;is Awsome&#39;, &#39;!&#39;];
	
 
	
const mapResult &#x3D; arr.map(item &#x3D;&gt; item.split(&#39; &#39;));
	
console.log(mapResult); &#x2F;&#x2F; [ [ &#39;Codedam&#39; ], [ &#39;is&#39;, &#39;Awsome&#39; ], [ &#39;!&#39; ] ]
	
 
	
const flatMapResult &#x3D; arr.flatMap(chunk &#x3D;&gt; chunk.split(&#39; &#39;));
	
console.log(flatMapResult); &#x2F;&#x2F; [&#39;Codedam&#39;, &#39;is&#39;,  &#39;Awsome&#39;, &#39;!&#39;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他</p>
<p>我还想强调一下现在处在第 3 阶段的一些有用的特性。</p>
<ul>
<li><p><a href="https://github.com/tc39/proposal-global">globalThis</a>；</p>
</li>
<li><p><a href="https://github.com/tc39/proposal-bigint">BigInt</a>；</p>
</li>
<li><p><a href="https://github.com/tc39/proposal-dynamic-import">import()</a>；</p>
</li>
<li><p><a href="https://github.com/tc39/proposal-regexp-legacy-features">遗留的 RegEx</a>；</p>
</li>
<li><p><a href="https://github.com/tc39/proposal-private-methods">私有的实例方法</a>；</p>
</li>
<li><p><a href="https://github.com/tc39/String.prototype.matchAll">String.prototype.matchAll</a>。</p>
</li>
</ul>
<p>英文原文：<a href="https://codedam.com/8-new-features-javascript-es2019/">https://codedam.com/8-new-features-javascript-es2019/</a></p>
<p>更多内容，请关注前端之巅。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>antd源码浅析</title>
    <url>//post/antd-source/</url>
    <content><![CDATA[<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p>github上面有一些很“哇塞”的项目，在工作中呢，我们只是作为“使用者”的角色，去把这些开源项目应用在项目中。<br>看着官网提供的资料，了解了这是什么、这怎么安装、这怎么使用、这有什么东西……<br>这很常见，从使用者的角度上看，甚至社区上的项目写得好不好跟我们关系也不大。<br>“能用就用，不能用就换一个，反正有很多选择”，这是很多人使用者的态度。<br>这当然没问题。<br>不过作为研发人员，我们可以不止步于此，可以进一步深入了解他们的项目代码。<br>毕竟作者都开源了，肯定是希望社区上的用户能对他们的代码有更多的了解。<br>开源给了所有技术人员一个机会——了解其他优秀开发者的项目机会。<br>遗憾的是大部分开发者都不具备去独立分析一个开源项目的方法。<br>看到优秀的项目代码，常常没办法搞懂整体设计、功能代码，想了解其实现也望而止步。</p>
<p><strong>这是一个系列，以Ant Design UI（react）为示例，一起学习如何分析一个开源项目。</strong></p>
<span id="more"></span>

<h1 id="通识"><a href="#通识" class="headerlink" title="通识"></a>通识</h1><p>从“编译层”的维度看（排序：底层依赖-&gt;高层实现），大概分成这几个领域：</p>
<ol>
<li>机器码</li>
<li>编程语言</li>
<li>语言框架</li>
<li>代码项目</li>
<li>项目依赖</li>
<li>项目插件</li>
<li>……</li>
</ol>
<p>从项目类型的维度（排序：从难到易）大致可以分为：</p>
<ol>
<li>编程语言</li>
<li>语言框架</li>
<li>开源软件</li>
<li>框架&#x2F;类库</li>
<li>框架&#x2F;类库的插件</li>
<li>业务项目（demo）</li>
<li>文档资料</li>
</ol>
<blockquote>
<p>只是粗略的分类，或许你有比我更好的分层方式；而且也不是固定的，比如有些开源项目，本身就是一个语言框架，那他可能就根本没有依赖其他语言框架，所有没有3也是正常的。</p>
</blockquote>
<p><strong>编译层和项目类型可以为我们快速定位一个开源项目的信息，以及是否值得你去分析；<br>还有难易度，是否自己满足前置技能有分析其代码的能力。</strong></p>
<p>比如“文档资料”是最没分析价值的，或许是文档的排版格式很漂亮，自己也想搞个很漂亮的文档页面；<br>那应该得去看这个文档是用什么东西生成的，关注点就应该转移到这个文档生成框架了（“开源软件&#x2F;框架&#x2F;类库”）。</p>
<p>虽然我们是以Ant Design——一个ts语言、react框架（这里提前泄漏信息了，在没开始看资料前，应该是不知道这些信息的）的ui库为示例。</p>
<p>比如<a href="https://github.com/spring-projects/spring-boot">Spring Boot</a>，是用<code>Java</code>写的，那么要去分析<code>Spring Boot</code>。<br>前置条件是熟悉<code>Java</code>语法，以及对相关领域（网络请求、http、api、数据库操作）有所概念。<br>而<a href="https://www.djangoproject.com/">Django</a>是用<code>Python</code>的写的，分析前也同样要对相关的编程语言、<br>以及相关领域（同<code>Spring Boot</code>，因为它们都可以用于web开发）有所概念。<br>甚至是需要确切的用过<code>Spring Boot</code>、<code>Django</code>开发过项目。<br><strong>强烈推荐在分析开源代码前，本身得作为“使用者”使用过这些代码有实际的运用，哪怕是最简单的运用。</strong></p>
<blockquote>
<p>所以这是一篇通用性非常强的文章，基本上拿到任何源码项目，都可以按照此文的套路进行粗略分析。</p>
</blockquote>
<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><blockquote>
<p>写过完全没用过and的读者，如果用antd开发过项目，可以选择跳过此章节。从<a href="#%E5%88%9D%E7%AA%A5">初窥</a>继续。</p>
</blockquote>
<ul>
<li>官方网站：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></li>
<li>源码地址：<a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a></li>
</ul>
<p>如果之前用过Ant Design，也请忘记掉跟它相关的一切；<br>现在我们仅有的是的一个源码地址、官方网站而已。</p>
<p><strong>先了解一下它是什么，能做什么，怎么安装，怎么使用。</strong></p>
<h2 id="浏览官网"><a href="#浏览官网" class="headerlink" title="浏览官网"></a>浏览官网</h2><p>先看官网，官网的首页一般都是一些“正确的废话”，很多时候并不能得到有实际作用的信息；<br>最顶部的菜单：<code>设计  文档 组件 资源 国内镜像 ……</code>，这些有很大的信息量，先不看；<br>最底部的脚页：<code>相关资源 社区 帮助 更多产品</code> 四大板块，都是外部链接，也先不看；</p>
<p><img src="/post/antd-source/ant.design_index-cn.png"></p>
<p> 首页有个很明显的“开始使用按钮”，是专门写给使用者的，我们要第一个要看的是这个。</p>
<p><img src="/post/antd-source/ant.design_docs_react_introduce-cn.png"></p>
<p>这个页面就有很多有效的信息量了，但是表述还是太过官网，个人理解可以用接地点的方法，稍微提取一些：</p>
<ol>
<li>React UI 组件库（是什么）</li>
<li>用来做中后台产品（能做什么）</li>
<li>开箱即用</li>
<li>用<code>TypeScript</code>写的</li>
<li>多语言支持</li>
<li>支持主题定制</li>
<li>最少兼容IE11</li>
<li>支持ssr</li>
<li>也能被Electron使用</li>
<li>用npm、yarn安装 &#x2F; 浏览器引入 &#x2F; 按需加载 （什么安装）</li>
<li>【简单示例 - 见上图】(怎么使用)</li>
</ol>
<p>那么“它是什么，能做什么，怎么安装，怎么使用”，其实都知道了，这个时候也要知道使用antd的一些前置条件：</p>
<ol>
<li>React</li>
<li>Typescript&#x2F;JavaScritpt</li>
<li>npm</li>
</ol>
<p><strong>这也是antd对使用者的前置技能要求，若是不了解，建议先学好前置技能。</strong></p>
<p><em><code>链接、谁在使用、如何贡献、社区互助</code>：次要信息，不需要关注。</em></p>
<p>上图右侧边栏是文档用于文章章节定位；<br>左侧是导航菜单，看完了此页面（Ant Design of React）就继续往下看；<br>把整个文档完整看一遍；<br>可以快速阅读，但不要跳过任何章节。</p>
<h2 id="初用"><a href="#初用" class="headerlink" title="初用"></a>初用</h2><p>或许在上一章的时候，你已经跟着文档搭建，启动了一个antd的项目；<br>文档提供了好几种方法（浏览器引入、create-react-app、create-react-app+typescript、umi）。<br>这里用官网提供的<a href="https://ant.design/docs/react/use-in-typescript-cn">create-react-app+typescript</a>方式搭建；<br><em><code>高级配置</code> 暂时用不上，跳过。</em></p>
<p>一切顺利的话，我们会在localhost:3000看到一个蓝色的按钮。</p>
<p><img src="/post/antd-source/antd-init.png"></p>
<p><a href="https://github.com/screw-hand/demo-fragment/commit/667ffb13bcc716c16fefdb34247c39eb671ab292">项目提交链接</a></p>
<h2 id="更多的信息"><a href="#更多的信息" class="headerlink" title="更多的信息"></a>更多的信息</h2><p>把关注点放到官网的“最顶部的菜单”：<code>设计 文档 组件 资源 国内镜像 ……</code>。<br>其实在<a href="##%E5%88%9D%E7%94%A8">初用</a>那一章，我们就已经把“文档”模块给看完了；<br><code>设计 资源 国内镜像 </code>，这几个点进去一看，<br>没看到有关的使用信息，还是没必要看；<br>而<code>组件</code>模块，才是antd最核心的教程；</p>
<p><img src="/post/antd-source/ant.design_components_overview-cn_.png"></p>
<p>把所有的组件都过一遍，试着在刚才的demo进行一些实例试用。</p>
<h1 id="初窥"><a href="#初窥" class="headerlink" title="初窥"></a>初窥</h1><p>到目前为止，我们都是以“使用者”的角色去使用一个开源项目。<br>通过以上的使用经验，我们是时候开始接触源码层面了。</p>
<ul>
<li>源码地址：<a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a></li>
</ul>
<p><img src="/post/antd-source/github.com_ant-design_ant-design_.png"></p>
<ul>
<li>红色：Code、Issuses、Pull requests —— 此代码项目的“代码”、“问题讨论”、“推拉请求”。</li>
<li>黄色：master是当前的分支，分支信息（目前有19个分支），标签信息(529个)；</li>
<li>绿色：“关于”，项目介绍、官网链接、开源许可协议，start、watch、forks等信息。</li>
<li>蓝色：releases信息，开源代码发布正式代码产生的信息。</li>
<li>咖啡箭头：Octotree——一个浏览器插件，可树形结构显示Github项目。</li>
</ul>
<p><strong>当前查看的代码是默认分支（master，由仓库设置）的代码，想查看其他分支的代码，可以在master那个改变分支名。</strong></p>
<p>在此页面滚动下来的<a href="https://github.com/ant-design/ant-design#readme">README.md</a>，是根目录下的<code>README.md</code>文件，一般也是些文档资料；<br>关于文档资料，看中文还是英文的，个人建议是：<strong>原则是看原文的，即——国内项目看中文，国外项目看英文。</strong></p>
<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>现在我们要clone源码，点击上图的绿色按钮“Code”，有三种方式Clone代码，最通用的是使用HTTPS方式，红色箭头点击可直接复制url。</p>
<p><em>不一定要clone源码到本地，有时候我们只是想简单看看源码的几个文件，并不需要全盘分析整个项目。有三个工具，都可以很方便查阅代码。</em></p>
<ol>
<li><a href="https://www.octotree.io/">Octotree</a>——下载对应的浏览器插件，简单配置好github auth token，即可在浏览器左侧使用</li>
<li><a href="https://github.com/conwnet/github1s">github1s</a>——直接在浏览器地址栏github后面加上1s即可：<a href="https://github/">https://github</a><span style="color:red">1s</span>.com&#x2F;ant-design&#x2F;ant-design&#x2F;</li>
<li><a href="https://github.com/github/dev">github dev</a>——直接在浏览器地址栏.com换成.dev即可：<a href="https://github/">https://github</a><span style="color:red">.dev</span>&#x2F;ant-design&#x2F;ant-design&#x2F;</li>
</ol>
<p><img src="/post/antd-source/github.com_ant-design_ant-design_clone.png"></p>
<p>clone下来后，当前的分支(branch)是默认分支，建议是把HEAD切换到最新的release那份代码，这里的最新release是<a href="https://github.com/ant-design/ant-design/releases/tag/4.21.7">4.21.7</a>。也是此章节蓝框点进去的链接。<br><strong>如果是业务项目出问题了，对项目依赖库进行问题排查，建议切换到项目实际使用的版本。</strong></p>
<p><img src="/post/antd-source/github.com_ant-design_ant-design_release_2.png"></p>
<ul>
<li>绿：这次的发布是从master发布的</li>
<li>红：此次发布的代码标签</li>
<li>蓝：此次发布的代码提交id</li>
</ul>
<p><em>antd的源码仓库1G+，实在太大了，如果真的clone不来，可以去release页面，翻到最下面的“Source Code”选择压缩包下载；代价就是失去git管理的信息。</em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> $ <span class="token function">git</span> clone https://github.com/ant-design/ant-design.git
Cloning into <span class="token string">'ant-design'</span><span class="token punctuation">..</span>.
remote: Enumerating objects: <span class="token number">341830</span>, done.
remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">892</span>/892<span class="token punctuation">)</span>, done.
remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">626</span>/626<span class="token punctuation">)</span>, done.
remote: Total <span class="token number">341830</span> <span class="token punctuation">(</span>delta <span class="token number">396</span><span class="token punctuation">)</span>, reused <span class="token number">546</span> <span class="token punctuation">(</span>delta <span class="token number">191</span><span class="token punctuation">)</span>, pack-reused <span class="token number">340938</span>
Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">341830</span>/341830<span class="token punctuation">)</span>, <span class="token number">937.73</span> MiB <span class="token operator">|</span> <span class="token number">3.88</span> MiB/s, done.
Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">227846</span>/227846<span class="token punctuation">)</span>, done.

<span class="token operator">></span> $ <span class="token builtin class-name">cd</span> ant-design

<span class="token operator">></span> $ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 10b153f

<span class="token operator">></span> $ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> v4.21.7
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重置HEAD到最新release的commit，并切出一条新的分支<code>v4.21.7</code></p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>软件工程领域中，版本的问题就跟软件名字一样重要，不同的小版本，也会有一些微小的区别，强烈建议版本要完全匹配；<br>由于官网一般用的是最新发布的文档，所以我们在上一步，获取的是最新release的版本，已经完成了匹配。</p>
<p>这里顺便看看github仓库的分支、tag信息——<a href="https://github.com/ant-design/ant-design/branches">Branches · ant-design&#x2F;ant-design</a><br><img src="/post/antd-source/github.com_ant-design_ant-design_branch.png"></p>
<h2 id="根目录分析"><a href="#根目录分析" class="headerlink" title="根目录分析"></a>根目录分析</h2><p>现在开始正式分析源码，首先看项目根目录。<br>根目录有很多东西，这里按照一个比较通用的分类。<br>对根路径下的目录文件进行简单介绍，先不看文件&#x2F;目录的具体内容。<br>文件&#x2F;目录的命名，一般特定的文件都有约定俗成的名称。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 项目工程</span>

<span class="token comment">## git/github</span>
.git
.github
.gitignore
.gitpod.yml
.husky

<span class="token comment">## docker</span>
.dockerignore
Dockerfile.ui-test
docker-compose.yml

<span class="token comment">## 项目配置</span>
.editorconfig
.npmignore
tsconfig.json
webpack.config.js
package.json
renovate.json
index-style-only.js
index-with-locales.js

<span class="token comment">## 代码格式</span>
.eslintignore
.eslintrc.js
.prettierignore
.prettierrc
.stylelintrc.json

<span class="token comment">## 测试相关</span>
.jest.image.js
.jest.js
.jest.node.js
.jest.site.js
jest-puppeteer.config.js

<span class="token comment">## 其他</span>
.codesandbox
.depslintrc.js
.remarkrc.js

<span class="token comment"># 文档类</span>
AUTHORS.txt
CHANGELOG.en-US.md
CHANGELOG.zh-CN.md
CNAME
CODE_OF_CONDUCT.md
LICENSE
README-ja_JP.md
README-pt_BR.md
README-sp_MX.md
README-uk_UA.md
README-zh_CN.md
SECURITY.md

<span class="token comment"># 代码入口文件</span>
index.js

<span class="token comment"># 目录</span>
components
docs
tests
typings
scripts
site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们大概知道了根路径下的这些文件是什么东西，但是还有一小部分不知道，有些东西并不重要，可以忽略之；<br>比如以上的项目工程-&gt;git、github、docker、测试、代码格式相关，对于antd的实现没有太大的关系，不建议细看。</p>
<h2 id="项目起点"><a href="#项目起点" class="headerlink" title="项目起点"></a>项目起点</h2><p>根目录有两个很重要的文件——<code>pckage.json</code>、<code>index.js</code>，后者很有可能是整个项目的启动文件，但是我们目前还无法确定，现在就要来验证一下是否为项目的启动文件。</p>
<p>熟悉前端开发的小伙伴应该都明白<code>package.json</code>的重要性；<br>每个现代前端项目，都会有<code>package.json</code>；<br>里面的信息都是项目级别的元信息；<br>这是最重要的文件了，我愿称之为项目起点文件。</p>
<p>打开常用的编辑器，检阅大致内容，关注以下配置；</p>
<ul>
<li><code>bin</code> 命令行相关，引用的文件会被添加到PATH。</li>
<li><code>scripts</code> 定义了一组可以运行的 node 脚本。</li>
<li><code>dependencies</code> 设置了作为依赖安装的 <code>npm</code> 软件包的列表。</li>
<li><code>devDependencies</code> 设置了作为开发依赖安装的 <code>npm</code> 软件包的列表。</li>
</ul>
<p><a href="http://nodejs.cn/learn/the-package-json-guide">package.json 指南</a></p>
<p> <code>scripts</code> 中常用<code>start</code>、<code>dev</code>、server等关键字来启动项目，重点关注这几个字眼；<br> <code>dependencies</code>、  <code>devDependencies</code> 可以知晓项目的一级依赖，大<br> 概知道其技术栈；</p>
<p>其实当我们看到<code>package.json</code>就应该下意识去安装依赖。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> $ <span class="token function">npm</span> i

<span class="token comment"># 省略掉npm的输出信息</span>

<span class="token operator">></span> antd@4.21.7 prepare
<span class="token operator">></span> husky <span class="token function">install</span>

husky - Git hooks installed

added <span class="token number">3655</span> packages <span class="token keyword">in</span> 7m
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根目录会出现两个新玩意：</p>
<ol>
<li><code>package-lock.json</code>——此项目的依赖的所有npm包，亦理解为描述node_modules的目录树文件（比<code>package.json</code>的<code>dependencies</code>更强大，可以在这个文件查看所有、层级依赖）</li>
<li><code>node_modules</code>——项目依赖包</li>
</ol>
<h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><p>环境信息：</p>
<ul>
<li>操作系统—— macOs v12.4</li>
<li>node —— v14.19.3</li>
<li>npm —— v8.12.1</li>
</ul>
<p><code>package.json</code>中的第93行，”start”中调用了<code>antd-tools</code>这个东西，但是我们并不知道这个东西是从哪来的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
  <span class="token punctuation">..</span>.
  <span class="token string">"script"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"start"</span><span class="token builtin class-name">:</span> <span class="token string">"antd-tools run clean &amp;&amp; cross-env NODE_ENV=development concurrently <span class="token entity" title="\&quot;">\"</span>bisheng start -c ./site/bisheng.config.js<span class="token entity" title="\&quot;">\"</span>"</span>,
  <span class="token punctuation">&#125;</span>
  <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>node的可执行文件，都会放在<code>node_modules/.bin</code>下面，所有我们要查看这个目录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> $ <span class="token function">ls</span> node_modules/.bin
<span class="token comment">## 太多东西了，省略掉输出信息</span>

<span class="token operator">></span> $ <span class="token function">ls</span> <span class="token parameter variable">-l</span> node_modules/.bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'antd-tools'</span>
antd-tools -<span class="token operator">></span> <span class="token punctuation">..</span>/@ant-design/tools/bin/antd-tools.js
antd-tools-run -<span class="token operator">></span> <span class="token punctuation">..</span>/@ant-design/tools/bin/antd-tools-run.js
<span class="token comment"># node_modules/.bin/antd-tools是一个软链接，指向 node_modules/@ant-design/tools/bin/antd-tools.js</span>

<span class="token operator">></span> $ <span class="token function">cat</span> node_modules/@ant-design/tools/package.json
<span class="token punctuation">&#123;</span>
  <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"@ant-design/tools"</span>,
  <span class="token punctuation">..</span>.
  <span class="token string">"homepage"</span><span class="token builtin class-name">:</span> <span class="token string">"http://github.com/ant-design/antd-tools"</span>,
  <span class="token punctuation">..</span>.
  <span class="token string">"bin"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"antd-tools"</span><span class="token builtin class-name">:</span> <span class="token string">"./bin/antd-tools.js"</span>,
    <span class="token string">"antd-tools-run"</span><span class="token builtin class-name">:</span> <span class="token string">"./bin/antd-tools-run.js"</span>
  <span class="token punctuation">&#125;</span>
  <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>node_modules/@ant-design/tools/package.json</code>，我们得知了：</p>
<ul>
<li><code>antd-tools</code>这个命令是由”@ant-design&#x2F;tools”提供的</li>
<li>“@ant-design&#x2F;tools”还提供了<code>antd-tools-run</code>命令行</li>
<li>首页<a href="http://github.com/ant-design/antd-tools">http://github.com/ant-design/antd-tools</a></li>
</ul>
<p><em>点开”homepage”，就是能看到@ant-design&#x2F;tools的源码了；如果去分析其代码实现，我们的关注点就变了，所以这里建议看完README.md等一些文档资料马上关闭掉这个网页。</em></p>
<p>package的script&#x3D;&gt;start配置很长，我们需要分成几个部分看看：</p>
<ol>
<li>antd-tools run clean</li>
<li>cross-env NODE_ENV&#x3D;development</li>
<li>concurrently</li>
<li>bisheng start -c .&#x2F;site&#x2F;bisheng.config.js</li>
</ol>
<p>还是用刚才的方法，从<code>node_modules/.bin</code>查看命令行由哪个依赖包提供，查看依赖包的<code>package.json</code>，从<code>homepage</code>找到一些资料，关于这个依赖包的说明。</p>
<p>当然，知道了包名（<code>node_modes</code>下的目录都是包名）也可以直接去<a href="https://www.npmjs.com/">npm官网</a>查找这个包的资料。<br>如<code>node_moudles/@ant-design/tools/</code> &#x3D;&gt; <a href="https://www.npmjs.com/package/@ant-design/tools">https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;@ant-design&#x2F;tools</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> $ ll node_modules/.bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'antd-tools | cross-env | concurrently | bisheng'</span> 

antd-tools -<span class="token operator">></span> <span class="token punctuation">..</span>/@ant-design/tools/bin/antd-tools.js
bisheng -<span class="token operator">></span> <span class="token punctuation">..</span>/bisheng/bin/bisheng
concurrently -<span class="token operator">></span> <span class="token punctuation">..</span>/concurrently/dist/bin/concurrently.js
cross-env -<span class="token operator">></span> <span class="token punctuation">..</span>/cross-env/src/bin/cross-env.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结论是：</p>
<ol>
<li>antd-tools —— 专门为antd开发的cli工具</li>
<li>bisheng —— 将Mardown转换成用React构建的静态网站</li>
<li>concurrently —— 同时运行多个命令</li>
<li>cross-env —— 跨平台设置环境变量</li>
</ol>
<p>所以一条简单的<code>npm start</code>，至少使用了4个依赖包……<br>那就先启动项目吧。</p>
<p>Antd官网的贡献指南- <a href="https://ant.design/docs/react/contributing-cn#%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B">开发流程</a>章节也有对重要script命令简单介绍。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> $ <span class="token function">npm</span> start

<span class="token operator">></span> antd@4.21.7 prestart
<span class="token operator">></span> <span class="token function">npm</span> run version


<span class="token operator">></span> antd@4.21.7 version
<span class="token operator">></span> <span class="token function">node</span> ./scripts/generate-version


<span class="token operator">></span> antd@4.21.7 start
<span class="token operator">></span> antd-tools run clean <span class="token operator">&amp;&amp;</span> cross-env <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>development concurrently <span class="token string">"bisheng start -c ./site/bisheng.config.js"</span>

antd-tools run clean
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ℹ Compiling 🚚  Bisheng
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ℹ ｢wds｣: Project is running at http://localhost:8001/
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ℹ ｢wds｣: webpack output is served from undefined
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ℹ ｢wds｣: Content not from webpack is served from /Users/wu/Documents/code/ant-design/_site
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ℹ ｢wds｣: 404s will fallback to /index.html
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ✔ 🚚  Bisheng: Compiled successfully <span class="token keyword">in</span> <span class="token number">55</span>.77s
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  DONE  Compiled successfully <span class="token keyword">in</span> 55766ms11:51:08 AM
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  WAIT  Compiling<span class="token punctuation">..</span>.11:51:09 AM
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ℹ Compiling 🚚  Bisheng
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ✔ 🚚  Bisheng: Compiled successfully <span class="token keyword">in</span> <span class="token number">801</span>.56ms
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  DONE  Compiled successfully <span class="token keyword">in</span> 804ms11:51:11 AM
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>以上的输出信息都比较重要，建议自行翻译理解。</strong></p>
<p>两次“DONE”之后，浏览器上<a href="http://localhost:8001/%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E5%90%AF%E5%8A%A8%E7%9A%84%E5%AE%98%E7%BD%91%E3%80%82">http://localhost:8001/就能看到启动的官网。</a><br><strong>所以npm start其实是启动了一个官网项目的网站。</strong><br>这个官网由bisheng（毕升）驱动的，bisheng的指定了配置文件。<br><code>site/bisheng.config.js</code>，<code>npm start</code>使用了这个配置文件；<br>我们也应该打开看看，<a href="https://github.com/ant-design/ant-design/blob/10b153f65de6eb5a18107a3c88db18c8aaeade07/site/bisheng.config.js#">35～41行</a>有<code>source</code>的配置；<br>得去bisheng的REAMD.md看看有没有关于配置文件<code>source</code>的资料;<br><a href="https://github.com/benjycui/bisheng#source-string--arraystring--object-category-string--arraystring">source</a>是存放Markdown文件的配置，官网提供的是字符串例子；<br>可是antd却使用了对象方式去配置，遗憾的是没找到对象配置的例子。<br>不再研究bisheng的配置，继续看bisheng的配置文件；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">source: <span class="token punctuation">&#123;</span>
  components: <span class="token string">'./components'</span>,
  docs: <span class="token string">'./docs'</span>,
  changelog: <span class="token punctuation">[</span><span class="token string">'CHANGELOG.zh-CN.md'</span>, <span class="token string">'CHANGELOG.en-US.md'</span><span class="token punctuation">]</span>,
  <span class="token string">'components/form/v3'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'components/form/v3.zh-CN.md'</span>, <span class="token string">'components/form/v3.en-US.md'</span><span class="token punctuation">]</span>,
  <span class="token string">'docs/resources'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">'./docs/resources.zh-CN.md'</span>, <span class="token string">'./docs/resources.en-US.md'</span><span class="token punctuation">]</span>,
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>changelog、’components&#x2F;form&#x2F;v3’、’docs&#x2F;resources’，都是配置的是MarkDown文件路径，<br>都扫一眼，发现没啥特殊是，只是网站组成的页面一部分；<br>docs&#x2F;components都是目录，先看看目录有什么东西；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> $ <span class="token function">ls</span> docs/ components/

components:
<span class="token comment">## 省略输出</span>

docs/:
react              resources.en-US.md resources.zh-CN.md spec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>components下有个我们熟悉的<code>index.tsx</code>，<a href="https://github.com/ant-design/ant-design/blob/10b153f65d/acomponents/index.tsx">components&#x2F;index.tsx</a><br>这个模块导出了很多组件，组件名都能跟官网的<a href="http://localhost:8001/components/overview-cn/">组件总览</a>一一对应<br>可以得知这个文件时组件的入口文件；<br>我们用最简单的<code>Button</code>示例， <a href="http://localhost:8001/components/button-cn/">http://localhost:8001/components/button-cn/</a><br>这个页面有“按钮用于开始一个即时操作。”的文本，用vscode全局搜索，得知这段话来源于——<br><a href="https://github.com/ant-design/ant-design/blob/10b153f65d/components/button/index.zh-CN.md">components&#x2F;button&#x2F;index.zh-CN.md</a> ，试着修改这段文本，在本地的官网项目查看效果。</p>
<p><img src="/post/antd-source/github.com_ant-design_ant-design_button_1.png"></p>
<p>然而页面下面的“代码演示”的源码内容并没有包含在此文件里；<br>通过bisheng的主题配置去找“生成规则”太浪费时间了（还是得注意我们的关注点在antd，其他都不关注）；<br>用VScode搜索<code>Primary Button</code>字段，尝试修改<a href="https://github.com/ant-design/ant-design/blob/10b153f65d/components/button/demo/basic.md">components&#x2F;button&#x2F;demo&#x2F;basic.md</a></p>
<p><img src="/post/antd-source/ant.design_button.png"></p>
<p>小结：</p>
<ol>
<li><a href="https://github.com/ant-design/ant-design/blob/10b153f65d/acomponents/index.tsx">components&#x2F;index.tsx</a> 组件的总入口文件</li>
<li><code>components/[name]</code> 一个目录对应一个组件</li>
<li><code>components/[name]/index.tsx</code> 组件模块级别的入口文件，导出组件级别模块</li>
<li><code>components/[name]/index.zh-CN.md</code> 组件页面入口文件</li>
<li><code>components/[name]/demo</code> 组件页面入口“代码示例”</li>
</ol>
<h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2><ol>
<li>console.log</li>
<li>浏览器断点调试</li>
<li>源码断点调试</li>
</ol>
<p><a href="https://code.visualstudio.com/docs/nodejs/reactjs-tutorial#_debugging-react">React JavaScript Tutorial in Visual Studio Code</a></p>
<h2 id="包别名"><a href="#包别名" class="headerlink" title="包别名"></a>包别名</h2><p><a href="https://docs.npmjs.com/cli/v6/commands/npm-link">npm-link | npm Docs</a></p>
<h1 id="体系家族"><a href="#体系家族" class="headerlink" title="体系家族"></a>体系家族</h1><p>Ant Desigin有很庞大的体系，通过之前的阅读源码我们触及到了其体系下的多个npm包——“@ant-design&#x2F;tools”、<code>rc-\*</code>组件，还有官网footer下的一些相关资源推荐。</p>
<ul>
<li><a href="https://charts.ant.design/">Ant Design Charts</a></li>
<li><a href="https://pro.ant.design/">Ant Design Pro</a></li>
<li><a href="https://procomponents.ant.design/">Ant Design Pro Components</a></li>
<li><a href="https://mobile.ant.design/">Ant Design Mobile</a></li>
<li><a href="https://landing.ant.design/">Ant Design Landing</a></li>
<li><a href="https://github.com/websemantics/awesome-ant-design">Awesome Ant Design</a></li>
</ul>
<p><a href="https://github.com/ant-design">Ant Design Team · GitHub</a></p>
<h1 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h1><p>分析开源项目是一件比较费时费力的事情，我们在开始分析代码前，最好确定一下为什么要分析源码，以及真的有必要吗。</p>
<ul>
<li>学习优秀的同类项目</li>
<li>使用开源项目过程中报错，定位bug是否在此项目</li>
<li>技术调研（成本偏高）</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>apt vs apt-get</title>
    <url>//post/apt-vs-apt-get/</url>
    <content><![CDATA[<p>apt和apt-get都是Ubuntu的包管理工具，在较新的系统推荐用apt，apt比apt-get更新，后者的兼容性会更好。apt也会让其依赖项一起升级。</p>
<span id="more"></span>

<h1 id="apt-vs-apt-get"><a href="#apt-vs-apt-get" class="headerlink" title="apt vs apt-get"></a><code>apt</code> vs <code>apt-get</code></h1><p>On Ubuntu, both <code>apt</code> and <code>apt-get</code> are package management commands used to handle software packages. Here’s an overview of the differences between the two:</p>
<ol>
<li><p><strong>User Interface</strong>: <code>apt</code> provides a more user-friendly and streamlined interface compared to <code>apt-get</code>. It aims to simplify package management tasks by offering clearer and more concise output, progress bars during installation, and easier-to-understand prompts.</p>
</li>
<li><p><strong>Command Syntax</strong>: The command syntax for <code>apt</code> and <code>apt-get</code> is different. <code>apt</code> uses a more straightforward and intuitive command structure, while <code>apt-get</code> has a slightly more complex and traditional syntax.</p>
</li>
<li><p><strong>Package Dependency Handling</strong>: <code>apt</code> includes automatic handling of package dependencies by default. It automatically resolves and installs any necessary dependencies when you use the <code>apt install</code> command. In contrast, with <code>apt-get</code>, you may need to use the separate <code>apt-get build-dep</code> command to install build dependencies for source packages.</p>
</li>
<li><p><strong>Compatibility</strong>: <code>apt-get</code> is more established and has been around for a longer time. It is compatible with older versions of Ubuntu and other Debian-based distributions. <code>apt</code>, introduced in Ubuntu 16.04, is designed to be backward-compatible with <code>apt-get</code>, meaning you can still use <code>apt-get</code> commands on newer Ubuntu versions without issues.</p>
</li>
</ol>
<p>In general, if you’re using a newer version of Ubuntu, <code>apt</code> is recommended due to its improved user experience and simplified syntax. However, both <code>apt</code> and <code>apt-get</code> are capable package management tools, and you can choose the one that best suits your preferences and requirements.</p>
<p>It’s worth noting that there are other package management commands available on Ubuntu, such as <code>apt-cache</code> for querying package information and <code>aptitude</code> for a more advanced package management interface.</p>
<h1 id="apt-update-vs-apt-upgrade"><a href="#apt-update-vs-apt-upgrade" class="headerlink" title="apt update vs apt upgrade"></a><code>apt update</code> vs <code>apt upgrade</code></h1><p>update 命令只会获得系统上所有包的最新信息，并不会下载或者安装任何一个包。 而是 apt upgrade 命令来把这些包下载和升级到最新版本。</p>
<p><a href="https://linux.cn/article-14994-1.html">技术|apt 的 update 和 upgrade 命令的区别是什么？</a></p>
]]></content>
      <categories>
        <category>geek</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>同步遍历调用异步请求</title>
    <url>//post/async-to-call-async-request-foreach/</url>
    <content><![CDATA[<p>业务场景：一次性发送多个http请求，并且这些请求有<strong>先后顺序</strong>之分。</p>
<span id="more"></span>

<h2 id="异步调用用单个http请求"><a href="#异步调用用单个http请求" class="headerlink" title="异步调用用单个http请求"></a>异步调用用单个http请求</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// mock http 请求，并且服务器响应了请求</span>
<span class="token keyword">function</span> <span class="token function">mockRequest</span><span class="token punctuation">(</span><span class="token parameter">requestBody<span class="token punctuation">,</span> delayTime</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 随意resolve一个json即可</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
        <span class="token literal-property property">requestId</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> requestBody
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delayTime <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 简单的这样调用是不够的，因为是异步请求，我们需要一个回调函数（call back）</span>
<span class="token function">mockRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'000'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">'a'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getSilgleRequestData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'000'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">'a'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// &#123; statusCode: 200, requestId: '00896521783396853', data: &#123; id: '000', query: 'a' &#125; &#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getSilgleRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实际开发中比较常用的单个调用http请求我们已经实现了，那么也有在项目中一次操作（或者叫事件）触发多个请求，如果接口之间没有依赖关系，一般都是<strong>并发执行</strong>发送请求的。</p>
<h2 id="异步并行调用多个http请求"><a href="#异步并行调用多个http请求" class="headerlink" title="异步并行调用多个http请求"></a>异步并行调用多个http请求</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 仍然保留之前定义的 mockRequest</span>

<span class="token comment">// 第一条接口</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getRequestA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'00A'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'getRequestA'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 第二条接口</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getRequestB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'00B'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'getRequestB'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getMutilRequestData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> resA <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> resB <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出为？？</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resA<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resA<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resB<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resB<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getMutilRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为上述两条api没有依赖关系，所以我们可以这些写：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> resA <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> resB <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果是有依赖关系的话——<code>getRequestA</code>的**响应数据(response data)<strong>会被<code>getRequestB</code>作为</strong>请求参数(request data)**使用，那么应该这样做：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> resA <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>resA<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> resB <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestB</span><span class="token punctuation">(</span>resA<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resB<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resB<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="同步遍历中发送异步http请求"><a href="#同步遍历中发送异步http请求" class="headerlink" title="同步遍历中发送异步http请求"></a>同步遍历中发送异步http请求</h2><p>所以结合以上所有，我们需要一次性发送多条api，有顺序的要求，那么我们可以定义一个数组，这个数组的每个元素都是请求参数，循环此数组，使用递归函数的方式调用api请求。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ... mockRequest</span>

<span class="token comment">// 递归函数，遍历requestList元素，依次发送请求，当前请求响应成功后才会发送下一个请求</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span> <span class="token punctuation">(</span><span class="token parameter">requestList<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> delayTime <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockRequest</span><span class="token punctuation">(</span>requestList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> delayTime<span class="token operator">+=</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> requestList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">getData</span><span class="token punctuation">(</span>requestList<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义请求参数，每一个元素都是一次请求，元素的内容都是请求参数</span>
<span class="token keyword">const</span> requestList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">'x'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">'y'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'003'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">'z'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>

<span class="token function">getData</span><span class="token punctuation">(</span>requestList<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>这只是一个比较简陋的实现方案，并非最佳实践。比如此回调是每次请求成功的回调，有些业务场景需要全部请求完成后执再执行回调，还有这是依次发送请求的，也可以实现一个并行请求的方式，更多的扩展功能不再讲述。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器结构</title>
    <url>//post/browser/</url>
    <content><![CDATA[<p>简单来说浏览器可以分为两个部分，shell+内核，其中shell的种类比较多，内核的种类则比较少。</p>
<p>Shell是指浏览器外壳：菜单、工具栏等；主要提供给用户操作，参数设置等，调用内核实现各种功能。</p>
<p>内核是浏览器的核心，基于标记语言显示内容的程序或模块。可分两部分，渲染引擎和JS引擎，负责渲染网页内容，计算网页的显示方式，不同内核的渲染效果不同。JS引擎则执行javascript实现网页的动态效果。</p>
<span id="more"></span>

<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>浏览器一般由以下组件构成：<br>1.用户界面：包括地址栏、前进&#x2F;后退按钮、书签菜单等。<br>2.浏览器引擎：在用户界面和呈现引擎之间传送指令。<br>3.呈现引擎：负责显示请求的内容，解析html和css内容，显示在屏幕上、<br>4.网络：用于网络调用，比如HTTP请求，其接口与平台无关，并为所有平台提供底层实现。<br>5.用户界面后端：绘制基本的窗口小部件，比如组合框和窗口。 其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。<br>6.JavaScript解析器：解析执行JavaScript代码。<br>7.数据存储：持久层。实现了Cookie，web Stroage、indexDB的功能支持。</p>
<p>Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p>
]]></content>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范整改的项目实践</title>
    <url>//post/code-style/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li>痛点: 项目的代码写得太乱了，风格不统一。团队成员的编辑器格式化设置也不一样，经常在提交记录出现大量的格式化代码风格修改，影响日志追溯。</li>
<li>动机：npm script(prettier)似乎不起作用，虽然有 git hooks，项目也没有安装 eslint，也缺少 stylelint。</li>
<li>预期：团队统一代码风格，统一设置好编辑器，安装必要的编辑器插件，尽量用工具去自动整理代码</li>
<li>原则：让工具去管理规范，配置好相应的工具就行，让开发者少操心格式问题，把精力多放点在代码的实现</li>
<li>结果：预期想法基本满足。</li>
</ul>
<span id="more"></span>

<h2 id="工具的共性"><a href="#工具的共性" class="headerlink" title="工具的共性"></a>工具的共性</h2><ol>
<li>node 包管理器安装依赖工具</li>
<li>创建对应的配置文件</li>
<li>编写 npm script 以便携使用</li>
<li>下载扩展，设置对应的配置项以集成编辑器</li>
<li>git hooks 配置文件类型</li>
</ol>
<p>1、2 是为了基本的正常使用；</p>
<p>3 是方便团队成员正确地使用工具；</p>
<p>4 是在编写代码的过程，能即使获得工具的检测反馈，以及在配置文件中拥有一定的代码提示，也能提供相应的编辑器命令以完成快捷操作。</p>
<p>5 是为了保证提交的代码格式都是正常的，团队成员的本地代码，随便折腾。这是最后的底线。</p>
<p><em>这是一个基于<code>umijs</code>构建的项目，有些工具已经配置好的，检查已有的，补充需要的工具即可。</em></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>本文并不想讨论<strong>代码规范</strong>、<strong>代码风格</strong>、<strong>代码格式</strong>等术语之间的区别的联系，这仅仅是一次“<strong>一站式自动整理代码</strong>”的实践而已。</p>
</blockquote>
<ol>
<li>clone 另一份项目代码</li>
<li>检出新的 git 分支</li>
<li>备份 vscode 设置</li>
<li>vscode 禁用插件，还原用户设置</li>
<li>新增编辑器项目级别的配置文件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> .vscode
<span class="token comment"># 新建vscdoe的项目文件</span>
<span class="token function">touch</span> .vscode/settings.json
<span class="token comment"># 此处用了一条关于vscode的命令行，指定扩展存储目录，以隔离之前下载的扩展</span>
code <span class="token builtin class-name">.</span> --extensions-dir .vscode/ext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em>下列所有关于编辑器的设置全部都是项目级别的设置，建议直接编辑<code>.vscode/settings.json</code>文件以配置。</em></p>
<h2 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h2><p>EditorConfig 是最简单的，项目根路径下编写配置文件<code>.editorconfig</code>，安装插件即可——<a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a>。</p>
<pre class="line-numbers language-none"><code class="language-none"># http:&#x2F;&#x2F;editorconfig.org
root &#x3D; true

[*]
indent_style &#x3D; space
indent_size &#x3D; 2
end_of_line &#x3D; lf
charset &#x3D; utf-8
trim_trailing_whitespace &#x3D; true
insert_final_newline &#x3D; true

[*.md]
trim_trailing_whitespace &#x3D; false

[Makefile]
indent_style &#x3D; tab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev prettier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>.prettierrc</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"jsxSingleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>
  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">"bracketSameLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"overrides"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"files"</span><span class="token operator">:</span> <span class="token string">".prettierrc"</span><span class="token punctuation">,</span>
      <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"json"</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h3><p><code>package.json</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  ...
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write **/*.&#123;js,jsx,tsx,ts,css,less,md,json&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"prettier:check"</span><span class="token operator">:</span> <span class="token string">"prettier --check **/*.&#123;js,jsx,tsx,ts,css,less,md,json&#125;"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>两条<code>npm script</code>分别是使用<code>prettier</code>格式化代码（改动文件），以及使用 prettier 检测代码（不改动文件）。</p>
<p><strong>不建议立即将格式化后的代码马上提交到 git，若有改动，应丢弃更改。待到配置完所有的工具后，合并回到主要的分支后，在主要的分支执行此脚本，提交后，再通知团队成员拉取最新代码，以避免无妄之灾的合并冲突。</strong></p>
<p><em>让 CI&#x2F;CD 去执行脚本也行。</em></p>
<h3 id="编辑器集成"><a href="#编辑器集成" class="headerlink" title="编辑器集成"></a>编辑器集成</h3><p>安装 vscode 的 prettier 插件，<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a>，并检查。</p>
<p><img src="/post/code-style/prettier.png"></p>
<p>格式化代码：使用<strong>编辑器命令（F1 &#x2F; Ctrl + Shift + p)<strong>，输入<code>Format Document</code>或者使用快捷键(Alt + Shift + F)。安装完插件后第一次格式化，编辑器会因为有</strong>多种格式化方案</strong>（编辑器内置、prettier 共两种）而让用户配置默认的方案。需要选择<code>prettier</code>。代码正确格式化时，会在上图的<code>OUTPUT</code> &gt; <code>Prettier</code> 打印日志。</p>
<p>刚才的那个默认配置，会让编辑器自动在用户的配置添加默认格式化，编辑器命令<code>Preferences: Open Settings(JSON)</code>以检查，将<code>&quot;editor.defaultFormatter&quot;</code>相关的删除。（工具没配置好前，不要改变用户级别的配置！！）</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"[typescriptreact]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果配置的话，应该在<code>.vscode/settings.json</code>中配置。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>格式化时也可使用编辑器命令<code>Format Document With...</code>指定编辑器使用何种方式格式化。</p>
<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p><strong><code>prettier</code>与<code>eslint</code>联系与区别。</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>eslint</th>
<th>prettier</th>
</tr>
</thead>
<tbody><tr>
<td>文件</td>
<td>检测 js 语法，针对的是 js(x),ts(x)的文件。（非 js(x),ts(x)的文件，eslint 也是能检测的，只是这完全是愚蠢的做法）</td>
<td>除了能前者，还支持 html&#x2F;xml&#x2F;Vue&#x2F;Angular、css&#x2F;less&#x2F;scss&#x2F;、Markdown 等一系列文件。</td>
</tr>
<tr>
<td>定位</td>
<td>格式化与代码质量检测</td>
<td>只格式化代码，<strong>无代码质量检测能力</strong></td>
</tr>
<tr>
<td>生态</td>
<td>很多规则，很多插件、扩展……</td>
<td>少量的规则，极少的插件和扩展</td>
</tr>
</tbody></table>
<p>不管怎么看，eslint 除了兼容文件这一块，似乎都完爆 prettier。那么我们为什么还需要 prettier 呢？</p>
<p>事实上，eslint 比 prettier 还早出现，问题在于，eslint 关于格式化的规则太多了，开发者都在吵到底应该怎么配置格式化的规则。这在我看来完全是被工具给限制住了。后来就 prettier 就站出来：你们别吵了，我这边就提供这些关于格式化的配置给你们，你们就这么配置就行了， eslint 也继续用。</p>
<p>现在更多的是流行<code>prettier</code>组合<code>eslint</code>一起使用，前者负责代码格式化，后者负责质量检测，互不打扰。</p>
<p><a href="https://prettier.io/docs/en/comparison.html">Prettier vs. Linters · Prettier</a></p>
<p><em>事实上 prettier 跟 eslint 结合使用会有一小部分冲突的，但是这也是能通过安装扩展、配置去解决。</em></p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>
<span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev
<span class="token comment"># 初始化eslint，根据实际情况选择</span>
./node_modules/.bin/eslint <span class="token parameter variable">--init</span>

? How would you like to use ESLint? <span class="token punctuation">..</span>.
  To check syntax only
<span class="token operator">></span> To check syntax and <span class="token function">find</span> problems
  To check syntax, <span class="token function">find</span> problems, and enforce code style

? What <span class="token builtin class-name">type</span> of modules does your project use? <span class="token punctuation">..</span>.
<span class="token operator">></span> JavaScript modules <span class="token punctuation">(</span>import/export<span class="token punctuation">)</span>
  CommonJS <span class="token punctuation">(</span>require/exports<span class="token punctuation">)</span>
  None of these

? Which framework does your project use? <span class="token punctuation">..</span>.
<span class="token operator">></span> React
  Vue.js
  None of these

? Does your project use TypeScript? » No / Yes √

? Where does your code run? <span class="token punctuation">..</span>.  <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select, <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all, <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span>
√ Browser √
√ Node

? What <span class="token function">format</span> <span class="token keyword">do</span> you want your config <span class="token function">file</span> to be in? <span class="token punctuation">..</span>.
  JavaScript
  YAML
<span class="token operator">></span> JSON

Local ESLint installation not found.
The config that you've selected requires the following dependencies:
<span class="token comment"># eslint的初始化脚本根据刚才用户的选择，将采用下列依赖包</span>
<span class="token comment"># 选择Yes，将会安装，并自动生成配置文件，选择No——白给</span>
eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest eslint@latest
? Would you like to <span class="token function">install</span> them now with npm? » No / Yes √<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结合-prettier"><a href="#结合-prettier" class="headerlink" title="结合 prettier"></a>结合 prettier</h3><p>先别急着使用 eslint，使用之前还需要 eslint 结合 prettier——禁用 eslint 中关于代码格式的规则，让 prettier 去接管即可——<a href="https://github.com/prettier/eslint-config-prettier/">eslint-config-prettier</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint-config-prettier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更新 eslint 配置。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"some-other-config-you-use"</span><span class="token punctuation">,</span> <span class="token string">"prettier"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>目前为止<code>.eslintrc.json</code>长这样，<code>rules</code>是针对项目的情况，暂时屏蔽错误才加的。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"es2021"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>
    <span class="token string">"plugin:react/recommended"</span><span class="token punctuation">,</span>
    <span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">,</span>
    <span class="token string">"prettier"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>
  <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"ecmaFeatures"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">2021</span><span class="token punctuation">,</span>
    <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"@typescript-eslint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"react/react-in-jsx-scope"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"react/jsx-uses-react"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/no-explicit-any"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/no-unused-vars"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/ban-types"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"no-control-regex"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/ban-ts-comment"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"no-empty"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"no-prototype-builtins"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/no-empty-function"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"prefer-const"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"react/display-name"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/no-non-null-asserted-optional-chain"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"@typescript-eslint/no-non-null-assertion"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"react/prop-types"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"no-empty-pattern"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"no-fallthrough"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"react/no-children-prop"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"no-unsafe-optional-chaining"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"react/jsx-key"</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>.eslintignore</code>忽略掉一些不需要格式化的目录。</p>
<pre class="line-numbers language-none"><code class="language-none">.vscode
dist
build
node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置文件中的extends、plugins字段"><a href="#配置文件中的extends、plugins字段" class="headerlink" title="配置文件中的extends、plugins字段"></a>配置文件中的<code>extends</code>、<code>plugins</code>字段</h3><p><a href="https://eslint.org/docs/user-guide/configuring/plugins">Plugins</a>——针对解析器的相关的，配置解析器以解析不同文件。</p>
<p><a href="https://eslint.org/docs/user-guide/configuring/configuration-files#extending-configuration-files">extends</a>——继承指定配置文件的所有特性（规则、插件、语言选项）。</p>
<p>配置推荐<a href="https://www.npmjs.com/search?q=eslint-config">eslint-config</a></p>
<p>插件推荐<a href="https://www.npmjs.com/search?q=eslint-plugin">eslint-plugin</a></p>
<h3 id="npm-script-1"><a href="#npm-script-1" class="headerlink" title="npm script"></a>npm script</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --fix **/*.&#123;js,jsx,ts,tsx&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"lint:check"</span><span class="token operator">:</span> <span class="token string">"eslint **/*.&#123;js,jsx,ts,tsx&#125;"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="集成编辑器"><a href="#集成编辑器" class="headerlink" title="集成编辑器"></a>集成编辑器</h3><p>安装<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a>，如果有这个弹窗，选“Allow”即可。</p>
<p><img src="/post/code-style/eslint-dialog.png"></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token comment">// 始终在状态栏显示eslint状态</span>
  <span class="token property">"eslint.alwaysShowStatus"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 启用eslint格式化</span>
  <span class="token property">"eslint.format.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 编辑器默认格式化方案</span>
  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定语言默认格式化方案</span>
  <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"dbaeumer.vscode-eslint"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"[javascriptreact]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"dbaeumer.vscode-eslint"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"[typescript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"dbaeumer.vscode-eslint"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"[typescriptreact]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"dbaeumer.vscode-eslint"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// eslint格式化修复错误</span>
  <span class="token property">"eslint.codeActionsOnSave.mode"</span><span class="token operator">:</span> <span class="token string">"all"</span>
  <span class="token comment">// 保存时自动修复错误， 不建议</span>
  <span class="token comment">// "editor.codeActionsOnSave": &#123;</span>
  <span class="token comment">//   "source.fixAll.eslint": true</span>
  <span class="token comment">//   "source.fixAll.stylelint": true</span>
  <span class="token comment">// &#125;,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为<code>eslint</code>只支持<code>js(x)|ts(x)</code>，所以这里针对这几种语言做定制化，默认还是得使用<code>prettier</code>。</p>
<h2 id="Stylelint"><a href="#Stylelint" class="headerlink" title="Stylelint"></a>Stylelint</h2><p>“脚本家族”——<code>js(x)|ts(x)</code>有 eslint，“样式家族”——<code>css/less/sass/scss/SugarSS</code>等就由<code>stylelint</code>去保证代码质量，代码格式仍然是由<code>prettier</code>去接管。（也可以选择不结合使用 prettier）同样是需要安装，配置，然后使用合适的工具。</p>
<pre class="line-numbers language-none"><code class="language-none">stylelint
postcss-less &#x2F;&#x2F; less预处理语言语法
stylelint-config-standard &#x2F;&#x2F; 标准配置
stylelint-config-css-modules  &#x2F;&#x2F; css-modules相关规则
stylelint-config-rational-order &#x2F;&#x2F; css规则排序
stylelint-config-prettier &#x2F;&#x2F; 结合prettier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://github.com/prettier/stylelint-config-prettier">stylelint-config-prettier</a>是一个命令行工具，可以检测<code>stylelint</code>跟<code>prettier</code>的配置是否存在冲突。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> stylelint postcss-less stylelint-config-standard stylelint-config-css-modules stylelint-config-rational-order stylelint-config-prettier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置文件 <code>.stylelintrc.json</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"stylelint-config-standard"</span><span class="token punctuation">,</span>
    <span class="token string">"stylelint-config-rational-order"</span><span class="token punctuation">,</span>
    <span class="token string">"stylelint-config-css-modules"</span><span class="token punctuation">,</span>
    <span class="token string">"stylelint-config-prettier"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"customSyntax"</span><span class="token operator">:</span> <span class="token string">"postcss-less"</span><span class="token punctuation">,</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"selector-class-pattern"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"no-descending-specificity"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"max-line-length"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"function-url-quotes"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"font-family-no-duplicate-names"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"declaration-block-no-redundant-longhand-properties"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"font-family-no-missing-generic-family-keyword"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"declaration-block-no-duplicate-properties"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"font-family-name-quotes"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"property-no-unknown"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"no-duplicate-selectors"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"keyframes-name-pattern"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"color-function-notation"</span><span class="token operator">:</span> <span class="token string">"modern"</span><span class="token punctuation">,</span>
    <span class="token property">"color-hex-alpha"</span><span class="token operator">:</span> <span class="token string">"never"</span><span class="token punctuation">,</span>
    <span class="token property">"block-closing-brace-empty-line-before"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"never"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> <span class="token property">"except"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"after-closing-brace"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>npm script</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"stylelint-check"</span><span class="token operator">:</span> <span class="token string">"stylelint-config-prettier-check"</span><span class="token punctuation">,</span>
    <span class="token property">"stylelint"</span><span class="token operator">:</span> <span class="token string">"stylelint --fix **/*.&#123;css,less&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"stylelint:check"</span><span class="token operator">:</span> <span class="token string">"stylelint **/*.&#123;css,less&#125;"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>npm run stylelint-check</code>，先检测一下配置是否存在冲突。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> run stylelint-check

<span class="token operator">></span> @ stylelint-check D:<span class="token punctuation">\</span>source_code<span class="token punctuation">\</span>hs-npm
<span class="token operator">></span> stylelint-config-prettier-check

Conflicting rule<span class="token punctuation">(</span>s<span class="token punctuation">)</span> detected <span class="token keyword">in</span> your stylelint configuration:
block-closing-brace-empty-line-before
<span class="token function">npm</span> ERR<span class="token operator">!</span> code ELIFECYCLE
<span class="token function">npm</span> ERR<span class="token operator">!</span> errno <span class="token number">1</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span> @ stylelint-check: <span class="token variable"><span class="token variable">`</span>stylelint-config-prettier-check<span class="token variable">`</span></span>
<span class="token function">npm</span> ERR<span class="token operator">!</span> Exit status <span class="token number">1</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span> Failed at the @ stylelint-check script.
<span class="token function">npm</span> ERR<span class="token operator">!</span> This is probably not a problem with npm. There is likely additional logging output above.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里<code>stylelint</code>的 <code>block-closing-brace-empty-line</code> 跟<code>prettier</code>的规则冲突了，从配置中删除即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> run stylelint-check

<span class="token operator">></span> @ stylelint-check D:<span class="token punctuation">\</span>source_code<span class="token punctuation">\</span>hs-npm
<span class="token operator">></span> stylelint-config-prettier-check

No conflicting rules detected <span class="token keyword">in</span> your stylelint configuration<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编辑器的集成同样是安装相应的插件<a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint">Stylelint</a>，插件的配置，只需要设置默认格式化方案即可。如果想手动修复错误，可使用编辑器命令<code>stylelint.executeAutofix</code>（针对当前文件，一次性修复）。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"[css]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"stylelint.vscode-stylelint"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"[less]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"stylelint.vscode-stylelint"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><a href="https://stylelint.io/user-guide/usage/postcss-plugin/">PostCSS plugin</a></p>
</li>
<li><p><a href="https://stylelint.io/user-guide/configure#rules">rules</a></p>
</li>
<li><p><a href="https://stylelint.io/user-guide/configure#plugins">plugins</a></p>
</li>
</ul>
<h2 id="自动整理代码"><a href="#自动整理代码" class="headerlink" title="自动整理代码"></a>自动整理代码</h2><p><strong>应该在格式化时修复错误还是保存时自动格式化？?</strong></p>
<p>最佳体验是<strong>格式化时修复错误</strong>，通过<a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle">Formatting Toggle</a><strong>切换保存是否格式化</strong>。</p>
<p>在禁用保存时自定格式化的时候，也可以选择手动格式化修复错误。</p>
<p><code>Formatting Toggle</code>需要设置<code>editor.defaultFormatter</code>配置，否则不生效！</p>
<p><strong>手动格式化推荐使用<code>Format Document With...</code>命令。（起码自己知道是这次操作是按照哪种格式化方案运行的。）</strong></p>
<h2 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h2><p>工具经全部安装并配置完成，开发者的编辑器也有了相应的配置。这些只能保证目前还有以后，自己编写的代码规范是没问题的。团队开发中，还有其他成员的代码规范也要保证。这时候就需要使用 git hooks 才解决了，这是最后的一个把关。（或者团队成员会不配置编辑器、不装相应的扩展。但是只要有 git hooks，就一定能保证代码提交的格式没毛病。）</p>
<p>延续项目已经有的<a href="https://github.com/okonet/lint-staged">lint-staged</a>、<a href="https://github.com/yyx990803/yorkie">yorkie</a>，继续配置即可。</p>
<p><a href="https://github.com/okonet/lint-staged">lint-staged</a>可以对 git 暂存的文件进行 shell 操作，在提交代码前触发。相当于我们自己手动<code>npm run eslint/pretter/styleint</code>一次，只不过仅作用于即将要提交的文件。相比手动运行命令行格式化工具，<code>lint-staged</code>的速度会更快。</p>
<p><a href="https://typicode.github.io/husky/#/">Husky - Git hooks</a>是一个<code>git hooks</code>库，会在代码提交的时候触发一些动作。</p>
<blockquote>
<p>You can use it to <strong>lint your commit messages</strong>, <strong>run tests</strong>, <strong>lint code</strong>, etc… when you commit or push. Husky supports</p>
</blockquote>
<p><code>yorkie</code>fork 了<code>husky</code>，使用更加简单。</p>
<p><code>package.json</code> 添加相应的配置。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"gitHooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"*.&#123;js?(x),ts?(x)&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span>
      <span class="token string">"prettier --parser=typescript --write"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"*.&#123;css,*.less&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"stylelint --fix"</span><span class="token punctuation">,</span> <span class="token string">"prettier --write"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"*.&#123;md,json&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用命令行提交代码, <code>running pre-commit hook: lint-staged</code>表示运行了 git hooks，使用了&#96;lint-staged，如此代码提交的时候，会自动格式化。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token number">1</span>
 <span class="token operator">></span> running pre-commit hook: lint-staged
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Preparing<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> Preparing<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Running tasks<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Running tasks <span class="token keyword">for</span> *.<span class="token punctuation">&#123;</span>js?<span class="token punctuation">(</span>x<span class="token punctuation">)</span>,ts?<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Running tasks <span class="token keyword">for</span> *.<span class="token punctuation">&#123;</span>css,*.less<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Running tasks <span class="token keyword">for</span> *.<span class="token punctuation">&#123;</span>md,json<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>SKIPPED<span class="token punctuation">]</span> No staged files match *.<span class="token punctuation">&#123;</span>css,*.less<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>SKIPPED<span class="token punctuation">]</span> No staged files match *.<span class="token punctuation">&#123;</span>md,json<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> eslint <span class="token parameter variable">--fix</span>
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> eslint <span class="token parameter variable">--fix</span>
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> prettier <span class="token parameter variable">--parser</span><span class="token operator">=</span>typescript <span class="token parameter variable">--write</span>
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> prettier <span class="token parameter variable">--parser</span><span class="token operator">=</span>typescript <span class="token parameter variable">--write</span>
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> Running tasks <span class="token keyword">for</span> *.<span class="token punctuation">&#123;</span>js?<span class="token punctuation">(</span>x<span class="token punctuation">)</span>,ts?<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> Running tasks<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Applying modifications<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> Applying modifications<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>STARTED<span class="token punctuation">]</span> Cleaning up<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> Cleaning up<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>feat_1.1.8_npm be3198f<span class="token punctuation">]</span> <span class="token number">1</span>
 <span class="token number">2</span> files changed, <span class="token number">3</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> src/a.jsx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>lint 和 prettier 的执行顺序？</strong></p>
<p>个人理解应处理完错误后，再来整理代码，所以这里是先<code>lint</code>后<code>prettier</code>。</p>
<h2 id="行尾结束符问题（LF-x2F-CRLF）"><a href="#行尾结束符问题（LF-x2F-CRLF）" class="headerlink" title="行尾结束符问题（LF&#x2F;CRLF）"></a>行尾结束符问题（LF&#x2F;CRLF）</h2><p>结论，使用 LF，配置好 git 还有 prettier 的规则就行。</p>
<p>添加<code>* text=auto eol=lf</code>到<code>.gitattributes</code>文件。</p>
<p>prettier 设置<code>endOfLine</code>规则为<code>&quot;lf&quot;</code>或者干脆不设置。</p>
<p>v2.0.0 起默认值从<code>auto</code>更改为的<code>lf</code>。</p>
<p>执行<code>prettier --write</code>。</p>
<p>提交代码，然后让团队的所有(windows)成员删除代码仓库，重新 clone，以保证所有的文件都以正常更新为<code>LF</code>。</p>
<p><a href="https://prettier.io/docs/en/options.html#end-of-line">Options · Prettier</a></p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>工具的配置也已经完成了， 应跟团队成员交流，并试用规则是否不太苛刻。确定都同意后，方可合并回主要的分支。并且执行相应的<code>npm script</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run lint
<span class="token function">npm</span> run stylelint
<span class="token function">npm</span> run prettier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果有格式问题，处理完再提交。通知其他团队成员拉取最新代码。（重新 clone 也行，“行尾结束符问题”相关有讲过。）</p>
<p><a href="https://github.com/screw-hand/demo-fragment/tree/main/004-code-style">示例源码</a></p>
<h2 id="未提及的"><a href="#未提及的" class="headerlink" title="未提及的"></a>未提及的</h2><ul>
<li><input disabled="" type="checkbox"> 提交规范</li>
</ul>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul>
<li><p>每个项目的 lint 工具跟编辑的插件都不太一样，建议是使用 VS Code<a href="https://code.visualstudio.com/docs/editor/workspaces">Workspaces</a>特性，分别配置项目的设置、还有插件的使用状态，以提升开发体验。</p>
</li>
<li><p>规范是为了统一风格，是为了在追溯日志（git diff)、code review 的时候，能少一点关系格式的问题。</p>
</li>
<li><p>规范是一个很灵活且主观的问题，最重要的是团队的成员都能接受，工具应该是有加成效果，而不是限制所有人的枷锁。</p>
</li>
<li><p>想要获得比较省事的开发体验，前提还是要折腾编辑器和插件以及合理设置好他们的配置项。</p>
</li>
<li><p>工具去保持代码格式的下限，团队的意识形态去突破代码质量的上限。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>vue技巧篇：组件通讯</title>
    <url>//post/component-communication/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>组件化</strong>也是vue的一大特点之一，组件是组成vue项目的基本单位。<br>一个组件可以做什么？ 这取决于组件的设计，组件一般由以下几点组成：</p>
<ul>
<li>选项</li>
<li>实例属性&#x2F;方法</li>
<li>生命周期</li>
<li>全局API</li>
<li>指令</li>
<li>导入的其他组件</li>
</ul>
<p><strong>组件是可复用的vue实例，可以复用，导入导出，组成组件化系统。</strong></p>
<p>vue的组件都是保持相对独立的关系，可是又可以进行相互依赖（导入导出机制）；<br>这种规范下，实际开发又难免会出现组件之间<strong>传递数据</strong>、<strong>转发事件</strong>的场景。<br>而vue又对组件间的数据、事件做了一定的限制；<br>正因如此，我们需要好好探讨vue的组件通讯。</p>
<span id="more"></span>

<h2 id="父子组件通讯"><a href="#父子组件通讯" class="headerlink" title="父子组件通讯"></a>父子组件通讯</h2><p>由于组件通讯，有时候是为了<strong>传递数据</strong>，而有时候是为了<strong>转发事件</strong>；<br>这里不对这两种场景做区分，统一要解决的场景为“组件通讯”。</p>
<p>其实vue组件通讯并不复杂，官方文档提供了几个方法。</p>
<ul>
<li>props 向子组件传递数据 <a href="https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">传松门</a></li>
<li>emit 向父组件抛出事件 <a href="https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6">传送门</a></li>
<li>v-model 父子组件数据同步（带有一定的抛出事件机制） <a href="https://cn.vuejs.org/v2/guide/components.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model">传送门</a></li>
<li>props+sync修饰符 <a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6">传松门</a></li>
<li>slot-scope 作用域插槽 <a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD">传送门</a></li>
</ul>
<p>由于官方文档介绍得很详细，也提供了<strong>传送门</strong>，具体实现并不详细介绍。<br>不过vue组件有一个设计概念还是有大家了解下的——单向数据流 <a href="https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81">传送门</a></p>
<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><blockquote>
<p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>
</blockquote>
<p><strong>而如果需要改变父组件的数据，则子组件抛出事件；父组件定义自定义事件，在自定义事件中改变自己的数据。</strong></p>
<hr>
<p>这些方法有所缺点，不同的业务场景需要开发者自行衡量；<br>不过适应的业务场景都<strong>局限于父子组件的通讯</strong>。</p>
<p><strong>其实父子组件通讯的是最好解决的，毕竟有直接联系。</strong></p>
<h2 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h2><p><strong>由于非父子组件没有直接联系，只能使用间接联系。<br>两个组件使用相同的“代理“，由”代理“转发数据或者事件的交互。</strong></p>
<p>”代理“各式各样，也有不同的实现方式。</p>
<p><em>备注：这里的“代理”是中转站的意思，为了方便理解，表述为：“代理”。</em></p>
<p>官方也提供几种解决方案：</p>
<ul>
<li><code>$root.data</code> <a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">传送门</a></li>
<li>vuex <a href="https://vuex.vuejs.org/zh/">传送门</a></li>
<li>vue-router <a href="https://router.vuejs.org/zh/">传送门</a></li>
</ul>
<h3 id="root-data"><a href="#root-data" class="headerlink" title="$root.data"></a><code>$root.data</code></h3><p>我们知晓：一个vue项目由组件为单位组成。<br>但是，一个vue项目只有一个根组件。<br>且所有组件实例均可访问根组件实例<code>this.$root</code>。<br>官方文档也提供了相应的实现方式<a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">传送门</a>。</p>
<p>实际开发中，并不使用这种方式进行组件通讯。<br>我们并不希望<code>$root.data</code> 挂载庞大的数据变量。<br>我们仅希望他只负责渲染HTML DOM元素。</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>vuex专用于vue项目，作为<strong>状态管理模式</strong>插件。（理解为集中存储全局变量的地方就好了。）</p>
<p>前面说到“单向数据流”理念，并不适用<strong>多个组件共享状态</strong>场景。</p>
<blockquote>
<p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！<br>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>
</blockquote>
<p>vuex的核心是store（仓库），”store”是一个容器，包含应用中大部分的状态(state)，与单纯的全局对象有两点不同：</p>
<ul>
<li>Vuex 的状态存储是响应式的。</li>
<li>不能直接改变 store 中的状态，若想改变，唯一途径就是显式地提交 (commit) mutation。</li>
</ul>
<p>一个store可以包含<br>state：储存状态   单一状态树<br>action： 提交mutation方法，可执行异步操作<br>mutation：更改store状态，必须是同步操作<br>getter：从state派生状态，返回值会根据依赖缓存<br>modules：将store分割成模块</p>
<p><img src="/post/component-communication/vuex-Flux.png" alt="vuex-Flux"></p>
<p>简单分析下这张图：</p>
<ol>
<li>State 直接渲染在vue组件</li>
<li>组件可以可以通过Dispatch触发 Actions</li>
<li>Actions可以Commit触发Mutations</li>
<li>Mutations可以Mutate更改State</li>
<li>vue组件计算属性更新State的值</li>
</ol>
<p>还有几个注意点：</p>
<ul>
<li>vuex的范围：组件外部的 State &#x3D;&gt; Actions &#x3D;&gt; Mutations &#x3D;&gt; State</li>
<li>Actions、Mutations： Actions可以执行异步（一般用于后端Api交互）、Commit Mutations；Mutations必须是同步，（一般用于更改State状态）</li>
<li>执行顺序：组件也可以跳过Actions 直接 Commit Mutations， 不过执行顺序是不可逆的。</li>
<li>Actions是可以Dispatch 其他Actions的，同理一个Actions也可以Commit 多个Mutations</li>
</ul>
<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>vue-router也可以拥有组件通讯的能力，不过这些组件针对的是直接挂载在路由的<strong>页面组件</strong>。</p>
<ul>
<li>路由元信息 <a href="https://router.vuejs.org/zh/guide/advanced/meta.html">传送门</a></li>
<li>路由组件参数 <a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">传送门</a></li>
<li>导航守卫 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">传送门</a></li>
<li><code>$route.query</code> <a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7">传送门</a></li>
</ul>
<h3 id="总线模式（bus）"><a href="#总线模式（bus）" class="headerlink" title="总线模式（bus）"></a>总线模式（bus）</h3><p>总线模式需要实例化一个空Vue实例，我们把非父子组件的事件统一集中到这个空Vue实例，让这个实例监听，触发这些自定事件就可以。</p>
<p><code>Vue</code> 其实是一个构造函数，既然是构造函数，那就可以多次实例化。<br>而构造函数又有原型对象<code>prototype</code>，原型就是为了共享。</p>
<p>那第一步我们可以在Vue的原型对象上实例化一个空Vue实例。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>备注：如果是大规模使用，可以在<code>main.js</code>直接定义原型bus属性。局部使用可以包装成一个js模块，需要时引入即可。</em></p>
<p>再看实例事件</p>
<ul>
<li><a href="https://cn.vuejs.org/v2/api/#vm-on">vm.$on</a></li>
<li><a href="https://cn.vuejs.org/v2/api/#vm-emit">vm.$emit</a></li>
</ul>
<p>我们可以知晓：$emit 会触发 $on 就可以了。</p>
<p>准备一个文件夹 bus，定义三个组件:</p>
<ul>
<li><code>bus.vue</code></li>
<li><code>bus-child1.vue</code></li>
<li><code>bus-child2.vue</code></li>
</ul>
<p>我们要做的是让child1触发child2事件。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- bus.vue 引入 child1, child2· --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bus-child1</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-bus-child1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bus-child1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bus-child2</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-bus-child2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bus-child2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// bus-child1.vue</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'on-change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selfContent<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// bus-child2.vue</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleChange</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>selfContent <span class="token operator">=</span> $event
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'on-change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>bus.vue <a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/bus/bus.vue">源码</a></p>
<p>然而总线模式还是有带来一定的作用域问题，由于非父子组件的事件统一集中到空Vue实例，这导致了这些被空vue实例监听的自定义事件，在所有的组件是共享的，这种情况下，很容易产生副作用。</p>
<p>若再增加一个<code>bus-child3.vue</code>，它也监听了<code>this.bus.$on(&#39;on-change&#39;, this.handleChange)</code>。<br>而其实我们并不想<code>bus-child3.vue</code>响应 <code>bus-child1.vue</code>事件。</p>
<p>说白了就是作用域太广，bus是全局作用域；<br>又或者说没有命令空间，相同的事件名不能在两个组件定义。</p>
<p><strong>其实这种解决方案之于<code>$root.dat</code>是换汤不换药的，都是把不同组件的数据&#x2F;事件集中到一个vue实例。</strong></p>
<h3 id="emitter-dispatch-x2F-broadcast"><a href="#emitter-dispatch-x2F-broadcast" class="headerlink" title="emitter (dispatch &#x2F; broadcast)"></a>emitter (dispatch &#x2F; broadcast)</h3><p>如果两个组件，有相同的父组件，可以使用<strong>事件派发与广播机制</strong>处理非父子组件通讯。<br>其实都会有相同的父组件的，再不济最顶层就是vue的根实例了，不过一般不需要到根实例。</p>
<p> 派发&#x2F;广播机制很依赖组件层级关系。<br>派发(dispatch):由本组件向上派发事件，供上层组件监听处理。<br>广播(broadcast)：由本组件向下广播事件，供下层组件监听处理。</p>
<p><strong>Element UI 框架源码的<a href="https://github.com/ElemeFE/element/blob/dev/src/mixins/emitter.js">emitter.js</a>就是基于派发广播机制处理非父子组件的通讯。<br>源码的emitter.js把其机制封装成了一个独立的mixin，以便在各个组件方便使用。</strong><br>这里就以emitter.js为例子，简单讲解是如何实现的，还有如何使用这个mixin。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化emitter.js, 只提取出结构</span>

<span class="token keyword">function</span> <span class="token function">broadcast</span> <span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 标准mixins结构</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 定义dispatch方法，需要三个参数</span>
      <span class="token comment">// @params componentName 派发给哪个上层组件</span>
      <span class="token comment">// @params eventName        派发的事件名</span>
      <span class="token comment">// @params params             事件携带参数</span>
      <span class="token function">dispatch</span> <span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 定义broadcast方法，需要三个参数</span>
      <span class="token comment">// @params broadcast           广播给哪个下层组件</span>
      <span class="token comment">// @params eventName        广播的事件名</span>
      <span class="token comment">// @params params             事件携带参数</span>
      <span class="token function">broadcast</span> <span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>componentName</code> 指的是定义组件时，组件的选项name <a href="https://cn.vuejs.org/v2/api/#name">传送门</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'component-name'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>跟总线模式一样，我们也要定义一个文件夹——<code>emitter</code>，三个组件</p>
<ol>
<li><code>emitter.vue</code></li>
<li><code>child1.vue</code></li>
<li><code>child2.vue</code></li>
</ol>
<p>同样让child1触发child2事件。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- emitter.vue 引入 child1 child2 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emitter-child1</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emitter-child1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emitter-child1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emitter-child2</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emitter-child2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emitter-child2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里<code>child1</code>,<code>child2</code>是兄弟组件，他们共同拥有父组件<code>emitter.vue</code>。<br>所以<code>child1</code>要触发<code>child2</code>事件，需要<code>emitter.vue</code>的帮助。</p>
<ol>
<li>child1派发事件到emitter.vue</li>
<li>emitter定义监听事件，广播到child2</li>
<li>child2定义监听，接收emitter的广播事件</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// child1.vue 派发事件到 emitter.vue</span>
<span class="token keyword">import</span> Emitter <span class="token keyword">from</span> <span class="token string">'@/mixins/Emitter'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span> Emitter <span class="token punctuation">]</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'skill-emitter'</span><span class="token punctuation">,</span> <span class="token string">'on-child1-change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selfContent<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// emitter.vue 定义监听事件，广播到 child2.vue</span>
<span class="token keyword">import</span> Emitter <span class="token keyword">from</span> <span class="token string">'@/mixins/emitter'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span> Emitter <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 代理child1派发的on-child1-change事件</span>
    <span class="token comment">// 该事件不在此组件处理</span>
    <span class="token comment">// 广播给child2的on-change事件处理</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'on-child1-change'</span><span class="token punctuation">,</span> e <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token string">'skill-emitter-child2'</span><span class="token punctuation">,</span> <span class="token string">'on-change'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// child2.vue 定义监听，接收 emitter.vue 的广播事件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleChange</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>selfContent <span class="token operator">=</span> $event
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'on-change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>emitter.vue <a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/emitter/emitter.vue">源码</a></p>
<p>派发&#x2F;广播机制对比总线模式，限制了事件必须是具体的某个组件的，使得事件的传递更加精确可控。</p>
<p>emitter.vue 是兄弟组件实例，如果是上下层的组件。<br>不需要经过如emitter.vue的代理，直接在目标组件监听自定义事件。</p>
<p>不管是dispatch还是broadcast方法，都很依赖<code>componentName</code>，还有<code>eventName</code>，<br>所以<strong>良好的命名规范是非常重要的</strong>，dispatch&#x2F;broadcast到指定的组件的xx事件。<br>该指定的组件<code>this.$on</code>监听自定义事件就可以触发。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>今天我们从组件通讯的解决方式出发，介绍到了多种组件通讯的解决方案。<br>以前觉得组件通讯无非就是这几种。</p>
<ol>
<li>prop &lt;&#x3D;&gt; emit</li>
<li>vuex</li>
<li>bus</li>
<li>dispatch &#x2F; broadcast</li>
</ol>
<p>好好的梳理出来才发现其实在很多场景我们都需要用到组件通讯。<br>只是我们太过习以为常，反而有点忽略了也是其解决方案之一。</p>
<p>在实例开发中，我们也需要结合实际场景思考，是否以上的解决方案是否适用。</p>
<p>一般情况下，我是支持使用dispatch&#x2F;broadcast模式去处理大多数的非父子组件通讯的。<br>可有时候要一个组件触发各自触发n个组件的事件，这种模式可能编写起来比较繁琐。<br>这个时候可以考虑总线模式，又或者，为了一处比较特殊的处理，是否考虑要引入一个mixins。<br>这些问题都是需要开发者是在实际开发的时候好好去估量利弊的，并没有一种万能的解决方案。<br>（对我来讲，dispatch&#x2F;broadcast 就已经很万能了。）</p>
<p>还有这里想吐槽一下。</p>
<blockquote>
<p>Flux 架构就像眼镜：您自会知道什么时候需要它 。–Dan Abramov (Redux 的作者)</p>
</blockquote>
<p>说真的，直到现在我完全不能理解这句充满诗意的话，以及为什么偏偏是像眼镜而不是心灵的窗户？！</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-skill</tag>
      </tags>
  </entry>
  <entry>
    <title>vue技巧篇：我的浏览器也是“控制台”</title>
    <url>//post/control-pane/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写代码少不了，调试最简单方便的方法是控制台输出信息，如js的 <code>control.log</code>。<br>可有时候我们要监听的变量是改动频繁，可能要多次使用<code>control.log</code>，控制台信息太多看得也容易乱。<br>有一次查阅资料的时候，看到其他开发者使用<code>pre</code>标签直接在页面上打印变量，突然受到了一点感悟。</p>
<h2 id="pre-和-data"><a href="#pre-和-data" class="headerlink" title="pre 和 $data"></a>pre 和 $data</h2><p>html的<code>pre</code>标签并不常用，它可以保留原格式（空格和换行符），常用于表示源代码。<br>有了<code>pre</code>我们很容易在页面上输出源码。此外，还需要vue的声明式渲染 —— <code>｛｛ x ｝｝</code> 或者是 <code>v-text</code> 指令。<br>以及 vue 的 <code>$data</code> 实例属性，其实引用的是<code>data</code>对象属性的访问。</p>
<p><em>附：博客系统，不支持双括号，这里用 <code>v-text</code>代替，大部分情况下两者可以互换</em></p>
<p>说了那么多，其实只需要<code>&lt;pre v-text=&quot;$data&quot;&gt;&lt;/pre&gt;</code>,这一行就够了。好的，今天就到这里，大家再见。</p>
<p>…</p>
<span id="more"></span>

<h2 id="编写样式"><a href="#编写样式" class="headerlink" title="编写样式"></a>编写样式</h2><p>如果只是简单的方便调试，确实只需要上面一行代码就够了。<br>只是本着折腾的命，觉得可以设计成一个组件，进行复用。<br>就算设计成一个组件，实用性的不大，趣味性要多过实用性吧。</p>
<p>如果在实际开发中，直接单纯只写一行，调试使用的<code>pre</code>可能会被其他DOM元素的样式所铺盖。<br>所以在编写组件前可以给这个<code>pre</code>写一点样式，先开头说的代码吧。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Package  <span class="token keyword">from</span> <span class="token string">'@/../package.json'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'views-skill-control-panel'</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">strong</span><span class="token operator">:</span> <span class="token string">'&lt;strong>I \'m strong&lt;/strong>'</span><span class="token punctuation">,</span>
      <span class="token keyword">debugger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">package</span><span class="token operator">:</span> Package
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可能比官网入门实例还要简单，唯一有疑问的可能也就是 <code>import</code> 一个 <code>json</code> 文件进来， 这在<code>es6 Modules</code>中是允许的，相关资料请自行查阅。</p>
<p><img src="/post/control-pane/pre-$data.jpg" alt="pre-$data"></p>
<p>ok，先看html部分，再看css。</p>
<p>html中，把<code>data</code>的属性都渲染到DOM上，并且html实体不会被转义，（<code>v-text</code>的功劳）。<br>数组、对象也全被展开，不像在浏览器控制台是默认闭合的，而且key值也被加上双引号，这是<code>JSON</code>的格式。</p>
<p>内容上看非常友好，样式因为没写，非常朴素，但我们也不追求美感，能看就行，这里有几个因素影响了观看。</p>
<ol>
<li>内容过长，高度容易溢出</li>
<li>默认定位，容易被其他元素遮挡</li>
<li>透明背景，深色背景观看费劲</li>
<li>字体样式会被通用样式影响</li>
</ol>
<p>其实以上问题都是其他DOM元素影响<code>pre</code>的阅读观看，我们要固定，或者说通配一下pre的样式。<br>让其在不同色彩表现、不同布局的页面降低其他DOM元素对自身的影响。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 模拟pre真实使用场景 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$data<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pre-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.pre-panel</span> <span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 999999<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 380px<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 建议半透明背景 */</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #34ecff<span class="token punctuation">;</span>                <span class="token comment">/* 亮色的颜色即可 */</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">text-indent</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>以上css样式都是在多次实践中一行行增加，现已能适应大多数页面。</strong></p>
<p>模拟pre真实使用场景，完整代码：<a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/control-panel/control-panel.vue">传送门</a></p>
<p><img src="/post/control-pane/pre-panel.jpg" alt="pre-panel"></p>
<p>即使在色彩强烈，内容纷乱的布局上，pre-panel仍然不影响阅读。</p>
<h2 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h2><p>这个组件也非常简单，还是把一行代码还有样式抽象成一个组件，就基本完成了。<br>不过考虑到扩展性，我们也可以考虑下给组件一些常用的配置选项。</p>
<p>第一步我们就是新建一个 <code>control-panel.vue</code> 文件，然后把刚才写的代码先复制过去。<br>接下来复用就会发现 <code>v-text=&quot;$data&quot;</code> 使得每次复用绑定的都是自身组件的变量。<br>我们这里应该使用插槽slot，然而每次插槽每次都要复用都要传值，我们更喜欢默认显示<code>$data</code>。<br>然后再给指定插槽内容；当然这个 <code>$data</code> 是 <code>control-panel</code> 的父组件（<strong>引用<code>control-panel</code>的那个组件</strong>）而不是自己。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>control-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>
      &#123;&#123; defaultProps &#125;&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">defaultProps</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>$data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> parent<span class="token punctuation">.</span>$data
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是最小化的可配置使用组件，然后这样还不够。<br>虽然 <code>control-panel</code> 不会被其他组件遮住了，可是他遮住了其他组件。<br>所以在某些情况，我们希望它“挪一挪”自己的位置，增加几个<code>props</code>即可解决这个问题。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'380px'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'left'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">currentWidth</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 记得删除.control-panel的 left 属性！！ */</span>
<span class="token selector">.position-left</span> <span class="token punctuation">&#123;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.position-right</span> <span class="token punctuation">&#123;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>control-panel<span class="token punctuation">"</span></span>
    <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; width: currentWidth &#125;<span class="token punctuation">"</span></span>
    <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[
      &#123; 'position-left': position === 'left' &#125;,
      &#123; 'position-right': position === 'right' &#125;
    ]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>&#123;&#123; defaultProps &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 这里不换行是为了消除首行缩进 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>props</code>只定义了3个，也有插槽，可以自定义，使用起来也不繁琐，方便了很多，不是吗？</p>
<ul>
<li>组件源码：<a href="https://github.com/screw-hand/stardust/blob/master/src/components/control-panel/control-panel.vue">传送门</a></li>
<li>复用-1：<a href="hhttps://screw-hand.github.io/stardust/#/skill/multi-index-1">传送门</a></li>
<li>复用-2：<a href="https://screw-hand.github.io/stardust/#/skill/multi-index-2">传送门</a></li>
</ul>
<p>当然还可以再进行扩展，只是没什么必要，如：随机color，交互设置样式和插槽内容；<br><del>最好可以跟程序窗口一样可以最小化最大化关闭拖曳改变宽高..</del></p>
<h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>设计一个组件，还要在实际项目中使用，可能因为各种现实因素影响，如果不喜欢组件的方式。<br>（不想写，或者是嫌弃麻烦的）这里可以提供一个代码片段，需要的使用的直接复制粘贴即可。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> 9999<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .7<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
  &#123;&#123; formData &#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>什么？不想每次都复制一遍？想编辑器<strong>代码提示</strong>的功能一样打几个单词就帮你打一整段？<br>好伐，我也是一个嫌弃麻烦的人，如果你跟我一样是用vs code 的话，那我们可以用 vs code 增加用户自定义的代码提示。</p>
<p><strong>vs code 菜单： 文件 &#x3D;&gt; 首选项 &#x3D;&gt; 用户代码片段 &#x3D;&gt; vue-html.json</strong></p>
<p><img src="/post/control-pane/user_snippets.jpg" alt="user_snippets"></p>
<p><img src="/post/control-pane/user_snippets_lang.jpg" alt="user_snippets_lang"></p>
<p>vue-html.json中增加这一段</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"Print to pre dom"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">"prefix"</span><span class="token operator">:</span> <span class="token string">"vuepre"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
   <span class="token string">"&lt;pre style=\"position: fixed; top: 20px; left: 20px; bottom: 20px; width: 300px; overflow: auto; z-index: 9999; font-size: 16px; line-height: 20px; color: skyblue; background: rgba(0, 0, 0, .7)\">"</span><span class="token punctuation">,</span>
   <span class="token string">"  &#123;&#123; $$data$2 &#125;&#125;"</span><span class="token punctuation">,</span>
   <span class="token string">"&lt;/pre>"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样在<code>*.vue</code>的文件格式中，vs code 就支持对<code>vuepre</code>的代码提示了。</p>
<p><img src="/post/control-pane/vue-pre.jpg" alt="vue-pre"></p>
<p>也直接直接拿我的 vue-html.json（<a href="/download/vue-html.txt">传送门</a>），使用任何文本编辑器打开，另存为：<code>%APPData%\Code\User\snippets\vue-html.json</code></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>此本到这里就结束了，定义了一个可以监测变量的组件，相当于把控制台搬运到了网页，只是这个控制台是简化版的。</p>
<!-- 当然之后的开发，喜欢`control.log`、`debugger`还有打断点的还是会选择之前喜欢的方式调试。 -->
<p>只是很多开发者都很讨厌调试，因为只有自己的代码出现问题才会去调试。<br>其实调试本来就是一件苦中作乐的事情，平时写的代码，都是为了满足各种需求，有时候写得并不自由。<br>那么，我们在调试的时候，为何不使用一种更有趣味的方式去调试呢？起码这个时候自由度很高很高..</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-skill</tag>
        <tag>debugger</tag>
      </tags>
  </entry>
  <entry>
    <title>使用代理解决跨域问题</title>
    <url>//post/cors-proxy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如今主流开发模式<strong>前后端分离</strong>已是普遍的开发模式，相对于传统的前后端耦合，前后端各拥有自己的一套开发环境。开发完成后，又一起部署到是测试&#x2F;线上环境。</p>
<p>因为后端的API服务并不部署在前端的开发环境上，所以在开发时，经常会遇到需要跨域的场景；即便是部署到测试&#x2F;线上环境，也不一定是部署到同一台服务器（单体、集群式服务）。</p>
<p>内容：介绍跨域、同源策略的基本概念；收跨域影响的场景；常用的跨域方案、代理；反向代理、正向代理；开发、线上环境配置代理。</p>
<span id="more"></span>

<h2 id="跨域、同源策略"><a href="#跨域、同源策略" class="headerlink" title="跨域、同源策略"></a>跨域、同源策略</h2><p>我们经常遇到，跨域的问题。在讲跨域前。先来了解下同源策略吧。</p>
<blockquote>
<p>同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。 </p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">MDN-浏览器的同源策略</a> 说的很长，按照个人的理解的是————</p>
<p><strong>同源策略(Same Origin Policy)，是浏览器的一个安全策略，为了网站的安全，不同源的资源无法进行交互。</strong></p>
<p>解读：</p>
<ol>
<li>只有浏览器才受到同源策略的限制</li>
<li>这是个安全策略，使用不当会影响网站的安全性</li>
<li>影响不同源的资源交互</li>
</ol>
<p>那么再延伸一个，什么是“源”？</p>
<blockquote>
<p>如果两个 URL 的 protocol、port (en-US) (如果有指定的话)和 host 都相同的话，则这两个 URL 是同源。这个方案也被称为“协议&#x2F;主机&#x2F;端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重&#x2F;三重&#x2F;四重&#x2F;五重&#x2F;等的通用形式）。</p>
</blockquote>
<p><strong>个人理解：协议(protocol)、域名(host)、端口(port)；三者一致，才是同源，其中一个不一样</strong>，就不是同源，会受到同源策略的限制无法交互。**</p>
<p>理解了同源策略，再来看跨域。</p>
<p>跨域(cross domain)：是一种场景，也是一种方案，跨域名(源)资源交互。</p>
<p>个人理解：当我们请求<strong>不同源</strong>的资源，受到同源策略的限制，这个时候说明，我们<strong>遇到了跨域的场景</strong>，也需要用到相关的跨域方案，<strong>绕过同源策略的限制</strong>。</p>
<p><em>ps：其实一直很疑惑，如果按照浏览器的同源策略命名，跨域(cross domain)应该叫做跨源(cross origin)。</em></p>
<h2 id="常用的跨域方案、代理"><a href="#常用的跨域方案、代理" class="headerlink" title="常用的跨域方案、代理"></a>常用的跨域方案、代理</h2><ol>
<li>JSONP</li>
<li>CORS</li>
<li>postMessage(iframe)</li>
<li>websocket</li>
<li>proxy</li>
<li>window.name + iframe</li>
<li>location.hash + iframe</li>
<li>document.domain + iframe</li>
</ol>
<p>看似方法很多，其实很多原理就两种:</p>
<ol>
<li>绕过同源策略 —— <code>JSONP</code>是动态创建一个<code>script</code>标签发起GET请求，服务端响应一个可以供<code>js</code>回调使用的函即可；<code>iframe</code>是其标签的特性就决定本身不受同源策略的限制，可以跨资源访问，加上使用其相关的一些api，进行通讯交互；<code>webscoket</code>同理，也是本身可跨资源访问，连接打开双端可互相通讯；proxy，前端不直接请求目的资源，向代理服务器请求，代理服务器转发请求，转发后端api响应的数据给前端。</li>
<li>破解同源策略 —— CORS 直接在服务器设置HTTP相关的header，允许服务器资源可被跨域访问。</li>
</ol>
<p>然后，在实际开发中… 很多方案能实现的机率，很少。<br><strong><code>JSONP</code>、 <code>iframe</code> 需要双端配合</strong>，有时候我们用的是第三方的服务器资源，我们很难要求第三方的API配合我们开发。**<code>websocket</code> 更是对后端的技术选型的一个要求。**为了解决跨域，是否值得让后端使用<code>websocket</code>也是一种取舍。<code>CORS</code>是需要在服务器上设置的，如果又是第三方的资源，也是没有条件设置。</p>
<p>代理则是在<strong>双端之间加入代理层</strong>，<strong>转发客户端的请求</strong>，由于同源策略只是限制浏览器，代理服务器不受其影响，可以<strong>直接跨域</strong>。</p>
<p>根据个人的经验，代理（proxy）是可实现性最高的一种。我愿称之为<strong>代理是跨域最好、也是最后的解决方案。</strong></p>
<h2 id="反向代理、正向代理"><a href="#反向代理、正向代理" class="headerlink" title="反向代理、正向代理"></a>反向代理、正向代理</h2><p>代理服务器(proxy server)是一个<strong>中介</strong>，位于客户端和目标服务器之间的一个服务器。将<strong>请求转发</strong>到目标地址，再响应目标地址的数据给客户端而已。</p>
<p>正向代理（forward proxy）：客户端发送请求到代理服务器，代理服务器<strong>自己再去发送请求</strong>到目标地址。这个请求其实是<strong>由代理服务器发的</strong>，代理服务器接收到目标地址的响应，再响应给客户端。<strong>服务端不知道不知道代理服务器是否为真正的客户端。</strong></p>
<p>反向代理（reverse proxy）：客户端发送请求到代理服务器，代理服务器<strong>直接转发</strong>请求到目的地址。目标地址响应的数据，由代理服务器响应给客户端。<strong>客户端不知道代理服务器的存在</strong>。</p>
<h2 id="配置开发环境的代理"><a href="#配置开发环境的代理" class="headerlink" title="配置开发环境的代理"></a>配置开发环境的代理</h2><p>前端目标主流的<code>vue</code>、<code>react</code>项目的开发环境（web server）都是基于<code>node</code>使用<code>webpack</code>运行的，<code>webpack</code>的<a href="https://webpack.js.org/configuration/dev-server/#devserverproxy">devServer.proxy</a>支持配置正向代理，以完成跨域。<br>但其实<code>devServer.proxy</code>是基于<a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a>实现的，也就是说<code>http-proxy-middleware</code>才真正的代理服务器，<code>webpack</code>只是集成了其工具，开放了一个<code>devServer.proxy</code>的配置入口来配置相应的功能。<br><strong>区别这点很重要，代理不知道怎么配置，应该查阅<a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a>的相关资料！</strong><br>然而<code>vue</code>表面看起来并不使用<code>webpack</code>，事实上是：<code>vue-cli</code>是基于<code>webpack</code>封装后实现的，<a href="https://cli.vuejs.org/zh/guide/webpack.html#webpack-%E7%9B%B8%E5%85%B3https://cli.vuejs.org/zh/guide/webpack.html#webpack-%E7%9B%B8%E5%85%B3">vue.config.js</a>可以配置相应的<code>webpack</code>。<br>而<code>react</code>，官方的脚手架<code>craete-react-app</code>隐藏了<code>webpack</code>的配置，可以使用<code>npm run eject</code>暴露出<code>webpack</code>的配置。个人对于官方脚手架，只觉得练习demo简洁，开发生产项目更偏好于<a href="https://www.npmjs.com/package/@craco/craco">craco</a>。而craco本意上是指<strong>C</strong>reate <strong>R</strong>eact <strong>A</strong>pp <strong>C</strong>onfiguration <strong>O</strong>verride(create-react-app配置覆盖)，所以可以理解为基于官方脚手架的封装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vue-cli <span class="token operator">=</span><span class="token operator">></span> webpack <span class="token operator">=</span><span class="token operator">></span> http-proxy-middleware
craco <span class="token punctuation">(</span><span class="token operator">=</span><span class="token operator">></span> craete-react-app<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> webpack <span class="token operator">=</span><span class="token operator">></span> http-proxy-middleware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><ol>
<li><code>react</code>项目，使用<code>craco</code>配置</li>
<li>url设计 127.0.0.1:9999&#x2F;server &#x3D;&gt; 127.0.0.1:9999&#x2F;proxy</li>
<li>创建文件</li>
</ol>
<p>public&#x2F;server&#x2F;data.json</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">,</span>
  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>public&#x2F;server&#x2F;index.html</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>检查web服务是否能正常访问到上一步的两个资源（建议使用postman）; <a href="http://127.0.0.1:9999/server">http://127.0.0.1:9999/server</a> 、 <a href="http://127.0.0.1:9999/server/data.json">http://127.0.0.1:9999/server/data.json</a></li>
<li>访问代理的url（由于还没开始设置代理，被代理url响应结果跟上面是不一致的） <a href="http://127.0.0.1:9999/proxy">http://127.0.0.1:9999/proxy</a> 、 <a href="http://127.0.0.1:9999/proxy/data.json">http://127.0.0.1:9999/proxy/data.json</a></li>
</ol>
<h3 id="配置http-proxy-middleware"><a href="#配置http-proxy-middleware" class="headerlink" title="配置http-proxy-middleware"></a>配置http-proxy-middleware</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// craco.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">"/proxy"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"http://localhost:9999"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token string-property property">"^/proxy"</span><span class="token operator">:</span> <span class="token string">"server"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编写两个请求，来验证在浏览器中的表现效果。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/index.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">webInit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">"/data.json"</span><span class="token punctuation">;</span>
  <span class="token function">checkServer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">checkProxy</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
​
<span class="token comment">// 检测local server</span>
<span class="token keyword">const</span> <span class="token function-variable function">checkServer</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> serverRequest <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/server/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">respText</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>respText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> serverRequest<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
​
<span class="token comment">// 检测代理</span>
<span class="token keyword">const</span> <span class="token function-variable function">checkProxy</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> proxyRequest <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/proxy/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">respText</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>respText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> proxyRequest<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
​
<span class="token function">webInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启项目后，在浏览器中访问，两个<code>fetch</code>请求的响应结果一致，即跨域成功。</p>
<h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>项目开发完成后，我们要打包后再部署到服务器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>部署到服务器后，浏览器访问生产环境的url，会发现两个<code>fetch</code>还是会遇到跨域问题。这是为什么呢。<br>开发环境使用的<code>node</code>环境，拥有<code>webpack</code>和<code>http-proxy-middleware</code>的功能和配置；打包后只剩下静态资源文件———— <code>*.html</code>， <code>*.css</code> , <code>*.js</code> <code>*.jpg/png/gif</code> 等…</p>
<blockquote>
<p>服务器上是用nginx作为HTTP web server，所以需要在nginx再配置一次代理。<br>如果是node，就用node配置，服务器上静态资源文件被哪种HTTP web server处理，就在哪个环境配置代理。</p>
</blockquote>
<p>还是以 &#x2F;server &#x3D;&gt; &#x2F;proxy 代理策略举例。</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">#...</span>
  <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> 9999；
    location /proxy/</span> <span class="token punctuation">&#123;</span>
      <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:9000/server/</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">300s</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">#...</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">#...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>说到nginx，也给一下CROS的配置方案吧。</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /proxy/</span> <span class="token punctuation">&#123;</span>
  <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Origin *</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Methods <span class="token string">'GET, POST, OPTIONS'</span></span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Headers <span class="token string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这次我们以跨域为讨论主题，重点放在代理上，了解了正向代理，反向代理，开发环境(http-proxy-middleware)、线上环境(nginx)的配置。代理能做的事情不仅仅是跨域，还可以实现负载均衡、匿名访问等。可是在跨域中，代理是最好的解决方案，一劳永逸。</p>
]]></content>
  </entry>
  <entry>
    <title>es6主要特性小结</title>
    <url>//post/es6-main/</url>
    <content><![CDATA[<p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。</p>
<p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p>
<p>let：<code>let</code>实际上为JavaScript新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块（花括号）内有效；与<code>var</code>的区别是，<code>var</code>用来做循环的计数变量，会泄露成全局变量，在外部调用的值是循环完成后的值。</p>
<p>const：声明变量，但声明的是<strong>常量</strong>，一旦声明，常量的值不能改变。</p>
<span id="more"></span>

<p>class：定义一个类，可定义构造方法在其中，构造方式<code>this</code>关键字指向实例。<code>constructor</code>内定义的方法和属性是<strong>实例对象</strong>自己的，而<code>constructor</code>外定义的方法和属性则是<strong>所有实例对象可以共享</strong>的。</p>
<p>extends：<code>class</code>之间可用<code>extends</code>关键字实现继承</p>
<p>super：指代父类的实例（即父类的this对象）。子类必须在<code>constructor</code>中调用·方法，否则新建实例就会报错，因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。</p>
<blockquote>
<p>ES6的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>
</blockquote>
<p>arrow function：箭头函数 <code>(i)=&gt; i+1</code>;箭头函数体内的this对象指向定义时所在的对象（箭头函数内无自己的<code>this</code>，其<code>this</code>继承外面的作用域）</p>
<p>template string：用反引号（ &#96; ）来标识起始，用<code>$&#123;&#125;</code>来引用变量，所有的空格和缩进都会被保留在输出之中</p>
<p>destructuring：从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解构</span>
<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token string">'ken'</span>
<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token string">'lili'</span>
<span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>cat<span class="token punctuation">,</span> dog<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">)</span>  <span class="token comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span>

<span class="token comment">// 赋值</span>
<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'animal'</span><span class="token punctuation">,</span> <span class="token literal-property property">many</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> many<span class="token punctuation">&#125;</span> <span class="token operator">=</span> dog
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> many<span class="token punctuation">)</span>  <span class="token comment">//animal 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>default：变量未赋值时给该变量一个默认值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">animal</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">'cat'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//cat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>rest：过滤变量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">animals</span><span class="token punctuation">(</span><span class="token parameter">once<span class="token punctuation">,</span> <span class="token operator">...</span>types</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">animals</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'fish'</span><span class="token punctuation">)</span>   <span class="token comment">//[ "dog", "fish"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>import export：es6的模块化机制， import用于导入模块，可以选择性导入模块中的一部戏属性&#x2F;方法，也可给导入的模块重命名；export用于导出模块，也多次导出，任何数据类型都可导出（变量、函数、类等..）。</p>
<p>基本使用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//index.js</span>
<span class="token keyword">import</span> animal <span class="token keyword">from</span> <span class="token string">'./content'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token comment">// A cat</span>

<span class="token comment">//content.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">'A cat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>多次导出，导入模块时使用 <code>as</code> 重命名 <code>type</code> 为 <code>animalType</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//content.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">'A cat'</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'Hello!'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token string">'dog'</span><span class="token punctuation">;</span>

<span class="token comment">//index.js</span>
<span class="token keyword">import</span> animal<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> say<span class="token punctuation">,</span> type <span class="token keyword">as</span> animalType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./content'</span>
<span class="token keyword">let</span> says <span class="token operator">=</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>animalType<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>says<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>animal<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token comment">//The dog says Hello to A cat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>项目部署</title>
    <url>//post/deploy/</url>
    <content><![CDATA[<p>工作中实操过的项目部署记录，使用的是Ubuntu系统，nignx 和 C# 的运行环境均已安装。</p>
<h2 id="前期配置文件准备"><a href="#前期配置文件准备" class="headerlink" title="前期配置文件准备"></a>前期配置文件准备</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以acs.HOST.cn举例 （HOST）为主域名</span>

<span class="token comment"># 项目路径</span>
/home/wwwroot/acs.xxx.cn

<span class="token comment"># 从服务器下载文件配置文件（需要本机使用pscp或其他支持ftp协议的程序）</span>
pscp USERNAME@IP:/home/wwwroot/acs.HOST.cn/appsettings.json E:<span class="token punctuation">\</span><span class="token environment constant">PATH</span>

<span class="token comment"># nginx 配置acs 所有项目(HOSTboss.conf)</span>
usr/local/nginx/conf/HOSTboss.conf

<span class="token comment"># nginx 配置路径</span>
usr/local/nginx/conf/nginx.conf

<span class="token comment"># 守护进程</span>
/etc/systemd/system/apps.acs.serive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建项目目录</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> /home/wwwroot/acs.HOST.cn

<span class="token comment"># 设置文件夹权限为完全访问</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> acs.HOST.cn

<span class="token comment"># 切换到nginx目录</span>
<span class="token builtin class-name">cd</span> /usr/local/nginx
<span class="token builtin class-name">cd</span> ./conf

<span class="token comment"># 上传项目配置</span>
<span class="token comment"># C:\Users\Admin\Downloads\pscp.exe</span>
.<span class="token punctuation">\</span>pscp.exe E:<span class="token punctuation">\</span><span class="token environment constant">PATH</span><span class="token punctuation">\</span>HOSTboss.conf USERNAME@acs.HOST.cn:/home/wwwroot/acs.HOST.cn

<span class="token comment"># 移动文件</span>
<span class="token function">sudo</span> <span class="token function">mv</span> HOSTboss.conf /usr/local/nginx/conf

<span class="token comment"># 检查include</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /usr/local/nginx/conf/nginx.conf

<span class="token comment"># 检查证书 HOST.cn.key  HOST.cn.pem</span>
<span class="token function">ls</span> /usr/local/nginx/conf/cert

<span class="token comment"># 测试 重载nginx</span>
<span class="token builtin class-name">cd</span> /usr/local/nginx
<span class="token builtin class-name">cd</span> ./sbin
<span class="token function">sudo</span> ./nginx <span class="token parameter variable">-t</span> <span class="token comment"># 测试</span>
<span class="token function">sudo</span> ./nginx <span class="token parameter variable">-s</span> reload <span class="token comment"># 重载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="项目部署、守护进程"><a href="#项目部署、守护进程" class="headerlink" title="项目部署、守护进程"></a>项目部署、守护进程</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 上传已打包的项目到服务器</span>
.<span class="token punctuation">\</span>pscp.exe E:<span class="token punctuation">\</span><span class="token environment constant">PATH</span><span class="token punctuation">\</span>acs.HOST.cn<span class="token punctuation">\</span>FILENAME.zip USERNAME@acs.HOST.cn:/home/wwwroot/acs.HOST.cn

<span class="token comment"># 解压</span>
<span class="token builtin class-name">cd</span> /home/wwwroot/acs.HOST.cn
<span class="token function">sudo</span> <span class="token function">unzip</span> <span class="token parameter variable">-o</span> FILENAME.zip

<span class="token comment"># 检查证书 HOST.pfx</span>
<span class="token function">ls</span> /home/wwwroot/acs.HOST.cn/

<span class="token comment"># 移动守护进程配置文件到指定目录</span>
<span class="token function">sudo</span> <span class="token function">mv</span> ./apps.acs.service /etc/systemd/system

<span class="token comment"># 定义守护进程</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> apps.acs.service

<span class="token comment"># 开启进程</span>
<span class="token function">sudo</span> systemctl start apps.acs.service

<span class="token comment"># 查看状态</span>
<span class="token function">sudo</span> systemctl status apps.acs.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>web服务器只需部署nginx</p>
<ul>
<li>sso</li>
<li>boss</li>
<li>mgt</li>
</ul>
<p>部署成功，对外开放三个地址</p>
<ul>
<li><code>https://sso.HOST.cn</code>  单点登录</li>
<li><code>https://boss.HOST.cn</code> 门户网站</li>
<li><code>https://mgt.HOST.cn</code>  一体化管理中心</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>浏览器下载与上传文件</title>
    <url>//post/file/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>浏览器&#x2F;服务器如何生成、下载与上传文件，以及js的文件处理。</p>
<span id="more"></span>

<h2 id="浏览器生成文件"><a href="#浏览器生成文件" class="headerlink" title="浏览器生成文件"></a>浏览器生成文件</h2><p><strong>下载一个文件前，要先确定文件是从哪里生成的，一种是由浏览器生成，另一种是服务端生成文件。</strong>生成文件之后，方可供用户下载到本地设备（计算机&#x2F;移动设备）的存储空间。</p>
<p>实例代码：<a href="https://github.com/screw-hand/demo-fragment/tree/main/001-file">001-file</a></p>
<p>我们先讨论浏览器的，再来讨论服务端。   </p>
<p>接下来我们会分别用几种方式生成同一个文件——文件名为<code>hello-world.json</code>，内容为<code>&#123;&quot;hello&quot;:&quot;world&quot;&#125;</code>。</p>
<h3 id="new-File"><a href="#new-File" class="headerlink" title="new File"></a>new File</h3><p>使用<code>js</code>的<code>File</code>对象可以创建一个文件 —— <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/File">new File</a>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'hello-world.json'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/post/file/image-20210130180021380.png"></p>
<p>这是js文件对象最容易使用的一个<code>Web Api</code>了，接下来介绍的都是二进制文件对象，而且这几个对象互相都有继承关系，也可互相转换。</p>
<p><code>application/json</code>——这是Content-Type（内容类型），常用于<code>HTTP</code>协议，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件。</p>
<h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob</a>对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/post/file/image-20210130180542826.png"></p>
<p>直接打印显示的是一个<code>Blob</code>对象而且没办法直接查看文件的内容，我们可以用<code>Blob.text()</code>查看，该函数返回一个<code>Promise</code>对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">blob<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;"hello":"world"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Data-URLs"><a href="#Data-URLs" class="headerlink" title="Data URLs"></a>Data URLs</h3><p><a href="https://developer.mozilla.org/zh-cn/docs/Web/HTTP/data_URIs">Data URLs</a>，即前缀为 data: 协议的URL，其允许内容创建者向文档中嵌入小文件。</p>
<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">data</span><span class="token punctuation">:</span><span class="token header-value">application/json,&#123;"hello":"world"&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>直接丢到浏览器的地址栏访问，即可。</p>
<p><img src="/post/file/image-20210130214916127.png"></p>
<p>Data URLs也可以表达用base64编码后的文件。</p>
<p>使用在线网站将“JSON转换Base64”，编码后可得<code>eyAiaGVsbG8iOiAid29ybGQiIH0=</code>，按照Data URL的格式组合。</p>
<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">data</span><span class="token punctuation">:</span><span class="token header-value">application/json;base64,eyAiaGVsbG8iOiAid29ybGQiIH0=</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h3><p>到目前为止，我们分别用<code>new File</code> ，<code>Blob</code>，<code>Data Url</code>创建了一个<code>JSON</code>文件，那么如果要创建其他格式的文件呢。比如<code>*.txt</code>，<code>*.html</code>。上述的方法都有<code>application/json</code>的字符，也介绍过这是Content-Type，我们只需要更换相应的Content-Type类型即可，比如：用<code>html</code>的格式输出一级标题（<code>h1</code>），内容为<code>&#123;&quot;hello&quot;:&quot;world&quot;&#125;</code>。</p>
<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">data</span><span class="token punctuation">:</span><span class="token header-value">text/html,&lt;h1>&#123;"hello":"world"&#125;&lt;/h1></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更多文字格式可以自行搜索“Content-Type 手册”。</p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>现在来下载文件，通过浏览器生成的文件都可以通过使用<code>a</code>超链接标签下载，可能会疑惑为什么<code>a</code>标签可以下载文件，<code>H5</code>后，<code>a</code>标签多了一个<code>donwload</code>属性，此时浏览器会下载<code>href</code>指定的<code>url</code>表示的文件。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data:application/json,&#123; <span class="token entity named-entity" title="&quot;">&amp;quot;</span>hello<span class="token entity named-entity" title="&quot;">&amp;quot;</span>: <span class="token entity named-entity" title="&quot;">&amp;quot;</span>world<span class="token entity named-entity" title="&quot;">&amp;quot;</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello-world.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>data URL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em><code>HTML</code>中引号需要转义，即为<code>&amp;quot;</code></em></p>
<p>点击之前先对浏览器进行两个设置，一个是设置<strong>不自动保存文件</strong>，一个是设置对<code>JSON</code>文件的处理方式。</p>
<p><img src="/post/file/image-20210131220417347.png"></p>
<p>确保设置生效后点击刚才的超链接，将会出现这个“打开文件”的弹窗提醒，可以选择<strong>打开</strong>也可以选择保存文件。</p>
<p>“打开”会直接通过指定的本地程序打开，此时目录保存在操作系统的缓存目录，比如我的是<code>C:\Users\Chris\AppData\Local\Temp\hello-world.json</code>。</p>
<p>“下载”会使其文件保存在本地存储设备，因为刚设置了“每次都问您要存在哪”，所以会让我们选择保存目录。</p>
<p><img src="/post/file/image-20210131215545123.png"></p>
<p>刚还只是<code>Data URL</code>方式创建的文件下载，要知道<code>new File</code>还有<code>Blob</code>并没有直接提供url。此时我们可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">URL.createObjectURL()</a>，直接将<code>new File</code>、<code>Blob</code>类型转换成一个<code>URL</code>。这次我们不用纯<code>HTML</code>实现，我们将通过交互动态创建一个<code>a</code>元素挂载到网页上。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>new File button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newFileBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#new-file'</span><span class="token punctuation">)</span>
newFileBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 创建文件</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'hello-world.json'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

  <span class="token comment">// 下载文件</span>
  <span class="token keyword">const</span> aLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
  aLink<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
  aLink<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aLink<span class="token punctuation">)</span>
  aLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>aLink<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>点击之后，跟上述的功能是一样的，只是“打开文件”的弹窗显示的“来源”将会是”Blob”，因为本身<code>new File</code>就是继承<code>Blob</code>实现的。写到这里，就顺便封装成一个函数吧。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 下载文件</span>
<span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token parameter">fileName<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> isBlob <span class="token operator">=</span> file <span class="token keyword">instanceof</span> <span class="token class-name">Blob</span>
  <span class="token keyword">const</span> href <span class="token operator">=</span> isBlob <span class="token operator">?</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">:</span> file

  <span class="token keyword">const</span> aLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
  aLink<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span>
  aLink<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aLink<span class="token punctuation">)</span>
  aLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>aLink<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="服务端生成文件"><a href="#服务端生成文件" class="headerlink" title="服务端生成文件"></a>服务端生成文件</h2><p>这一章开始会涉及到服务端，将使用<code>express</code>——一个<code>node</code>的<code>web</code>框架搭建一个<code>api</code>服务，拥有<strong>文件上传与下载</strong>的功能，具体实现不会讲得太详细，因为我们的重心还在放在浏览器。</p>
<p>我们先设计一个上传文件的api——<code>POST</code>方法，使用<code>form-data</code>传递参数，这个接口接收文件后保存在服务器。</p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>api 文档</p>
<pre class="line-numbers language-none"><code class="language-none">POT localhot:3000&#x2F;api&#x2F;file&#x2F;upload 文件上传
form-data - &#123; file: &lt;文件&gt; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>接口实现</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ... 省略部分express代码</span>

<span class="token comment">// 配置上传功能</span>
<span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> uploadPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./uploads/'</span><span class="token punctuation">)</span> <span class="token comment">// 上传目录</span>
<span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">dest</span><span class="token operator">:</span> uploadPath<span class="token punctuation">,</span>
  <span class="token literal-property property">storage</span><span class="token operator">:</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">destination</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> uploadPath<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//初始化 uploadPath</span>
fs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> <span class="token parameter">exists</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      e <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>


<span class="token comment">// 上传文件</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/file/upload'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token literal-property property">maxCount</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前端上传实现</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/api/file/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里提供三个文件，作为测试文件依次上传：</p>
<ol>
<li><a href="/download/file/html">html</a> (事实上这个一个html文件，只是文件名为<code>html</code>而已)</li>
<li><a href="/download/file/logo.png">logo.png</a></li>
<li><a href="/download/file/style.css">style.css</a></li>
</ol>
<p><img src="/post/file/image-20210321223537208.png"></p>
<p><code>ls</code>查看上传目录有相应的文件且<code>Length</code>大于0，则表示以上代码能正常运行功能。</p>
<h3 id="下载文件-1"><a href="#下载文件-1" class="headerlink" title="下载文件"></a>下载文件</h3><p>由服务端生成的文件，<code>api</code>可能响应以下三种类型的数据：</p>
<ol>
<li>直接响应文件，供浏览器直接下载</li>
<li>响应文件内容，由浏览器生成匹配的文件格式后方可下载</li>
<li>响应文件路径，由浏览器自行处理（参考1，2）</li>
</ol>
<p>直接响应文件，浏览器可以使用<code>window.open()</code> 或者 <code>&lt;a downlaod href=&quot;&quot;&gt;&lt;/a&gt;</code>直接下载。响应内容稍微比较麻烦，如果是直接响应文件内容（不是base64），浏览器需要转成base64（存在不知道其文件格式转换失败的场景），如果是直接响应base64字符串则可以用<code>URL.createObjectURL</code>处理。响应文件路径一般浏览器直接打开此路径即可下载。</p>
<p>我们还是先设计一个<code>api</code>，让其拥有下载功能，这个api应该接收两个参数，一个是指定的文件，另一个是指定响应的数据类型</p>
<pre class="line-numbers language-none"><code class="language-none">GET &#x2F;api&#x2F;file&#x2F;download
query fileName [String] 文件名称
query type     [String] 数据类型 content - 文件内容、base64-base64、path-文件路径、file-返回文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 下载文件</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/file/download'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> fileName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query

  <span class="token comment">// 是否缺失必填参数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'query type is must need!'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'fileName type is must need!'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'file'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 返回文件</span>
    <span class="token keyword">let</span> fileURL <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>fileURL<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'content'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 返回文件内容</span>
    <span class="token keyword">let</span> fileURL <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
    <span class="token keyword">let</span> fileData <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>fileURL<span class="token punctuation">)</span>
    <span class="token keyword">let</span> bufferData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fileData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> bufferData
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'base64'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 返回base64</span>
    <span class="token keyword">let</span> fileURL <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
    <span class="token keyword">let</span> fileData <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>fileURL<span class="token punctuation">)</span>
    <span class="token keyword">let</span> bufferData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fileData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> base64 <span class="token operator">=</span> <span class="token string">'data:'</span> <span class="token operator">+</span> mineType<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>fileURL<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';base64,'</span> <span class="token operator">+</span> bufferData<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> base64
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 返回路径</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/uploads/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file-name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>download-type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base64<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>base64<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>download-api-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> downloadApiBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#download-api-btn'</span><span class="token punctuation">)</span>
downloadApiBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> fileName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#file-name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
  <span class="token keyword">const</span> type <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#download-type'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value

  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/file/download?fileName=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;type=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'file'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">downloadFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> blob<span class="token punctuation">)</span>
        <span class="token comment">// 也可以使用window.open</span>
        <span class="token comment">// window.open(`/api/file/download?fileName=$&#123;fileName&#125;&amp;type=$&#123;type&#125;`, '_blank')</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">&amp;&amp;</span> json<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> data <span class="token operator">=</span> json<span class="token punctuation">.</span>data
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'content'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token function">downloadFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> blob<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'base64'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">downloadFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'_blank'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其实当这里type为file的时候直接返回文件，是可以不需要发起http请求，直接<code>window.open()</code>就可以的，这里只是为了演示，实际开发中建议返回文件直接<code>window.open()</code> 或者 <code>&lt;a downlaod href=&quot;&quot;&gt;&lt;/a&gt;</code>。</p>
<p>其次<code>/api/file/download?fileName=logo.png&amp;type=content</code> 可以下载图片，不过无法打开。为什么呢，首先这是一张图片，<code>type=content</code>只是返回了图片文件的内容，浏览器接收到了文件的内容，可是并不知道用什么格式去解析，所以这里导致图片下载下来了，然后并不能预览。所以<strong>服务器返回文件内容需要双端约定好文件格式</strong>。然而就算如此，浏览器也需要将起转成<code>Blob</code>或者是其他文件对象再下载下来。</p>
<p>相对于<code>base64</code>字符串，也是要使用<code>URL.createObjectURL</code>将其转成<code>Data URLs</code>，相对来讲<code>base64</code>浏览器就无需关注文件格式了。</p>
<p>最方便处理的莫过于直接响应文件了。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这次我们主要介绍了浏览器和服务器的生成、下载、上传文件，还介绍了浏览器中的<code>&lt;a download=&quot;fileName&quot; href=&quot;content&quot;&gt;</code>，以及 <code>new File</code>，<code>Blob</code>和<code>Data URLs</code>三种方式表达一个文件。前此文还有未提及的<code>Array Buffer</code>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType">XMLHttpRequest.responseType</a>需要我们后续自行了解。</p>
]]></content>
  </entry>
  <entry>
    <title>github中的fork技巧</title>
    <url>//post/fork-skill/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进阶fork技巧，对初学者不是那么友好，建议拥有以下前置技能：</p>
<ol>
<li>使用过github的fork&#x2F;pr操作</li>
<li>熟悉使用git命令的多个分支，多个远端操作</li>
<li>熟练使用git处理合并分支冲突</li>
</ol>
<p>各个大标题内容独立，可根据自己需求跳读:</p>
<ul>
<li>如何将fork类型仓库转成自己的仓库</li>
<li>如何同步多个上游仓库</li>
<li>在fork之前clone上游仓库并commit了，怎么提pr</li>
</ul>
<span id="more"></span>

<h2 id="如何将fork类型仓库转成自己的仓库"><a href="#如何将fork类型仓库转成自己的仓库" class="headerlink" title="如何将fork类型仓库转成自己的仓库"></a>如何将fork类型仓库转成自己的仓库</h2><p>有什么好处？</p>
<ul>
<li>可以将其设置成私有仓库：fork类型的仓库无法设置成私有仓库</li>
<li>不打算提pr到上游仓库，并且想要有github的contributions（俗称：绿点&#x2F;绿墙）：fork类型的仓库，就算提交到了主分支，也不会有contributions.</li>
</ul>
<p><strong>使用github support的分离复刻。</strong></p>
<p><a href="https://support.github.com/request/fork">Forks - GitHub 支持</a></p>
<p><img src="/post/fork-skill/detach_fork.png"></p>
<p><img src="/post/fork-skill/virtual_assistant_1.png"></p>
<p><img src="/post/fork-skill/virtual_assistant_2.png"></p>
<p>自动弹出这个对话框，执行以下操作：</p>
<ul>
<li>选择Detach&#x2F;Extract</li>
<li>输入<code>owner/repository-name</code></li>
<li>选择<code>Yes</code> (committed to this fork) 、选<code>No</code>会让你自己手动复刻一遍</li>
<li>选择<code>I need to use my own GitLFS data allowances and/or data-packs</code></li>
</ul>
<p>等待邮件。</p>
<p>上图我选择了<a href="https://github.com/screw-hand/layui">screw-hand&#x2F;layui</a>，作为例子。<br>其实之前我已经用过一次了，这是<a href="https://github.com/screw-hand/github-profile-trophy">screw-hand&#x2F;github-profile-trophy</a>的邮箱通知：</p>
<p><img src="/post/fork-skill/mail-received.png"><br><img src="/post/fork-skill/mail-done.png"></p>
<p>转成自己的仓库，github官方需要时间去处理， 可以参考一下两封邮箱的相差时间。</p>
<p>刚才选<code>No</code>的结果：</p>
<p><img src="/post/fork-skill/virtual_assistant_no.png"></p>
<h2 id="如何同步多个上游仓库"><a href="#如何同步多个上游仓库" class="headerlink" title="如何同步多个上游仓库"></a>如何同步多个上游仓库</h2><h3 id="一个上游仓库"><a href="#一个上游仓库" class="headerlink" title="一个上游仓库"></a>一个上游仓库</h3><p>来，<a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork">Syncing a fork - GitHub Docs</a>, 这里有教我们fork后的repo，如何与上游的repo保持同步。<br>但是只教我们同步一个，如果我们自己的repo是一个N合1（缝合怪），需要跟多个上游仓库保持同步。就需要再执行一些操作了。</p>
<h3 id="多个上游仓库"><a href="#多个上游仓库" class="headerlink" title="多个上游仓库"></a>多个上游仓库</h3><p>比如我的<a href="https://github.com/screw-hand/github-profile-trophy">screw-hand&#x2F;github-profile-trophy</a>，就有两个上游：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/ryo-ma/github-profile-trophy.git       <span class="token comment"># upstream</span>
https://github.com/lucthienphong1120/github-trophies.git  <span class="token comment"># super-upstream</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>一个叫<code>upstream</code>，一个叫<code>super-upstream</code>，你喜欢叫其他的也行，就跟<code>origin</code>一样，这只是git的远端名称。</p>
<p><em>我的<a href="https://github.com/screw-hand/github-profile-trophy">screw-hand&#x2F;github-profile-trophy</a>经过上文的github support操作，已经不是fork的仓库了。不过以下操作，跟是否为fork类型的仓库无关，你可以假设此仓库还是fork类型的。但是跟commit tree有关，待会我们会遇到的。</em></p>
<p>接下来的操作，你可以直接复制到你的命令行，随便拿我的<a href="https://github.com/screw-hand/github-profile-trophy">screw-hand&#x2F;github-profile-trophy</a>去玩吧。<br>反正你push不了，哈哈。</p>
<p><strong>本质上，同步多个上游仓库是用git命令行去添加多个remote，然后对remote branch进行合并的操作。</strong></p>
<p>以下的命令是同步一个上游仓库，如果你对命令行多个远端操作比较熟悉，可以快速预览甚至跳过。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 我们已经有一个fork仓库，clone到本地</span>
<span class="token function">git</span> clone https://github.com/screw-hand/github-profile-trophy.git
<span class="token builtin class-name">cd</span> github-profile-trophy

<span class="token comment"># 2. 检查远端分支，现在只有一个orgin，指向你自己的仓库（fork仓库）</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># origin	https://github.com/screw-hand/github-profile-trophy.git (fetch)</span>
<span class="token comment"># origin	https://github.com/screw-hand/github-profile-trophy.git (push)</span>

<span class="token comment"># 3. 回到当前分支的第一个commit</span>
<span class="token comment"># 注:为了示例,让下面第7步有输出,特意回退了提交</span>
<span class="token comment">#    实际情况不需要回退,但如果上游仓库没新提交</span>
<span class="token comment">#    将是:`Already up to date.`</span>
<span class="token function">git</span> reset <span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-list --max-parents<span class="token operator">=</span><span class="token number">0</span> HEAD<span class="token variable">)</span></span> <span class="token parameter variable">--hard</span>

<span class="token comment"># HEAD is now at 5a9cbef first commit</span>

<span class="token comment"># 4. 添加多个远端仓库，分别为: upstream, super-upstream</span>
<span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/ryo-ma/github-profile-trophy.git
<span class="token function">git</span> remote <span class="token function">add</span> super-upstream https://github.com/lucthienphong1120/github-trophies.git

<span class="token comment"># 5. 检查远端仓库是否成功设置,将有3个远端仓库</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># origin	https://github.com/screw-hand/github-profile-trophy.git (fetch)</span>
<span class="token comment"># origin	https://github.com/screw-hand/github-profile-trophy.git (push)</span>
<span class="token comment"># super-upstream  https://github.com/lucthienphong1120/github-trophies.git (fetch)</span>
<span class="token comment"># super-upstream  https://github.com/lucthienphong1120/github-trophies.git (push)</span>
<span class="token comment"># upstream        https://github.com/ryo-ma/github-profile-trophy.git (fetch)</span>
<span class="token comment"># upstream        https://github.com/ryo-ma/github-profile-trophy.git (push)</span>

<span class="token comment"># 6. 更新远端仓库的所有信息（分支、标签）</span>
<span class="token function">git</span> fetch <span class="token parameter variable">--all</span>

<span class="token comment"># Fetching origin</span>
<span class="token comment"># Fetching upstream</span>
<span class="token comment"># From https://github.com/ryo-ma/github-profile-trophy</span>
<span class="token comment">#  * [new branch]      VegaDeftwing-master        -> upstream/VegaDeftwing-master</span>
<span class="token comment">#  * [new branch]      juicyfresh                 -> upstream/juicyfresh</span>
<span class="token comment">#  * [new branch]      master                     -> upstream/master</span>
<span class="token comment">#  * [new branch]      pr-125                     -> upstream/pr-125</span>
<span class="token comment">#  * [new branch]      radical                    -> upstream/radical</span>
<span class="token comment">#  * [new branch]      spenserblack-theme/dracula -> upstream/spenserblack-theme/dracula</span>
<span class="token comment"># Fetching super-upstream</span>
<span class="token comment"># From https://github.com/lucthienphong1120/github-trophies</span>
<span class="token comment">#  * [new branch]      main       -> super-upstream/main</span>

<span class="token comment"># 7. 执行远端合并, `git fech --all`，你可以看到remote upstream的默认分支是master</span>
<span class="token comment"># 如果不知道怎么找默认分支，去github repo web找：https://github.com/ryo-ma/github-profile-trophy</span>
<span class="token comment"># github repo web当前的分支就是默认分支</span>
<span class="token function">git</span> merge upstream/master

<span class="token comment"># 省略输出，此刻成功合并`upstream/master`的所有内容，无冲突</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>到这里为止，其实我们的操作跟<a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork#syncing-a-fork-branch-from-the-command-line">Syncing a fork branch from the command line</a>是完全一样的。但我们合并第二个远端分支，问题就来了。</p>
<h3 id="多个上游仓库的特殊处理"><a href="#多个上游仓库的特殊处理" class="headerlink" title="多个上游仓库的特殊处理"></a>多个上游仓库的特殊处理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行第二个远端分支合并，`git merge super-upstream/main`会成功吗？</span>
<span class="token function">git</span> merge super-upstream/main
<span class="token comment"># fatal: refusing to merge unrelated histories</span>
<span class="token comment"># why ??</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为git觉得<code>super-upstream/main</code>跟我们现在的<code>origin/master</code>的分支毫无相干，你可以理解为没有一致的“commit tree”。<br>但是我们为什么可以执行<code>git merge upstream/master</code>呢？因为<code>origin</code>就是fork了<code>upsteam</code>的remote而来的。所以我们刚直接merge是有一定概率毫无冲突的。</p>
<p>通过<a href="https://stackoverflow.com/a/40107973">stackoverflow</a>的帮助，我们继续执行。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull super-upstream main --allow-unrelated-histories
<span class="token comment"># From https://github.com/lucthienphong1120/github-trophies</span>
<span class="token comment">#  * branch            main       -> FETCH_HEAD</span>
<span class="token comment"># hint: You have divergent branches and need to specify how to reconcile them.</span>
<span class="token comment"># hint: You can do so by running one of the following commands sometime before</span>
<span class="token comment"># hint: your next pull:</span>
<span class="token comment"># hint:</span>
<span class="token comment"># hint:   git config pull.rebase false  # merge</span>
<span class="token comment"># hint:   git config pull.rebase true   # rebase</span>
<span class="token comment"># hint:   git config pull.ff only       # fast-forward only</span>
<span class="token comment"># hint:</span>
<span class="token comment"># hint: You can replace "git config" with "git config --global" to set a default</span>
<span class="token comment"># hint: preference for all repositories. You can also pass --rebase, --no-rebase,</span>
<span class="token comment"># hint: or --ff-only on the command line to override the configured default per</span>
<span class="token comment"># hint: invocation.</span>
<span class="token comment"># fatal: Need to specify how to reconcile divergent branches.</span>

<span class="token comment"># 出现这个是因为没有配置git如何处理冲突，建议使用`merge`,不建议配置成全局</span>
<span class="token function">git</span> config pull.rebase <span class="token boolean">false</span>

<span class="token comment"># 再次执行`git pull super-upstream main --allow-unrelated-histories`</span>
<span class="token comment"># 现在是</span>
<span class="token comment"># From https://github.com/lucthienphong1120/github-trophies</span>
<span class="token comment">#  * branch            main       -> FETCH_HEAD</span>
<span class="token comment"># Auto-merging LICENSE</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in LICENSE</span>
<span class="token comment"># Auto-merging README.md</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in README.md</span>
<span class="token comment"># Auto-merging index.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in index.ts</span>
<span class="token comment"># Auto-merging src/card.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/card.ts</span>
<span class="token comment"># Auto-merging src/github_api_client.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/github_api_client.ts</span>
<span class="token comment"># Auto-merging src/theme.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/theme.ts</span>
<span class="token comment"># Auto-merging src/trophy.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/trophy.ts</span>
<span class="token comment"># Auto-merging src/trophy_list.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/trophy_list.ts</span>
<span class="token comment"># Auto-merging src/user_info.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/user_info.ts</span>
<span class="token comment"># Auto-merging src/utils.ts</span>
<span class="token comment"># CONFLICT (add/add): Merge conflict in src/utils.ts</span>
<span class="token comment"># Automatic merge failed; fix conflicts and then commit the result.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>好了，现在已经是合并中的状态了，剩下的就是处理文件冲突了。就像我们平时一样：</p>
<ul>
<li>查看文件改动历史，比较差异</li>
<li>根据自己需要，调整文件</li>
<li>测试代码</li>
<li><code>git add .</code></li>
<li><code>git commit -m XXX</code></li>
<li><code>git push</code></li>
</ul>
<p>为了节约时间，我不处理文件冲突，直接提交到<code>origin/fork-example</code>。<br><strong>因为这是个示范，这些事情我之前做过了，任何时候都不建议将未处理的冲突文件提交！！</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"chore: new branch of fork-exapmle"</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> fork-exapmle
<span class="token function">git</span> push --set-upstream origin fork-exapmle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://github.com/screw-hand/github-profile-trophy/commits/fork-exapmle">commit log - fork-example</a></p>
<h3 id="跟踪多个上游仓库的更新"><a href="#跟踪多个上游仓库的更新" class="headerlink" title="跟踪多个上游仓库的更新"></a>跟踪多个上游仓库的更新</h3><p>至此第一次同步多个上游仓库就结束了。后续如果想继续跟踪远端上游的变动并且合并，也是大概这样的思路。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 获取远端信息，如果有新的变动，此次终端会输出信息</span>
<span class="token function">git</span> fetch <span class="token parameter variable">--all</span>
<span class="token comment"># 2. 合并fork的上游，此时大概率需要解决冲突</span>
<span class="token function">git</span> merget upstream
<span class="token comment"># 3. 合并非fork的上游，仍然需要注意冲突</span>
<span class="token function">git</span> pull super-upstream main --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="记录上游仓库信息"><a href="#记录上游仓库信息" class="headerlink" title="记录上游仓库信息"></a>记录上游仓库信息</h3><p><strong>建议把remote的信息记录在repo的<code>REAME.md</code>!!</strong>  <a href="https://github.com/screw-hand/github-profile-trophy#init-project">README.md - Init Project</a><br>因为现在的仓库已经不是fork类型的，跟上游完全切断了联系，如果不记录的话。<br>后续更换开发设备，或者意外删除本地的git仓库，将会<strong>完全失去与上游的联系！</strong></p>
<h3 id="实例，为什么要同步多个上游仓库"><a href="#实例，为什么要同步多个上游仓库" class="headerlink" title="实例，为什么要同步多个上游仓库"></a>实例，为什么要同步多个上游仓库</h3><p>为什么我的github-profile-trophy需要同步两个上游仓库呢？</p>
<ul>
<li>upsteam 两年内一直在更新</li>
<li>super-upsteam 有upsteam没有的新功能，但是两年没更新了</li>
<li>我也需要对其做一些定制化开发</li>
</ul>
<p>所以将两个上游仓库一起跟踪合并是最好的。</p>
<p>如果对这个<a href="https://github.com/screw-hand/github-profile-trophy">github-profile-trophy</a>感兴趣，你也可以将下面的两个链接添加到你的github profile page，别忘了将<code>screw-hand</code>换成自己的github username。</p>
<pre class="line-numbers language-none"><code class="language-none"># 过滤掉指定等级(UNKNOWN，C)的奖杯
https:&#x2F;&#x2F;github-profile-trophy.screw-hand.vercel.app&#x2F;?username&#x3D;screw-hand&amp;rank&#x3D;-UNKNOWN,-C

# 只展示所有秘密奖杯，并且全部无条件获得
https:&#x2F;&#x2F;github-profile-trophy.screw-hand.vercel.app&#x2F;?username&#x3D;screw-hand&amp;rank&#x3D;SECRET&amp;wantAll&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在fork之前clone上游仓库并commit了，怎么提pr"><a href="#在fork之前clone上游仓库并commit了，怎么提pr" class="headerlink" title="在fork之前clone上游仓库并commit了，怎么提pr"></a>在fork之前clone上游仓库并commit了，怎么提pr</h2><p>可能大多数人都是有了pr的想法，就第一时间fork仓库。我更喜欢clone上游仓库到本地。<br>为什么要先clone上游仓库到本地呢？有时候我们只是想随意看看其他人的代码，跑一跑。<br>然后发现一些地方可以新增功能，修复bug，我们本来没有提pr的意思，现在代码也改了。<br>也不想再去fork之后，再cc cv代码到新的fork repo。<br>当然github也可以在线浏览代码，clone到本地的话，除了看代码，也可以直接把项目先跑起来，改着玩玩。<br>这时候也可以直接修改代码然后commit，只是因为远端的仓库我们没有权限无法push。</p>
<p>还有一种情况是： 如果一开始就是冲着提pr，先fork了，改不动代码了，这时候除了删本地的文件夹，还需要在删掉github的fork仓库。</p>
<p>比如我们想给<a href="https://github.com/haozi/New-Bing-Anywhere">haozi&#x2F;New-Bing-Anywhere</a>提一个pr。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. clone上游仓库到本地</span>
<span class="token function">git</span> clone https://github.com/haozi/New-Bing-Anywhere.git
<span class="token builtin class-name">cd</span> New-Bing-Anywhere

<span class="token comment"># 2. 浏览代码 / 启动项目 / 更改代码 / commit</span>
<span class="token function">touch</span> pr-file
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"feat: pr-file"</span>

<span class="token comment"># 3. 直接push</span>
<span class="token function">git</span> push
<span class="token comment"># 因为没有仓库的权限，无法直接push到haozi/New-Bing-Anywhere</span>
<span class="token comment"># fatal: Authentication failed for 'https://github.com/haozi/New-Bing-Anywhere.git/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个时候，我们再来fork也不迟，所以我们先到github执行fork操作，得到<a href="https://github.com/screw-hand/New-Bing-Anywhere">screw-hand&#x2F;New-Bing-Anywhere</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 查看远端</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>
<span class="token comment"># origin	https://github.com/haozi/New-Bing-Anywhere.git (fetch)</span>
<span class="token comment"># origin	https://github.com/haozi/New-Bing-Anywhere.git (push)</span>

<span class="token comment"># 2. 将origin换成upstream</span>
<span class="token function">git</span> remote <span class="token function">rename</span> origin upstream

<span class="token comment"># 3. 添加fork后的remote为origin</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/screw-hand/New-Bing-Anywhere.git

<span class="token comment"># 4.检查远端</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>
<span class="token comment"># origin	https://github.com/screw-hand/New-Bing-Anywhere.git (fetch)</span>
<span class="token comment"># origin	https://github.com/screw-hand/New-Bing-Anywhere.git (push)</span>
<span class="token comment"># upstream	https://github.com/haozi/New-Bing-Anywhere.git (fetch)</span>
<span class="token comment"># upstream	https://github.com/haozi/New-Bing-Anywhere.git (push)</span>

<span class="token comment"># 5. 获取远端分支</span>
<span class="token function">git</span> fetch <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来pr的常规流程：</p>
<ul>
<li>切分支</li>
<li>commit</li>
<li>push</li>
<li>pr</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 检出新分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> pr-example

<span class="token comment"># 2. 推送到指定分支</span>
<span class="token function">git</span> push --set-upstream origin pr-example

<span class="token comment"># 3. 删除之前commit的main分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> main

<span class="token comment"># 4. 恢复main分支到未commit的状态</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> main origin/main
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://github.com/screw-hand/New-Bing-Anywhere/commits/pr-example">pr-example</a></p>
<p>这一顿操作下来，会比第一时间fork更麻烦，可以当做没fork之后的补救措施吧。</p>
<h2 id="clone上游仓库后，创建自己的repo"><a href="#clone上游仓库后，创建自己的repo" class="headerlink" title="clone上游仓库后，创建自己的repo"></a>clone上游仓库后，创建自己的repo</h2><p>这是一种比<br><a href="#%E5%A6%82%E4%BD%95%E5%B0%86fork%E7%B1%BB%E5%9E%8B%E4%BB%93%E5%BA%93%E8%BD%AC%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93">如何将fork类型仓库转成自己的仓库</a>、<a href="#%E5%9C%A8fork%E4%B9%8B%E5%89%8Dclone%E4%B8%8A%E6%B8%B8%E4%BB%93%E5%BA%93%E5%B9%B6commit%E4%BA%86%EF%BC%8C%E6%80%8E%E4%B9%88%E6%8F%90pr">#fork之前clone上游仓库并commit了，怎么提pr</a>更简单的操作方式，效果是一样的。</p>
<p>先clone想要的<a href="https://github.com/snyk-snippets/modern-npm-package],%E7%84%B6%E5%90%8E%E5%9C%A8github[%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%B0repo](https://github.com/new">上游仓库</a>。<br>我觉得用<a href="https://cli.github.com/">GitHub CLI</a>速度更快更方便，以下实例我用会GitHub CLI，跟在github web上操作是等效的。</p>
<p>以下origin的github username，你需要换成自己的。</p>
<ol>
<li>设计我们的远端仓库</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;snyk-snippets&#x2F;modern-npm-package.git # upsteam
https:&#x2F;&#x2F;github.com&#x2F;screw-hand&#x2F;modern-npm-package.git # origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>clone上游仓库</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/snyk-snippets/modern-npm-package.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li><p>*此刻你<strong>或许</strong>会在这里提交代码，但是你无法推送到别人的远端(snyk-snippets&#x2F;modern-npm-package)</p>
</li>
<li><p>更名远端仓库origin(snyk-snippets&#x2F;modern-npm-package)为upsteam(snyk-snippets&#x2F;modern-npm-package)</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
<span class="token comment"># origin https://github.com/snyk-snippets/modern-npm-package.git (fetch)</span>
<span class="token comment"># origin https://github.com/snyk-snippets/modern-npm-package.git (push)</span>

<span class="token function">git</span> remote <span class="token function">rename</span> origin upsteam

<span class="token function">git</span> remote <span class="token parameter variable">-v</span>
<span class="token comment"># upsteam	https://github.com/snyk-snippets/modern-npm-package.git (fetch)</span>
<span class="token comment"># upsteam	https://github.com/snyk-snippets/modern-npm-package.git (push)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>使用<a href="https://cli.github.com/">GitHub CLI</a>创建一个新repo</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gh repo new

? What would you like to do? Push an existing <span class="token builtin class-name">local</span> repository to GitHub
? Path to <span class="token builtin class-name">local</span> repository <span class="token builtin class-name">.</span>
? Repository name modern-npm-package
? Description fork from <span class="token punctuation">[</span>snyk-snippets/modern-npm-package<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/snyk-snippets/modern-npm-package<span class="token punctuation">)</span>
? Visibility Public
✓ Created repository screw-hand/modern-npm-package on GitHub
? Add a remote? Yes
? What should the new remote be called? origin
✓ Added remote git@github.com:screw-hand/modern-npm-package.git
? Would you like to push commits from the current branch to <span class="token string">"origin"</span>? Yes
Enumerating objects: <span class="token number">77</span>, done.
Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">77</span>/77<span class="token punctuation">)</span>, done.
Delta compression using up to <span class="token number">8</span> threads
Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">40</span>/40<span class="token punctuation">)</span>, done.
Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">77</span>/77<span class="token punctuation">)</span>, <span class="token number">117.86</span> KiB <span class="token operator">|</span> <span class="token number">458.00</span> KiB/s, done.
Total <span class="token number">77</span> <span class="token punctuation">(</span>delta <span class="token number">33</span><span class="token punctuation">)</span>, reused <span class="token number">67</span> <span class="token punctuation">(</span>delta <span class="token number">27</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>
remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">33</span>/33<span class="token punctuation">)</span>, done.
To github.com:screw-hand/modern-npm-package.git
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      HEAD -<span class="token operator">></span> main
branch <span class="token string">'main'</span> <span class="token builtin class-name">set</span> up to track <span class="token string">'origin/main'</span><span class="token builtin class-name">.</span>
✓ Pushed commits to git@github.com:screw-hand/modern-npm-package.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>操作很简单，第一次选项选择<code>Push an existing local repository to GitHub</code>，一路回车即可。<br><code>Description</code>看你，复制upsteam的也行，我这里自己写了。<br>其他选项是关于仓库的可见性、是否添加远端、添加远端后是否要push。</p>
<p>跟在github web的操作其实是一样的，只是<code>GitHub CLI</code>的引导选项很方便。</p>
<ol start="6">
<li>再次检查远端仓库</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
origin	git@github.com:screw-hand/modern-npm-package.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin	git@github.com:screw-hand/modern-npm-package.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
upsteam	https://github.com/snyk-snippets/modern-npm-package.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
upsteam	https://github.com/snyk-snippets/modern-npm-package.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>查看github web</li>
</ol>
<p><a href="https://github.com/screw-hand/modern-npm-package">https://github.com/screw-hand/modern-npm-package</a></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>为什么有时候提交了没contributions&#x2F;绿点&#x2F;绿墙： <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-settings-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile">Why are my contributions not showing up on my profile? - GitHub Docs</a></p>
<p>…</p>
]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git笔记</title>
    <url>//post/git-note/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>部分重要概念。</p>
<ul>
<li>HEAD</li>
<li>Working Directory &#x2F; Repository &#x2F; Stage</li>
<li>branch</li>
<li>remote</li>
<li>tag</li>
<li>repo</li>
</ul>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>打开Git Bash，配置用户名字和邮件地址</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span>

$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>本机创建SSH，Github配置SSH</li>
</ol>
<p>一路回车</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>win+r</code>输入<code>%USERPROFILE%/.ssh</code>,成功打开且有以下文件则成功.</p>
<ol>
<li>id_ras：私钥，不能泄露</li>
<li>id_ras.pub：公钥，可以告诉任何人</li>
</ol>
<p><strong>以下操作需要Github账号，若无需注册。</strong></p>
<p>添加SSH密钥 <a href="https://github.com/settings/keys/new">传送门</a></p>
<p><img src="/post/git-note/github-new-ssh.png" alt="github-new-ssh.png"></p>
<ol start="3">
<li>测试配置</li>
</ol>
<ul>
<li>Github新建仓库，初始化</li>
<li>本地clone下来，修改后提交，查看提交者信息是否正确</li>
<li>推送至远端仓库，输入密码</li>
<li>再次修改后提交，若SHH配置成功，无须输入密码</li>
</ul>
<p>操作省略..</p>
<h2 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h2><table>
<thead>
<tr>
<th>简写</th>
<th>英文</th>
<th align="center">翻译</th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>modified</td>
<td align="center">修改</td>
</tr>
<tr>
<td>R</td>
<td>renamed</td>
<td align="center">重命名</td>
</tr>
<tr>
<td>C</td>
<td>both modified</td>
<td align="center">冲突</td>
</tr>
<tr>
<td>R</td>
<td>Untracked</td>
<td align="center">未跟踪</td>
</tr>
</tbody></table>
<h2 id="命令分析"><a href="#命令分析" class="headerlink" title="命令分析"></a>命令分析</h2><p>一些常用的命令分析，我很喜欢命令行，不过<a href="https://www.sourcetreeapp.com/">source tree</a>也挺方便的。</p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h3><p><strong>输出信息</strong></p>
<ul>
<li>当前分支</li>
<li>远端分支状态（是否拉取&#x2F;更新）</li>
<li>暂存区</li>
<li>工作区</li>
</ul>
<p><strong>实例分析</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">On branch master
Your branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">1</span> commit.
  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>

Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>

        modified:   src/main.js

Changes not staged <span class="token keyword">for</span> commit:
  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>

        modified:   src/components/person-filed/index.vue
        modified:   src/router.js
        modified:   src/views/loop-action/index.vue

<span class="token comment"># ===== 翻译分割线 =====</span>

位于master分支
您的分支超前“origin / master”一次提交。
   （使用“git push”发布您的本地提交）

要提交的更改：
   （使用“git reset HEAD <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token punctuation">..</span>.”取消暂存）

         修改：src / main.js

未提交更改的更改：
   （使用“git <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token punctuation">..</span>.”来更新将要提交的内容）
   （使用“git checkout  -  <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token punctuation">..</span>.”来丢弃工作目录中的更改）

         修改：src / components / person-filed / index.vue
         修改：src / router.js
         修改：src / views / loop-action / index.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h3><p><strong>输出信息</strong></p>
<ul>
<li>提交分支</li>
<li>commit hash值</li>
<li>修改文件数量</li>
<li>增删行数</li>
</ul>
<p><strong>实例分析</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>master 2918d65<span class="token punctuation">]</span> <span class="token number">1</span>
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>

<span class="token comment"># ===== 翻译分割线 =====</span>

 <span class="token punctuation">[</span>master 2918d65<span class="token punctuation">]</span> <span class="token number">1</span>
  <span class="token number">1</span>个文件已更改，1行插入（+）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><code>git checkout</code></h3><p>自修改后还没有被放到暂存区–回到版本库的状态；<br>已经添加到暂存区后，又作了修改–就回到添加到暂存区后的状态。</p>
<p>git checkout其实是用版本库里的版本替换工作区的版本，<br>无论工作区是修改还是删除，都可以“一键还原”。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>个人常用命令，整理到一块，以后忘记了就直接复制，省事也方便。</p>
<h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 克隆仓库</span>
$ <span class="token function">git</span> clone <span class="token operator">&lt;</span>remote_repo<span class="token operator">></span>

<span class="token comment"># 克隆仓库到指定path（path推荐相对目录）</span>
$ <span class="token function">git</span> clone <span class="token operator">&lt;</span>remote_repo<span class="token operator">></span> -- <span class="token operator">&lt;</span>path<span class="token operator">></span>

<span class="token comment"># 克隆仓库指定分支</span>
$ <span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch<span class="token operator">></span> <span class="token operator">&lt;</span>remote_repo<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="工作区暂存区文件管理"><a href="#工作区暂存区文件管理" class="headerlink" title="工作区暂存区文件管理"></a>工作区暂存区文件管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># `git restore` v2.23.0 支持</span>

<span class="token comment"># 清除工作区指定路径(&lt;path>)下的所有文件修改（重置文件） / 重置未暂存的文件</span>
$ <span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>path<span class="token operator">></span>
<span class="token comment"># or</span>
$ <span class="token function">git</span> restore -- <span class="token operator">&lt;</span>path<span class="token operator">></span>


<span class="token comment"># 清空暂存区指定路径(&lt;path>)文件（不重置修改）/ 取消已暂存文件</span>
$ <span class="token function">git</span> reset -- <span class="token operator">&lt;</span>path<span class="token operator">></span>
<span class="token comment"># or</span>
$ <span class="token function">git</span> restore <span class="token parameter variable">--staged</span> -- <span class="token operator">&lt;</span>path<span class="token operator">></span>

<span class="token comment"># 清空工作和暂存区的所有更改（重置本次提交，不会处理untracked files）</span>
$ <span class="token function">git</span> reset HEAD <span class="token parameter variable">--hard</span>

<span class="token comment"># 删除 untracked files(-f) 包括目录(-d)</span>
$ <span class="token function">git</span> clean <span class="token parameter variable">-fd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="比对文件"><a href="#比对文件" class="headerlink" title="比对文件"></a>比对文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比较暂存区和工作区的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span>

<span class="token comment"># 比较暂存区和工作区和的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span> --

<span class="token comment">#比较上一次提交和工作区和的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span> HEAD --

<span class="token comment"># 比对指定路径（&lt;path>）文件和暂存区的区别</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>commit<span class="token operator">></span> -- <span class="token operator">&lt;</span>path<span class="token operator">></span>

<span class="token comment"># 比对已经暂存起来的文件(staged)和上次提交时的快照之间(HEAD)的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--staged</span>

<span class="token comment"># 比对指定路径（&lt;path>）两次提交</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>old_hash<span class="token operator">></span> <span class="token operator">&lt;</span>new_hash<span class="token operator">></span> -- <span class="token operator">&lt;</span>path<span class="token operator">></span>

<span class="token comment"># 比对指定路径（&lt;path>）旧提交与已暂存的变动(未暂存的变动将忽略）</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>old_hash<span class="token operator">></span> <span class="token parameter variable">--staged</span> -- <span class="token operator">&lt;</span>path<span class="token operator">></span>

<span class="token comment"># 比对指定路径（&lt;path>）旧提交与当前工作区的变动（包括已暂存未暂存）</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>old_hash<span class="token operator">></span> -- <span class="token operator">&lt;</span>path<span class="token operator">></span>

<span class="token comment"># 比对行改动，不显示具体内容</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--stat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全部暂存并提交</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">"commit log"</span>

<span class="token comment"># 多行插入空行提交</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'1.line-1'</span> - m <span class="token string">'2.line-2'</span>

<span class="token comment"># 多行提交</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'
1. line-1
2. line-2
'</span>

<span class="token comment"># 修改上一次提交信息</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token string">"New commit message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="工作日志"><a href="#工作日志" class="headerlink" title="工作日志"></a>工作日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 简化工作日志</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline

<span class="token comment"># 查看分支合并情况</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span>

<span class="token comment"># 查看分支合并情况，简化提交信息、hash简写</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit

<span class="token comment"># 美化输出、查看分支合并情况、简化提交信息、hash简写</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--color</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset'</span>  <span class="token parameter variable">--graph</span>  --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本地分支</span>
$ <span class="token function">git</span> branch

<span class="token comment"># 查看本地分支简单信息（分支名 最后一次commit id， commit message）</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-v</span>

<span class="token comment"># 查看所有分支信息（本地还有远端)</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-a</span>

<span class="token comment"># 查看本地跟踪远端分支情况</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-vv</span>

<span class="token comment"># 组合使用 -vv -v -a</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-vv</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-a</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-vvav</span>

<span class="token comment"># 重命令分支</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>old_name<span class="token operator">></span> <span class="token operator">&lt;</span>new_name<span class="token operator">></span>

<span class="token comment"># 切换分支</span>
$ <span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch<span class="token operator">></span>

<span class="token comment"># 指定提交检出新分支</span>
$ <span class="token function">git</span> checkout <span class="token operator">&lt;</span>hash<span class="token operator">></span> <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>

<span class="token comment"># 拉取远端分支到本地新分支，并自动切换到此分支</span>
$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>new_branch<span class="token operator">></span> <span class="token operator">&lt;</span>remote<span class="token operator">></span>/<span class="token operator">&lt;</span>branch<span class="token operator">></span>

<span class="token comment"># 拉取远端分支到本地新分支</span>
$ <span class="token function">git</span> branch <span class="token operator">&lt;</span>new_branch<span class="token operator">></span> <span class="token operator">&lt;</span>remote<span class="token operator">></span>/<span class="token operator">&lt;</span>branch<span class="token operator">></span>

<span class="token comment"># 合并分支</span>
$ <span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="远端"><a href="#远端" class="headerlink" title="远端"></a>远端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 远端版本信息</span>
$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># 添加git远端仓库</span>
$ <span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span>

<span class="token comment"># 更改远端地址</span>
$ <span class="token function">git</span> remote set-url <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>new_url<span class="token operator">></span>

<span class="token comment"># 拉取远端分支提交</span>
$ <span class="token function">git</span> pull origin master

<span class="token comment"># 推送远端分支提交</span>
$ <span class="token function">git</span> push origin master

<span class="token comment"># 拉取远端分支到本地新分支</span>
$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>new_branch<span class="token operator">></span> <span class="token operator">&lt;</span>remote<span class="token operator">></span>/<span class="token operator">&lt;</span>branch<span class="token operator">></span>

<span class="token comment"># 删除远端分支</span>
$ <span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="贮藏"><a href="#贮藏" class="headerlink" title="贮藏"></a>贮藏</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 快速贮藏</span>
<span class="token function">git</span> stash

<span class="token comment"># 指定信息贮藏</span>
<span class="token function">git</span> stash <span class="token string">"..."</span>

<span class="token comment"># 查看贮藏列表</span>
<span class="token function">git</span> stash list

<span class="token comment"># 查看指定贮藏改动（文件，行改动）</span>
<span class="token function">git</span> stash show <span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token comment"># 查看指定贮藏改动（文件具体内容）</span>
<span class="token function">git</span> stash show <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token comment"># 应用并删除贮藏（不太建议使用）</span>
<span class="token function">git</span> stash pop <span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token comment"># 应用贮藏</span>
<span class="token function">git</span> stash apply <span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token comment"># 删除贮藏</span>
<span class="token function">git</span> stash drop <span class="token punctuation">[</span>index<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看全局配置列表</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span>

<span class="token comment"># 查看本地仓库配置列表</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--local</span> <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令历史</span>
$ <span class="token function">git</span> reflog

<span class="token comment"># 变基</span>
$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="skill"><a href="#skill" class="headerlink" title="skill"></a>skill</h2><p>一些简简单单的小技巧。</p>
<h3 id="忽略文件-x2F-目录"><a href="#忽略文件-x2F-目录" class="headerlink" title="忽略文件&#x2F;目录"></a>忽略文件&#x2F;目录</h3><p>根目录创建.gitignore文件。</p>
<p>windows系统需使用命令行创建，打开cmd，定位。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token builtin class-name">type</span> nul <span class="token operator">></span> .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>.gitignore文件添加需要忽略的文件&#x2F;目录即可。</p>
<p>一般不需要自己编辑，github官方也提供了不同语言的.gitignore <a href="https://github.com/github/gitignore">传送门</a></p>
<h3 id="提交空目录"><a href="#提交空目录" class="headerlink" title="提交空目录"></a>提交空目录</h3><p>创建 .gitkeep 文件，内容如下</p>
<pre class="line-numbers language-none"><code class="language-none"># Ignore everything in this directory
*
# Except this file !.gitkeep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>GIt 支持为命令自定义别名，比如我们希望<strong>全局设置</strong> <code>git br</code> 映射为 <code>git branch</code>，<strong>仓库设置</strong> <code>git st</code> 映射为 <code>git status</code>，我们可以在终端这样配置。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置别名</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.br branch
<span class="token function">git</span> config <span class="token parameter variable">--local</span> alias.st status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>现在就可以使用<code>git br</code> 、<code>git st</code>了，不过<code>git st</code>是<strong>仓库级别</strong>的设置，切换到其他仓库就无效了。我不需要省敲几个键，这样子的映射对我无效，我需要映射的是一些很长难输入又实用的命令。我们先删除它，再配置我自己偏好的别名。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除别名</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> alias.br
<span class="token function">git</span> config <span class="token parameter variable">--local</span> <span class="token parameter variable">--unset</span> alias.st<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们本地还有全部的别名都被删除了，当然你也可以直接修改配置文件，但是不推荐。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.logs <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.detail-log <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在<code>git logs</code> 还有<code>git detail-log</code>都可以输出漂亮的git日志 :-)</p>
<h2 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h2><p><img src="/post/git-note/git-guide.jpg" alt="git-guide.jpg"></p>
<!--
- [Git log 高级用法](https://www.cnblogs.com/zhangjianbin/p/7778625.html)
- [Git config 配置](https://www.cnblogs.com/fireporsche/p/9359130.html)
- [Git diff](https://www.cnblogs.com/qianqiannian/p/6010219.html)
- [Git使用中的一些奇技淫巧](https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194157&idx=2&sn=dca9f9c61f064f508c3c17824e0c6b13&chksm=8c99f577bbee7c61d5eb51d26f007f724197435b80006b05e17381d0a11eb7b5347b58a92a05&mpshare=1)
-->
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>你的理想生活</title>
    <url>//post/hope/</url>
    <content><![CDATA[<p>很多时候我都很好奇别人想法，比如朋友的理想生活到底是怎样的。所以给最珍贵的朋友做了一次人间采访，我想知道，脱离了现实的客观条件，朋友们希望过上一种什么样的生活。</p>
<p>以下回答来自不同的朋友，不同的时间，或者想法会进化或者放弃。但是仍然希望，所有人都记得有某一个人，曾经有这么一个理想过。</p>
<p>因为说出自己的真实想法太过羞耻，很多人并不一定喜欢自我暴露，所有的回答都是采用匿名机制，只保留日期，如果找不到自己的回答，那也说明这个理想生活也不属于你了。</p>
<p>或许某一天，当你迷失了方向，会重新回来这里，寻找你最初的想法。</p>
<p><strong>“你的理想生活是什么，无视所有客观条件?”</strong></p>
<span id="more"></span>

<h1 id="采访结果"><a href="#采访结果" class="headerlink" title="采访结果"></a>采访结果</h1><p>脚踩天下高富帅<br>坐拥天下白富美</p>
<p>—— 2021&#x2F;08&#x2F;30</p>
<hr>
<p>住豪宅 喝名酒 抽雪茄 —— 2020&#x2F;08&#x2F;30</p>
<hr>
<p>弹琴，练字，读书，打游戏，看电视，偶尔带老婆和家里狗子去附近旅游 —— 2022&#x2F;06&#x2F;29</p>
<hr>
<p>我这半年如果不用考虑还得找工作</p>
<p>就挺理想</p>
<p>睡到自然醒，喜欢干啥干啥</p>
<p>一个长期爱好加若干短期三分钟爱好，加一个健康的身体，核心是充足的时间</p>
<p>结不了婚</p>
<p>在某个方面一眼看的到头对我来说就是灾难</p>
<p>生活态度比较重要</p>
<p>等我xx了我就xxx那多半xxx是只存在脑子里的</p>
<p>—— 2022&#x2F;08&#x2F;09</p>
<hr>
<p>我想了想，我的理想生活都和收入，金钱相关</p>
<p>我或者我的家人收入自由[皱眉][皱眉][皱眉]，我不会为这个去焦虑和努力<br>自己的收入工作或者事业和美业相关<br>穿着我喜欢的衣服，不会考虑工作外在因素合不合适<br>过一段时间可以随意的去任何城市玩几天<br>日常学学舞蹈和乐器<br>有自己的房产[皱眉]</p>
<p>想想就很开心</p>
<p>[破涕为笑][破涕为笑][破涕为笑][破涕为笑]</p>
<p>—— 2022&#x2F;08&#x2F;09</p>
<hr>
<p>世外桃源 —— 2022&#x2F;08&#x2F;12</p>
<hr>
<p>做一块石头 —— 2020&#x2F;08&#x2F;16</p>
<hr>
<p>你上回是不是问过我理想生活什么样<br>我现在觉得<br>等以后有钱<br>买一块地，建个高层，我觉得萧敬腾那种高层挺好<br>就是好像里面什么都有<br>好健身房游泳馆停车场电影院摆手办收藏的<br>什么什么的<br>5530再修个停机坪买个直升机<br>我在抖音看<br>感觉直升机很好开😂</p>
<p>—— 2022&#x2F;08&#x2F;17</p>
<hr>
<p>不用工作又有花不完的钱 —— 2020&#x2F;08&#x2F;20</p>
<hr>
<p>我最近小愿望就是希望顺利拿驾照。并且能提升做饭水平<br>其他目前就没啥哈哈计划下周和小姐妹杭州一日游去看看自己梦中情机—徕卡<br>顺带吃一下点都德<br>满足一下欲望</p>
<p>—— 2020&#x2F;08&#x2F;20</p>
<hr>
<p>没有理想的人不伤心 —— 2020&#x2F;08&#x2F;20</p>
<hr>
<p>吃好喝好有钱<br>我爱的和爱我的都要身体健康，开心快乐<br>没了吧<br>哈哈哈哈哈哈哈哈哈<br>没什么多大的抱负<br>哈哈哈哈哈哈哈</p>
<p>—— 2020&#x2F;08&#x2F;20</p>
<hr>
<p>过上我做的梦里的生活<br>花不完的钱数不完的美男，天天有麻将打<br>庸俗得很<br>没有用的呐<br>就是说等我过上了这种生活我又会有其他理想的生活<br>我回答的只是现阶段的</p>
<p>—— 2020&#x2F;08&#x2F;20</p>
<hr>
<p>说简单也简单，说难也难。能吃想吃的东西，能去想去的地方。经济基础能支撑自己并不太多的欲望就好</p>
<p>—— 2020&#x2F;08&#x2F;24</p>
<hr>
<p>能做自己觉得有意义的事就行了吧，能让你觉得真正开心的事啊。</p>
<p>—— 2020&#x2F;10&#x2F;26</p>
<hr>
<h1 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h1><p>因为我们都在路上，所以我能肯定这个答案后续还有很多补充，希望给出答案的你们，能提醒我，该添加新的采访结果了。</p>
<p>当然也有些朋友回避&#x2F;拒绝回答了这个采访，其实我觉得无所谓，并不介意，毕竟自我暴露真实想法，本来就是需要一点勇气。<br>或许我没有得到你们的答案，但是你们心里给了自己的答案。</p>
<p>当然如果我都有一个共同朋友，你通过自己对他的了解，觉得这个答案是他的，也没必要找他对质，保留给对方一点隐私。</p>
<p>我们都没资格嘲笑别人的想法。</p>
<p>枯燥乏味的生活，有时候需要一点想象力，希望我们都能在生活找到一些乐趣，这也是这篇文章存在的意义。</p>
<p><strong>最后，祝大家都能过自己的理想生活！！</strong></p>
]]></content>
      <tags>
        <tag>人间采访</tag>
      </tags>
  </entry>
  <entry>
    <title>从HTTP到互联网协议，浏览器与服务器之间不得不说的故事</title>
    <url>//post/http/</url>
    <content><![CDATA[<blockquote>
<p>浏览器与服务器之间美好约定</p>
</blockquote>
<h2 id="过桥米线的传说"><a href="#过桥米线的传说" class="headerlink" title="过桥米线的传说"></a>过桥米线的传说</h2><p>相传，清朝时滇南蒙自市城外有一湖心小岛，一个秀才到岛上读书，秀才贤慧勤劳的娘子常常弄了他爱吃的米线送去给他当饭，但等出门到了岛上时，米线已不热了。<br>后来一次偶然送鸡汤的时候，秀才娘子发现鸡汤上覆盖着厚厚的那层鸡油有如锅盖一样，可以让汤保持温度，如果把佐料和米线等吃时再放，还能更加爽口。<br>于是她先把肥鸡、筒子骨等熟好清汤，上覆厚厚鸡油;米线在家烫好，而不少配料切得薄薄的到岛上后用滚油烫熟，之后加入米线，鲜香滑爽。<br>此法一经传开，人们纷纷仿效，因为到岛上要过一座桥，也为纪念这位贤妻，后世就把它叫做”过桥米线”。</p>
<span id="more"></span>

<p>好的，故事就这里。</p>
<h2 id="HTTP-协议？"><a href="#HTTP-协议？" class="headerlink" title="HTTP..协议？"></a>HTTP..协议？</h2><p>首先我们先来简单了解下什么是HTTP协议。</p>
<p>浏览器，大家都不陌生。<br>地址栏输入一个网址，对应的网页就会跳出来，那么，这个网页是怎么来的呢？<br>是浏览器自己弄出来的吗？显然不是，网站的所有资源都源于服务器；<br>浏览器只是拿到服务器的资源，“翻译”一下给呈现给用户。<br>那么，浏览器是通过什么方式告诉服务器我需要这个网页，而服务器又怎么知道浏览器需要的是哪个页面？<br>浏览器与服务器的交互有很多种，最常见的一种是HTTP请求，即—–HTTP协议。</p>
<p>HTTP协议约定了两者之间的沟通方式，才不会牛头马嘴。<br>协议由<strong>请求（requset）</strong>与<strong>响应（reponse）</strong>触发。</p>
<blockquote>
<p>HTTP是因特网上一种常见的数据传输协议</p>
</blockquote>
<p><em>服务器：说起来你可能不信，是它先动手的！</em></p>
<h3 id="事务，URL，报文"><a href="#事务，URL，报文" class="headerlink" title="事务，URL，报文"></a>事务，URL，报文</h3><p>接下来我们来了解下HTTP协议的体现过程。</p>
<p>浏览器的地址栏输入网址，将会发送一个HTTP请求；<br>服务器收到浏览器的请求，响应数据给浏览器；<br>浏览器解析资源渲染到界面。<br>这种通信方式使用<strong>HTTP报文</strong>的格式化数据块进行。<br>至此，一条完整的请求和响应命令，整个过程称之为<strong>HTTP事务</strong>。</p>
<p>浏览器凭借着URL，准确地请求资源，服务器响应并传输回数据。<br>每个web服务器资源都有一个名字——统一资源标识符（url）。<br>有了这个名字，浏览器才能找到对应的资源，url有特定的标准格式。<br>一个url分为3个部分：<br>协议代码，装由所需文件的计算机地址和主机资源的具体位置。<br><code>scheme://host[:post]/path/filename</code></p>
<ul>
<li>scheme - 协议名称</li>
<li>host - IP地址或计算机名称</li>
<li>post - 服务器端口</li>
<li>path - 文件路径</li>
<li>filename - 文件名</li>
</ul>
<p>例：<code>http://www.4399.com/</code></p>
<p>PS：我们说的“网址”、“域名”都属于url的范畴。</p>
<p>以HTTP的角度讲，<br>浏览器（Browser）是客户端（Client），<br>服务器（Server）是服务端（Server）；<br>也就是说浏览器和服务器模式是B&#x2F;S结构，<br>即：Browser&#x2F;Server(浏览器&#x2F;服务器)结构。</p>
<p>客户端发送请求报文，服务器回复响应报文；<br>请求报文和响应报文的格式都由以下三个部分组成</p>
<ul>
<li>起始行：由方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔</li>
<li>首部字段：由关键字&#x2F;值对组成，每行一对，关键字和值用英文冒号“:”分隔，关于请求&#x2F;响应的信息</li>
<li>主体：要发送给服务器的请求数据，或是服务器回复的响应数据</li>
</ul>
<p><img src="/post/http/image1.jpg" alt="d7c0e5cfe6eb9ced302d14b50422caaf.png"></p>
<p><em>一个简单的HTTP实例 图源于《HTTP权威指南》</em></p>
<h4 id="详解请求报文和响应报文"><a href="#详解请求报文和响应报文" class="headerlink" title="详解请求报文和响应报文"></a>详解请求报文和响应报文</h4><p>请求报文和响应报文的差异不大，可以对比了解。</p>
<table>
<thead>
<tr>
<th></th>
<th>请求报文</th>
<th>响应报文</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>起始行</td>
<td>请求行：请求url、HTTP版本、请求方法</td>
<td>响应行：HTTP版本，状态码， 状态码短语</td>
<td>用空格分隔</td>
</tr>
<tr>
<td>首部字段</td>
<td>请求头：数量不定，关于客户端的请求信息</td>
<td>请求行：关于服务器的响应信息</td>
<td>特定的分类用于请求头或用于响应头</td>
</tr>
<tr>
<td>主体</td>
<td>请求主体：一般是POST方法的请求数据</td>
<td>响应主体：HTTP响应请求的真正数据</td>
<td>HTTP所传输的内容</td>
</tr>
</tbody></table>
<h4 id="方法与状态码"><a href="#方法与状态码" class="headerlink" title="方法与状态码"></a>方法与状态码</h4><p>即使是同一个url，如果使用了其他的请求方法，服务器没有为url设置相对应的响应方法，那浏览器也不会拿到正确的资源，可能会出现的是几个数字（状态吗）和一句短语（原因短语）；</p>
<p><img src="/post/http/image2.jpg"></p>
<p><em><a href="https://screw-hand.com/_">https://screw-hand.com/_</a> 404代表了什么？</em></p>
<p>因此最后小节我们有必要学习HTTP的请求方法和状态码。</p>
<p>根据HTTP标准，HTTP请求定义了多种请求方法，在不同场景下执行不同的动作，常见的有…<br><code>GET</code>：向服务器请求资源（最常用的HTTP方法）<br><code>POST</code>：输入数据（一般用于用户登录，付款等）<br><code>PUT</code>：写入文档（更新数据，发表文章，评论等）<br><code>DELETE</code>：删除请求资源（删除资源，但服务器不一定会删除）</p>
<p>为了便于理解，我们拿两个使用频率最高的方法比较一下。</p>
<p><strong>GET与POST的区别</strong></p>
<ul>
<li>便利：浏览器后退对GET请求无影响，浏览器<strong>主动缓存GET请求</strong>，而<strong>POST不缓存</strong>且后退历史再次提交请求</li>
<li>参数：GET请求参数记录在<strong>原url后</strong>且有<strong>长度限制</strong>，而POST中的参数记录在<strong>请求主体</strong>中</li>
<li>安全：GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递<strong>敏感信息</strong></li>
<li>编码：GET请求只能进行url编码，而POST支持多种编码方式</li>
</ul>
<p><strong>状态码</strong>：三位数字组成，第一个数字定义了响应的类别，且有五种可能取值</p>
<ul>
<li>1xx：指示信息–表示请求已接收，继续处理</li>
<li>2xx：成功–表示请求已被成功接收、理解、接受</li>
<li>3xx：重定向–要完成请求必须进行更进一步的操作</li>
<li>4xx：客户端错误–请求有语法错误或请求无法实现</li>
<li>5xx：服务器端错误–服务器未能实现合法的请求</li>
</ul>
<p><strong>短语</strong>：对状态码的描述，帮助用户理解状态码原因</p>
<p>以下是常见的响应状态码和短语</p>
<ul>
<li>200 OK      &#x2F;&#x2F;客户端请求成功</li>
<li>304 Not Modified &#x2F;&#x2F;请求资源的缓存可以使用，响应缓存的文件</li>
<li>400 Bad Request  &#x2F;&#x2F;客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthorized &#x2F;&#x2F;请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</li>
<li>403 Forbidden  &#x2F;&#x2F;服务器收到请求，但是拒绝提供服务</li>
<li>404 Not Found  &#x2F;&#x2F;请求资源不存在，eg：输入了错误的URL</li>
<li>500 Internal Server Error &#x2F;&#x2F;服务器发生不可预期的错误</li>
<li>503 Server Unavailable  &#x2F;&#x2F;服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li>
</ul>
<p>以该url - <a href="https://screw-hand.com/_">https://screw-hand.com/_</a> 为例，这个地址是没有任何资源的，故服务器返回了404提示我们Not Found，原因可能是：之前的资源被删除了，所以这里没有资源了亦或者根本就没有资源。这里我们只是单纯网址最后打多了一个<code>_</code>而已。</p>
<p>唧唧歪歪了那么多，我们再结合开头的故事小结一下。</p>
<ul>
<li>《过桥米线》中，娘子送米线给丈夫，丈夫食用完娘子回家；类似浏览器与服务器之间使用<strong>请求</strong>和<strong>响应</strong>完成一个<strong>HTTP事务</strong></li>
<li>米线是娘子送给丈夫的午餐；而则浏览器使用<strong>HTTP报文</strong>这种格式发送数据供服务器响应，报文只是格式，为的是发送数据</li>
<li>娘子曾尝试赶马车送餐，不过米线还是凉了；正如HTTP有多种请求方法，合理使用<strong>请求方法</strong>服务器方可正确响应资源</li>
</ul>
<p>恭喜读者了解了HTTP协议的一些基本概念，想深入探索的的朋友请往下看…</p>
<h2 id="HTTP背后的组织"><a href="#HTTP背后的组织" class="headerlink" title="HTTP背后的组织"></a>HTTP背后的组织</h2><p>很高兴读者继续下划，那么现在我们已经认识了HTTP这位朋友，（从读者学会网上冲浪的那一刻，它就一直在你身边），接下来我们来认识一下这位朋友所在的组织<strong>互联网协议</strong>。</p>
<p>《名侦探柯南》中的琴酒，黑衣组织（酒厂）的高级成员，可以得到“那位先生”的直接命令。</p>
<p>HTTP也并非单枪作战，背后也犹如琴酒背后的酒厂，那么我们来介绍下“酒厂”。</p>
<h3 id="互联网协议，五层模型"><a href="#互联网协议，五层模型" class="headerlink" title="互联网协议，五层模型"></a>互联网协议，五层模型</h3><p><strong>什么是互联网？</strong></p>
<blockquote>
<p> 互联网（英语：Internet），是21世纪之始网络与网络之间所串连成的庞大网络，这些网络以一组标准的网络TCP&#x2F;IP协议族相连，连接全世界几十亿个设备，形成逻辑上的单一巨大国际网络。 ——wiki百科</p>
</blockquote>
<p>……这，也太概念化了吧？？</p>
<p><strong>简单一句话：世界上所有的网络组成起来就是互联网。</strong></p>
<p>PS：互联网、因特网、万维网的概念之后再讨论，本篇文章的重要在于HTTP。</p>
<h4 id="五层模型"><a href="#五层模型" class="headerlink" title="五层模型"></a>五层模型</h4><p>所有的网络环境组成了互联网，所以互联网很庞大，从模型上有3种分层方式：</p>
<ol>
<li>OSI分层 （7层）</li>
<li>TCP&#x2F;IP分层（4层）</li>
<li>五层协议 （5层）</li>
</ol>
<p>就像“酒厂”一样，一个优秀的<del>暗杀</del>组织，肯定<strong>结构清晰</strong>，<strong>分工明确</strong>；<br>伏特加跟着琴酒清除卧底，然后其他人不是卧底就是渣渣，是的，结构清晰，谁是大反派谁是卧底谁是渣一下子就看出来了；<br>分工明确，琴酒一个人为组织拼死拼活，伏特加给琴酒开车，其他人，其他人.. 不知道琴酒先生会怎么想？</p>
<p><em>琴酒：酒厂都是假酒，这活没法干了!(摔酒瓶)</em></p>
<p>这里我们主要说说五层模型。</p>
<blockquote>
<p>五层模型将互联网分成了5个层，每一个层都定应了很多协议，所有的协议都是互联网协议。</p>
</blockquote>
<p><img src="/post/http/image3.jpg" alt="f2eedd2ab72134dfe7c5350f9837b39d.png"></p>
<p>应用层(Application Layer): 规定应用程序的数据格式。 应用程序协议<br>传输层(Transport Layer): 建立”端口到端口”的通信      UDP协议    TCP协议<br>网络层(Network Layer)： 建立”主机到主机”的通信      IP协议    ARP协议<br>链接层(Link Layer)：在“实体层”上方，确定了0和1的分组方式    以太网协议<br>实体层(Physical layer)：把电脑连接起来的物理手段。负责传送0和1的电信号</p>
<p>顺序从下到上看，越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>
<!--
**实体层** 实体层使用物理把电脑（两台或以上）连起来，光缆，电缆，无线电波都行，传递0与1的电信号。

**链接层** 定义电信号，确定0和1的分组方式。使用了**以太网协议**，通过识别网卡的MAC地址识别发送者（网卡的MAC地址具有唯一性），以太网并不一对一直接发送数据包给接受方，以**广播**的方法发送给以太网的所有计算机，计算机将自己的MAC地址与数据包的接受者比较，若本机不是接受方，丢弃该包；本机确定接收者的身份，才会进一步处理。
以太网协议、网卡的MAC地址、广播发送组成链接层，使得计算机之间可以传递数据。

**网络层**

-->

<h4 id="HTTP连接方式"><a href="#HTTP连接方式" class="headerlink" title="HTTP连接方式"></a>HTTP连接方式</h4><p>HTTP属于应用层的一种互联网协议，基于TCP&#x2F;IP协议，是两者的一种具体运用。五层模型中的应用层除了HTTP还有其他的协议。<br>  http：超文本传输协议<br>  https：安全超文本传输协议<br>  IP：TCP&#x2F;IP协议<br>  ftp：文件传输协议<br>  SMTP：邮件传输协议</p>
<blockquote>
<p>HTTP协议位于TCP&#x2F;IP上层，HTTP使用TCP&#x2F;IP传输报文数据。</p>
</blockquote>
<p>看到这里，应该理解了浏览器发送HTTP请求，是通过TCP&#x2F;IP的方式与服务器链接的。</p>
<p><strong>如何建立TCP连接？</strong></p>
<p><img src="/post/http/image4.jpg" alt="6c4f9604d0f4cc83eb0293c6659d646a.png"></p>
<p><strong>三次握手</strong>：建立一个TCP连接时，需要客户端和服务器总共发送3个包</p>
<ol>
<li>首先，请求新的TCP 连接，客户端向服务器发送一个小的 TCP 分组这个分组中，包含的<strong>SYN</strong>标记说明这是一个连接请求。（a ）。</li>
<li>接着，如果服务器接受了连接，会向客户端回送一个 TCP 分组，这个分组中的 <strong>SYN</strong> 和 <strong>ACK</strong> 标记都被置位，说明连接请求已被接受（b ）。</li>
<li>最后，客户端向服务器回送一条确认信息，通知它连接已成功建立 （c ）。</li>
</ol>
<p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据；<br>三次握手为了是连接服务器指定端口，建立TCP连接，并同步连接交换TCP信息。</p>
<p>断开TCP连接客户端需要和服务器发送四个包，最终确认断开。因此称为<strong>四次挥手</strong>，这里并不详细说明具体过程。</p>
<p>关于“酒厂”的介绍就到这里，读者到这里能对互联网有一个大概的了解就行了，我们继续探索HTTP。</p>
<h2 id="回到http"><a href="#回到http" class="headerlink" title="回到http"></a>回到http</h2><p>保时捷356-A是琴酒的爱车，黑色风格是他的穿衣风格，不记住死人的名字，每次只执行一次任务，但使命必达（柯南是个例外），必要时穷追不舍。</p>
<p><em>“不好意思啊伏特加，已经杀掉的人的脸和名字，我是从来不去记的。”</em></p>
<p>HTTP在某方面也跟琴酒有点类似，每次连接只能处理一个请求（但可以使用<strong>持久连接</strong>），不关心处理了多少条事务，可以传输多种类型数据：文本，图片，网页，音频等..</p>
<p>PS：事务结束连接后，TCP可使连接保持打开状态，这种技术叫<strong>持久性连接</strong></p>
<p>正式给HTTP一个简介：</p>
<ul>
<li>超文本传输协议 (Hyper Text Transport Protocol, HTTP)最为广泛的一种网络传输协议</li>
<li>基于TCP&#x2F;IP通信协议来传递数据</li>
<li>连接所有的WWW文件都必须遵守这个标准</li>
<li>无连接：限制每次连接只处理一个请求</li>
<li>任何类型的数据都可以通过HTTP发送</li>
<li>无状态协议：对于事务处理没有记忆能力</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>虽说浏览器发送请求给服务器，但HTTP传输数据并不是直达目的服务器的。且HTTP是使用明文（不加密）传输数据的。这意味者请求在发送过程中，可能数据会被抓到导致泄露纂改，或经过某个网关&#x2F;代理被拦截下来自己的身份被冒充，因此<strong>HTTP并不安全</strong>，为了确保请求能准确加密送达服务器，HTTPS出现了。</p>
<!-- 龙舌兰是墨西哥的一种烈酒，它的传统喝法是配上柠檬和盐。 -->

<p><img src="/post/http/image5.jpg" alt="c04dbca7e19b08519ebf1ad2df2fd090.png"></p>
<p><em>还记得之前一笔带过的TCP&#x2F;IP分层（4层）吗？</em></p>
<p><strong>如何加密？</strong></p>
<p>HTTPS在安全的传输层上发送HTTP，在这里先加密后发送报文给TCP。同样遵循一层有一个或多个协议，安全层通过SSL或TLS协议实现（SSL采用公开密钥加密），安全层使得即使请求被第三方获取，也无法识别数据内容。</p>
<p>这里涉及到密码学的一些基本知识</p>
<ul>
<li>SSL的加密方式是公开密钥加密</li>
<li>密钥是一套对明文进行编码&#x2F;转码的算法</li>
<li>公开密钥即公开编码密钥</li>
<li>每个人拥有不同的解码密钥</li>
<li>非对称加密的编码和解码密钥不同</li>
</ul>
<p>密码学上，没有绝对安全的密码，如果暴力破解，是可以破解出来的，只是时间长短问题，有些密码可能需要好几百年才能破解，详情了解MD5加密。</p>
<p><em>“锄头凿得好，没有挖不到的墙角。”</em></p>
<p><strong>签名与证书</strong></p>
<p>服务器远在他乡，有时候网页打不开都得先看下wifi信号是不是不好，再检测下站点的服务器是不是问题；那正常情况下，又有谁能保证请求一定送达服务器？</p>
<p>我们可以考虑给HTTP的报文签名，以备注报文的编写作者。同时，我们需要一个公正的、值得信赖的组织，保证这个连接是安全的。</p>
<p><strong>数字签名</strong>技术使用加密系统给报文签名，说明是谁编写的报文，同时也能证明报文没有被篡改过，这可以保证报文的准确传输。</p>
<p><strong>服务器证书</strong>，SSL数字证书的一种形式，是因特网上的“ID卡”，由官方的“证书颁发机构”签发。记录了服务器名称，过期时间，证书发布者和发布者的数字签名等。</p>
<p>SSL不检测站点服务器的证书，现代浏览器会自行检查，若没有证书，浏览器会警告用户连接并不安全。</p>
<p><img src="/post/http/image6.jpg"><br><img src="/post/http/image7.jpg"></p>
<p><em>浏览器检测证书</em></p>
<p>一个未正确配置SSL的网址，打开看看自己的浏览器有没有对SSL检测？<a href="https://self-signed.badssl.com/">https://self-signed.badssl.com/</a></p>
<p>相信比我更敏慧的你早已发现：”S”代表safe(安全)，safe是SSL&#x2F;TLS。</p>
<p>基本概念已经知晓，是时候来一波SSL连接了。</p>
<p><strong>SSL握手</strong></p>
<p>SSL握手发生在HTTP传输加密报文前，它们会完成以下工作：</p>
<ul>
<li>交换协议版本号</li>
<li>选择一个两端都了解的密码（公钥）</li>
<li>对两端身份进行认证</li>
<li>生成临时密钥，加密通道</li>
</ul>
<p>由于多了一次SSL握手过程，相同的网络环境下，HTTPS比HTTP要费时。</p>
<p><strong>兼容HTTP</strong></p>
<p>如果自己的网站从HTTP升级到了HTTPS，那么需要考虑用户可能会按照之前的习惯<a href="http://screw-hand.com/">http://screw-hand.com/</a>，而不是输入<a href="https://screw-hand.com/">https://screw-hand.com/</a>，这导致用户并不能使用该网站的HTTPS协议。所幸，http和https使用的默认端口(port)不同。http的默认端口是80或者8080，https默认端口是443。我们可以在http的默认端口设置代理使之跳转到https的443。</p>
<p><a href="http://screw-hand.com/">http://screw-hand.com/</a> &#x3D; <a href="http://screw-hand.com/">http://screw-hand.com:80/</a></p>
<p><a href="https://screw-hand.com/">https://screw-hand.com/</a> &#x3D; <a href="https://screw-hand.com/">http://screw-hand.com:443/</a></p>
<p>以上四个超链接都可正确打开此博客主页。</p>
<p>PS：上文提及的URL格式中<code>port</code>参数出现了</p>
<p><strong>对比HTTP</strong></p>
<p>按照惯例，接下来是小结的时间。</p>
<ul>
<li>HTTPS：超文本安全传输协议(Hypertext Transfer Protocol Secure)</li>
<li>以安全为目标的HTTP通道，简单讲是HTTP的安全版</li>
<li>在HTTP下加入SSL层，提供加密传输和身份验证功能</li>
<li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443</li>
<li>HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%</li>
<li>HTTPS是现行架构下最安全的解决方案，并非绝对安全</li>
</ul>
<h3 id="不止浏览器"><a href="#不止浏览器" class="headerlink" title="不止浏览器"></a>不止浏览器</h3><p>再次把话题的范围放大。HTTP也并不是浏览器特有使用的协议，更运行上在其他的客户端(Client)上，如印象笔记，微信，音乐播放器等，甚至自己写的一个网络爬虫程序，也是HTTP客户端。只要可以发送HTTP报文的，都是HTTP的客户端。浏览器是最经典的HTTP客户端，且浏览器支持HTTP协议的同时，更支持ftp， file协议。</p>
<p>C&#x2F;S结构：客户机&#x2F;服务器模式，是基于企业内部网络的应用系统。由于Web浏览器的兴起，B&#x2F;S模式逐步取代了C&#x2F;S模式，被更广泛地应用。</p>
<blockquote>
<p>B&#x2F;S结构基于C&#x2F;S结构，是其本身的一种改良。</p>
</blockquote>
<h3 id="web控件"><a href="#web控件" class="headerlink" title="web控件"></a>web控件</h3><p>而客户端到服务器之间并不是直连的。也就是说，报文在传输的过程，需要经过好几个结构组件，如代理、缓存、网关、隧道、Agent代理。举个例子，我们浏览一个美国的网站，如果网站配置了CDN，而在国内正好有某个节点有缓存；且缓存未过期。这时候我们的请求被国内的节点处理，返回的结果是其缓存，从物理角度看，这远比直接跑到美国拿数据要快得过。</p>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>这是在下写的第一篇博文，本意是简单写写HTTP协议的。<br>网上冲浪离不开这位老朋友，因此我觉得第一篇博文以HTTP为话题多少有点起点性的意义。<br>技术型的文章如果太多术语，逼格是高了，但是会隐晦难懂。<br>因此在保证文章质量的前提下，插入了两个小故事，使得趣味性高一点。<br>更深层的技术也没怎么提及，所以这篇文章的定位是科普文章。</p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><p>那么，关于HTTP就到此为止了吗？不不不，HTTP的话题太过庞大，文章简述了一些比较主要的知识点而已，更衍生出了很多相关的话题。</p>
<ul>
<li>互联网、因特网、万维网是什么？</li>
<li>浏览器访问网页的详细过程？</li>
<li>五层模型中的其他协议</li>
<li>web控件的功能？</li>
<li>https与web安全</li>
<li>如何设置缓存</li>
<li>用户认证机制</li>
</ul>
<p>在这之前也有很多优秀的前辈的写过相关的文章，这些话题以后再慢慢提及。<br>还有HTTP的历史需要读者自行探索，这里介绍两本书：<a href="https://book.douban.com/subject/10746113/">《HTTP权威指南》</a>、 <a href="https://book.douban.com/subject/25863515/">《图解HTTP》</a>。</p>
<p>相信看完整篇文章，读者再去看书也会有更深层次的收获。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>《过桥米线》中，妻子送米线表达对夫君的爱意和仕途的支持；<br>浏览器与服务器之间使用HTTP协议交互；<br>所以我想：HTTP协议应该是浏览器和服务器之间的美好约定吧。</p>
<p>琴酒纵使能力再强，也属于“酒厂”组织的其中一个成员；<br>HTTP固然如此，名气再大，也希望读者不要忘记在背后支持它的互联网协议。</p>
<p>最后，<br>希望朋友吃米粉的时候能想起HTTP；<br>喝酒的时候能想起互联网协议；<br>喝酒吃米粉的时候能想到我。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>用信鸽来解释 HTTPS</title>
    <url>//post/https/</url>
    <content><![CDATA[<p>2019&#x2F;01&#x2F;09 | 分类： 基础技术 | 2 条评论 | 标签： https</p>
<blockquote>
<p>译文出处： <a href="https://www.oschina.net/translate/https-explained-with-carrier-pigeons">oschina</a> |  原文出处：<a href="https://medium.freecodecamp.org/https-explained-with-carrier-pigeons-7029d2193351">freecodecamp</a></p>
</blockquote>
<p>密码学是一门难以理解的学科，因为它充满了数学定理。但是除非你要实际开发出一套加密算法系统，否则你是没必要强制理解那些深奥的数学定理的。</p>
<p>如果你阅读本文的目的是想设计下一套 HTTPS 协议，那我只能抱歉的说本文的知识还远远不够；如果不是的话，那么就煮杯咖啡，轻松愉悦的阅读本文吧。</p>
<h2 id="爱丽丝、鲍伯和-…-信鸽？"><a href="#爱丽丝、鲍伯和-…-信鸽？" class="headerlink" title="爱丽丝、鲍伯和 … 信鸽？"></a>爱丽丝、鲍伯和 … 信鸽？</h2><p>你在互联网上从事的任何活动（阅读这篇文章、在亚马逊上购物、上传图片等）归结到底都是从某台服务器上发送和接收信息。</p>
<p>这个说起来可能有点抽象，不如让我们假设这些消息都是由信鸽来传递的。我知道这个假设有些太过随意，但相信我 HTTPS 就是这样工作的，尽管它的速度快的多。</p>
<p>我们先不谈服务器、客户端或者黑客攻击，先来聊一下爱丽丝、鲍伯和马洛里。如果这已不是你第一次接触密码学理论，你应该会认识这些名字，因为他们经常在各种密码学文献中被提及。</p>
<h2 id="一个简单的通信方式"><a href="#一个简单的通信方式" class="headerlink" title="一个简单的通信方式"></a>一个简单的通信方式</h2><p>如果爱丽丝想给鲍伯发个消息，她会把消息绑在信鸽的腿上寄给鲍伯。然后鲍伯收到了消息，并阅读了它。这一切都是美好的。</p>
<p>但如果马洛里拦截了爱丽丝飞翔中的信鸽并且修改消息内容呢？鲍伯将无法知道爱丽丝发来的消息已经在传输过程中被修改了。</p>
<p>这就是 HTTP 的工作方式，很可怕吧？我绝不会通过 HTTP 发送我的银行凭证，希望你也不会。</p>
<span id="more"></span>

<h2 id="隐蔽的密码"><a href="#隐蔽的密码" class="headerlink" title="隐蔽的密码"></a>隐蔽的密码</h2><p>那么如果爱丽丝和鲍勃都非常的机智。他们一致认同使用一种隐蔽的密码来书写他们的信息。他们会将信息中的每个字母按照字母表中的顺序前移三位。比如，D→A，E→B，F→C。如此一来，原文为 “secret message” 的信息就变成了 “pbzobq jbppxdb” 。</p>
<p>那现在如果马洛里再截获了信鸽，她既不能做出有意义的修改同时也不会知道信息的内容，因为她不知道隐蔽的密码到底是什么。然而鲍勃却可以很容易反转密码，依靠 A → D, B → E, C → F 之类的规则破译信息的内容。加密后的信息 “pbzobq jbppxdb” 会被破解还原为 “secret message” 。</p>
<p>搞定！</p>
<p>这就是对称密匙加密，因为如果你知道如何加密一段信息那么你同样可以解密这段信息。</p>
<p>上述的密码通常被称为凯撒码。在现实生活中，我们会使用更为奇特和复杂的密码，但原理相同。</p>
<h2 id="我们如何决定密匙？"><a href="#我们如何决定密匙？" class="headerlink" title="我们如何决定密匙？"></a>我们如何决定密匙？</h2><p>如果除了发信者和收信者之外没有人知道使用的是什么密匙，对称密匙加密是非常安全的。在凯撒加密中，密匙就是每个字母变到加密字母需要移动多少位的偏移量。我之前的距离中，使用的偏移量是 3 ，但是也可以用 4 或者 12 。</p>
<p>问题是如果爱丽丝和鲍勃在开始用信鸽传信之前没有碰过头，他们没有一个安全的方式来确立密匙。如果他们自己来在信中传递密匙，马洛里就会截获信息并发现密匙。这就使得马洛里可以在爱丽丝和鲍勃开始加密他们的信息之前或之后，阅读到他们信息的内容并按照她的意愿来篡改信息。</p>
<p>这是一个中间人攻击的典型例子，避免这个问题的唯一方法就是收发信的两方一起修改他们的编码系统。<br>通过信鸽传递盒子</p>
<p>所以爱丽丝和鲍勃就想出了一个更好的系统。当鲍勃想要给爱丽丝发送信息时，他会按照如下的步骤来进行：</p>
<ul>
<li>鲍勃向爱丽丝送一只没有携带任何信息的鸽子。</li>
<li>爱丽丝给鲍勃送回鸽子，并且这只鸽子带有一个有开着的锁的盒子，爱丽丝保管着锁的钥匙。</li>
<li>鲍勃把信放进盒子中，把锁锁上然后把盒子送给爱丽丝。</li>
<li>爱丽丝收到盒子，用钥匙打开然后阅读信息。</li>
</ul>
<p>这样马洛里就不能通过截获鸽子来篡改信息了，因为她没有打开盒子的钥匙。当爱丽丝要给鲍勃发送消息的时候同样按照上述的流程。</p>
<p>爱丽丝和鲍勃所使用的流程通常被称为非对称密钥加密。之所以称之为非对称，是因为即使是你把信息编码（锁上盒子）也不能破译信息（打开锁住的盒子）。</p>
<p>在术语中，盒子被称为公匙而用来打开盒子的钥匙被称为私匙。</p>
<h2 id="如何信任盒子"><a href="#如何信任盒子" class="headerlink" title="如何信任盒子"></a>如何信任盒子</h2><p>如果你稍加注意你就会发现还是存在问题。当鲍勃收到盒子时他如何能确定这个盒子来自爱丽丝而不是马洛里截获了鸽子然后换了一个她有钥匙能打开的盒子呢？</p>
<p>爱丽丝决定签名标记一下盒子，这样鲍勃收到盒子的时候就可以检查签名来确定是爱丽丝送出的盒子了。</p>
<p>那么你们之中的一些人可能就会想了，鲍勃如何打一开始就能识别出爱丽丝的签名呢？这是个好问题。爱丽丝和鲍勃也确实有这个问题，所以他们决定让泰德代替爱丽丝来标记这个盒子。</p>
<p>那么谁是泰德呢？泰德很有名的，是一个值得信任的家伙。他会给任何人签名并且所有人都信任他只会给合法的人签名标记盒子。</p>
<p>如果泰德可以确认索要签名的人是爱丽丝，他就会在爱丽丝的盒子上签名。因此马洛里就不可能搞到一个有着泰德代表爱丽丝签了名的盒子，因为鲍勃知道泰德只会给他确认过的人签名，从而识破马洛里的诡计。</p>
<p>泰德的角色在术语中被称为认证机构。而你阅读此文时所用的浏览器打包存有许多认证机构的签名。</p>
<p>所以当你首次接入一个网站的时候你可以信任来自这个站点的盒子因为你信任泰德而泰德会告诉你盒子是合法的。</p>
<h2 id="沉重的盒子"><a href="#沉重的盒子" class="headerlink" title="沉重的盒子"></a>沉重的盒子</h2><p>现在爱丽丝和鲍勃有了一个可靠的系统来进行交流，然他们也意识到让鸽子携带盒子比原本只携带信件要慢一些。</p>
<p>因此他们决定只有在选择用对称加密来给信息编码（还记得凯撒加密法吧？）的密匙时，使用传递盒子的方法（非对称加密）。</p>
<p>这样就可以二者的优点兼具了，非对称加密的可靠性和对称加密的高效性。</p>
<p>现实世界中我们不会用信鸽这样慢的送信手段，但用非对称加密来编码信息仍要慢于使用对称加密技术，所以我们只有在交换编码密匙的时候会使用非对称加密技术。</p>
<p>现在你已经了解了HTTPS是如何工作的了，你的咖啡也应该准备好了。好好享用吧你受之无愧。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>嗜夜</title>
    <url>//post/killing-night/</url>
    <content><![CDATA[<p>夜晚的钟声慢慢敲起。<br>原始丛林狼群双眸诡异的光芒。<br>无处安放的灵魂也回归平静。</p>
<p>教徒合诵古老冗长的咒语。<br>祭坛的封印一步步被封开。<br>古墓冰尸发出阵阵哀嚎。<br>锁链断裂，癫狂抑制不住。<br>屠杀活动的序幕早已开始。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>vue技巧篇：生命周期</title>
    <url>//post/lifecycle/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
</blockquote>
<p>其实对生命周期而言，我们要搞懂的是。</p>
<ol>
<li>什么阶段初始化数据</li>
<li>什么阶段初始化事件</li>
<li>什么阶段渲染DOM</li>
<li>什么阶段挂载数据</li>
</ol>
<span id="more"></span>

<h2 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h2><p><img src="/post/lifecycle/lifecycle.png" alt="lifecycle"></p>
<p>生命周期钩子函数可以分成6个类型，除了一个最少用的子孙组件错误钩子函数。<br>每个类型都有 “beforeXX” “XXed”，总共有11个生命周期钩子函数。</p>
<table>
<thead>
<tr>
<th align="center">序</th>
<th align="center">类型</th>
<th align="center">钩子函数名 - 1</th>
<th align="center">钩子函数名 - 2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">创建</td>
<td align="center">beforeCreate</td>
<td align="center">created</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">挂载</td>
<td align="center">beforeMount</td>
<td align="center">mounted</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">更新</td>
<td align="center">beforeUpdate</td>
<td align="center">updated</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">销毁</td>
<td align="center">beforeDestroy</td>
<td align="center">destroyed</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">激活</td>
<td align="center">activated</td>
<td align="center">deactivated</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">错误</td>
<td align="center">errorCaptured</td>
<td align="center">\</td>
</tr>
</tbody></table>
<p>生命周期钩子官方api <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">传送门</a></p>
<p>别看有11个钩子函数，看似一时间难以掌握。<br>其实也不是很需要全部掌握，常用的就那么几个。<br>这几个钩子函数会一一介绍，也会先大家演示一遍完整的生命周期。<br>且实际开发中我们更在意的是，这些钩子函数对组件实例数据&#x2F;事件的影响。</p>
<h2 id="完整的生命周期"><a href="#完整的生命周期" class="headerlink" title="完整的生命周期"></a>完整的生命周期</h2><p>这一章基本是在翻译生命周期图示的内容。<br>不过很多开发者都对完整的生命周期流程一知半解。<br>虽然提供源码，还是<strong>建议每个人按照自己的理解写一下实例。</strong></p>
<p>新建<code>lifecycle</code>目录，定义<code>lifecycle.vue</code>，导入<code>process.vue</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- lifecycle.vue --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lifecycle-process</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lifecycle-process</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> LifecycleProcess <span class="token keyword">from</span> <span class="token string">'./process'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    LifecycleProcess
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>我们在process.vue体现完整的生命周期。</strong></p>
<p>虽然官网的示例都是<code>new Vue()</code> 初始化vue实例。<br>单文件组件(*.vue)使用<code>export default</code>也同样是初始化vue实例。</p>
<p>这里有几个概念：</p>
<ol>
<li>数据观测 (data observer) : prop， data， computed</li>
<li>事件机制 (event &#x2F; watcher)： methods 函数， watch侦听器</li>
</ol>
<p>我们只简单搞清楚每个阶段发生了什么事情。其他还没有开始做的事情不想提及。<br>毕竟未开始也未完成，默认就是还没初始化嘛，有什么好说的呢？</p>
<h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p>本小节标题是create，是指<strong>vue实例的create阶段</strong>。<br><strong>不是生命周期钩子函数</strong> beforeCreate &#x2F; created。</p>
<p>我们不打算从生命周期的钩子函数作为切入点。<br>只要搞清楚了vue实例xx阶段做了什么事情，<br>那beforeXX &#x2F; XXed 的区别自然知晓。</p>
<p>我们也根据官方api的资料来表述，实例阶段做了什么事情。</p>
<blockquote>
<p>实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch&#x2F;event 事件回调。</p>
</blockquote>
<p>那我们应该定义 prop， data， computed methods watch，<br>然后使用beforeCreate， created前后对比一下。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// process.vue</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// prop， data， computed methods watch</span>
  <span class="token comment">// 自行定义，这里不浪费篇幅</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hey Jude!'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">beforeCreate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'beforeCreate--实例创建前状态'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$props  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$props<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$data  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"computed :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reverseMsg<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"methods  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reversedMsg<span class="token punctuation">)</span>
    <span class="token comment">// this.msg = 'msg1'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">'created--实例创建完成状态'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$props  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$props<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$data  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"computed :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reverseMsg<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"methods  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reversedMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// this.msg = 'msg2'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/post/lifecycle/beforeCreate-created.jpg" alt="beforeCreate-created.jpg"></p>
<p>prop， data， computed， methods， watch。<br>除了watch比较特殊，其他都得到了验证效果。<br>要验证也很简单，取消 beforeCreate， created 对 <code>this.msg</code>赋值的注释。<br><code>watch msg</code> 看看控制台会打印<code>msg1</code>还是<code>msg2</code>，或者两者皆可。<br>聪明的你肯定知道控制台只打印<code>msg2</code>的，所以我就不取消注释了。</p>
<h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><blockquote>
<p> el 被新创建的 vm.$el 替换。 如果根实例挂载到了一个文档内的元素上，当mounted被调用时vm.$el也在文档内。</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-lifecycle-process<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123; msg &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">beforeMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'beforeMount--挂载之前的状态'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$el  :"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'mounted--已经挂载的状态'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$el  :"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/post/lifecycle/beforeMount-mounted.jpg" alt="beforeMount-mounted.jpg"></p>
<p>mount阶段，由于vue支持多种方式挂载DOM。<br>而vue实例在created之后，beforeMounted之前这一阶段，<br>对挂载DOM的方式有判断机制，这里的流程稍微复杂也比较重要。</p>
<p>多种挂载DOM的方式。</p>
<ul>
<li>el &#x2F; $mout</li>
<li>template</li>
<li>render</li>
</ul>
<p>这里打算分别使用n个组件对着这几种挂载方式。<br>你可以选择暂时跳过，先走完整个周期流程再回来。</p>
<p><strong>create mount是每个组件都必须经历的生命周期，但接下来的生命周期就比较有选择性了。</strong></p>
<p>下一实例阶段 <a href="#update">update</a></p>
<hr>
<p>这里会按照判断机制的顺序介绍不同的挂载方式。</p>
<h4 id="el-x2F-mount"><a href="#el-x2F-mount" class="headerlink" title="el &#x2F; $mount"></a>el &#x2F; $mount</h4><p>首先会判断有无<a href="https://cn.vuejs.org/v2/api/#el">el选项</a>声明实例要挂载的DOM。</p>
<blockquote>
<p>el选项：提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。</p>
</blockquote>
<blockquote>
<p>如果在实例化时存在这个选项，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。</p>
</blockquote>
<p>el选项需要使用显示使用<code>new</code>创建的实例才生效。<br>为了方便，这里新建了<code>skill-lifecycle-el.html</code>放在public（<a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#public-%E6%96%87%E4%BB%B6%E5%A4%B9">静态资源目录</a>）下。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- skill-lifecycle-el.html --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/vue/2.6.10/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            msg<span class="token operator">:</span> <span class="token string">'Hey Jude!'</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">beforeMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'beforeMount--挂载之前的状态'</span><span class="token punctuation">)</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$el  :"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"el  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
          <span class="token comment">// debugger</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'mounted--已经挂载的状态'</span><span class="token punctuation">)</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$el  :"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"el  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token comment">// vm.$mount('#app')</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bdoy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>el 还有 <a href="https://cn.vuejs.org/v2/api/#vm-mount">vm.$mount</a> 必须要有一个，不然vue的声明周期就停止，beforeMount不触发。</strong></p>
<blockquote>
<p>vm.$mount 手动地挂载一个未挂载的实例。</p>
</blockquote>
<p>两种挂载方式的效果是一样的。</p>
<p><img src="/post/lifecycle/beforeMount-mounted-el.jpg" alt="beforeMount-mounted-el.jpg"></p>
<p><strong>值得注意的是，<code>beforeMount</code>真实的DOM确实是会渲染双花括号还有指令的，<code>mounted</code>之后会被替换成真正的数据。</strong></p>
<h4 id="template"><a href="#template" class="headerlink" title="template"></a>template</h4><p>判断完el选项，接下来会判断有无<a href="https://cn.vuejs.org/v2/api/#template">template选项</a></p>
<blockquote>
<p>一个字符串模板作为 Vue 实例的标识使用。模板将会替换挂载的元素。</p>
</blockquote>
<p>如此说来，作用跟el选项差不多，都是挂载元素的。</p>
<p>那我们声明template选项，写上html tag string，然后把<code>#app</code> DOM里面的内容注释掉。（DOM保留）</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- skill-lifecycle-template.html --></span>

  <span class="token comment">&lt;!-- "#app" DOM --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--
    &lt;p v-text="msg">&lt;/p>
    &lt;p>&#123;&#123; msg &#125;&#125;&lt;/p>
    --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
      template<span class="token operator">:</span> <span class="token string">'&lt;b> &#123;&#123; msg &#125;&#125;&lt;/b>'</span><span class="token punctuation">,</span> <span class="token comment">// template 选项</span>
      <span class="token function">beforeMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'beforeMount--挂载之前的状态'</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$el  :"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
        <span class="token comment">// debugger</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'mounted--已经挂载的状态'</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"$el  :"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"#app :"</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们在挂载后找一下<code>#app</code>还在不在。</p>
<p><img src="/post/lifecycle/beforeMount-mounted-template.jpg" alt="beforeMount-mounted-template.jpg"></p>
<p>从这图，我们可以知道：</p>
<ul>
<li><code>vm.$el</code>在<code>beforeMount</code>反应的是el选项的<code>#app DOM</code>（此时<code>#app DOM</code>还是模板状态）</li>
<li>很明显，<code>template</code>选项把el选择的#app给替换掉了，故**<code>template选项</code>的优先级比<code>el选项</code>&#x2F;<code>vm.$mount()</code>高**。</li>
</ul>
<p>el选项：比较温和，只是霸占人家的屋子自己住在里面。<br>template选项：直接端掉人家的老窝，自己筑新巢。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p><a href="https://cn.vuejs.org/v2/api/#render">render选项</a>是一个渲染函数，返回<strong>虚拟节点 (virtual node）</strong>，又名<strong>VNode</strong>。</p>
<p>render函数的用法稍微复杂，又牵扯到虚拟DOM、JSX等技术点，之后会另写一篇详细讲解。</p>
<p>假设我们现在并不明白render的用法，只知道它会返回虚拟节点，就够了。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- skill-lifecycle-template.html --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;b> &#123;&#123; msg &#125;&#125;&lt;/b>'</span><span class="token punctuation">,</span> <span class="token comment">// template 选项</span>
        <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">+</span> <span class="token string">' from render'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// render函数</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到这里template选项我们不注释，就算我们把注释掉template选项， 输出结果也还是一样。</p>
<p><img src="/post/lifecycle/beforeMount-mounted-render.jpg" alt="beforeMount-mounted-render.jpg"></p>
<p>可以粗暴理解为：render是template的升级版，template字符串模板，render返回的是由函数创建生成的VNode。</p>
<p>所以通过判断机制的流程，我们也很清楚了这几种方式挂载DOM的区别。</p>
<ol>
<li>判断有无挂载DOM：<code>el选项</code>或者 <code>vm.mount()</code>， 无则停止。</li>
<li>判断有无template选项，有则替换掉挂载DOM元素。</li>
<li>判断有无render函数，有则替换掉挂载DOM元素&#x2F;template选项。</li>
</ol>
<p>这几种挂载方式是有优先级的，不过因为按照顺序分析，也不用特意去记，后面的会覆盖前面的。</p>
<h4 id="vue不同构建版本的区别（编译器、运行时）"><a href="#vue不同构建版本的区别（编译器、运行时）" class="headerlink" title="vue不同构建版本的区别（编译器、运行时）"></a>vue不同构建版本的区别（编译器、运行时）</h4><p>vuejs有不同的<a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A">构建版本</a>，他们按照两个维度来分类，<strong>模块化</strong>及<strong>完整性</strong>。</p>
<p>模块化容易理解，这取决于使用环境的模块化机制决定。</p>
<p>完整性的话，引用官网资料。</p>
<blockquote>
<ul>
<li>完整版：同时包含编译器和运行时的版本。</li>
<li>编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码。</li>
<li>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</li>
</ul>
</blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6">什么时候必须使用完整版(编译器+运行时)？</a></p>
<p><code>template 选项</code>、挂载DOM（<code>el选项</code>&#x2F;<code>vm.$mount</code>)，需要依赖编译器编译，这时必须使用完整版。</p>
<blockquote>
<p>当使用 <code>vue-loader</code> 或 <code>vueify</code> 的时候，*.vue 文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可。</p>
</blockquote>
<p>可以看看三个html文件的源码引用的vue版本。</p>
<ul>
<li><a href="https://github.com/screw-hand/stardust/blob/master/public/skill-lifecycle-el.html">skill-lifecycle-el.html</a></li>
<li><a href="https://github.com/screw-hand/stardust/blob/master/public/skill-lifecycle-template.html">skill-lifecycle-template.html</a></li>
<li><a href="https://github.com/screw-hand/stardust/blob/master/public/skill-lifecycle-render.html">skill-lifecycle-render.html</a></li>
</ul>
<p>如何选择？</p>
<p>推荐运行时，拥有预编功能，性能比完整版的要好，打包资源也小；<br>一个小代价就是不能使用template选项。<br>完整版是在运行的时候编译，性能相对一般，而且也需要把编译器一起打包。</p>
<hr>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><blockquote>
<p>数据更改导致的虚拟 DOM 重新渲染和打补丁。</p>
</blockquote>
<p><strong>实例data属性更新将会触发update阶段，数据的值改变，才会触发，并不是每次赋值都会触发。</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-lifecycle-process<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hey Jude!'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'Hello World!'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">msg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">beforeUpdate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'beforeUpdate--数据更新前的状态'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"el  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"message  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:green"</span><span class="token punctuation">,</span> <span class="token string">"真实的 DOM 结构:"</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.skill-lifecycle-process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">updated</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:orangeRed"</span><span class="token punctuation">,</span> <span class="token string">'updated--数据更新完成时状态'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"el  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:skyblue"</span><span class="token punctuation">,</span> <span class="token string">"message  :"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:green"</span><span class="token punctuation">,</span> <span class="token string">"真实的 DOM 结构:"</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.skill-lifecycle-process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/post/lifecycle/beforeUpdate-updated.jpg" alt="beforeUpdate-updated.jpg"></p>
<p>不难看出，vue的响应式机制是先改变实例数据。<br>此时新的实例数据并还没有挂载到DOM，只是存在于虚拟DOM(el);<br>再通过虚拟DOM重新渲染DOM元素。</p>
<p><strong>如果这个更新的数据有侦听器，侦听器会在update阶段前触发。</strong></p>
<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h3><blockquote>
<p>对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>
</blockquote>
<p><strong>销毁指的是销毁vue的响应式系统，事件还有子实例。</strong><br>都是针对vue层面的，并非销毁DOM之意。</p>
<p>调用<code>vm.$destroy()</code>触发 <a href="https://cn.vuejs.org/v2/api/#vm-destroy">传送门</a></p>
<p>调用这个实例方法后，DOM并没有什么变化。<br>vue实例也还是存在的，只是vue的响应式被销毁。<br>DOM与vue切断了联系。</p>
<h3 id="active"><a href="#active" class="headerlink" title="active"></a>active</h3><blockquote>
<p>被 keep-alive 缓存的组件激活&#x2F;停用时调用</p>
</blockquote>
<p>这里需要在<code>lifecycle.vue</code>引用<code>process.vue</code>的地方包裹一层<code>keepa-alive</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- lifecycle.vue --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toggle show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lifecycle-process</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lifecycle-process</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>v-if</code>指令切换<strong>组件挂载&#x2F;移除触发</strong>；<br><code>v-show</code>指令切换<strong>组件显示&#x2F;隐藏不触发</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// lifecycle-process.vue</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">activated</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'activated'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">deactivated</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'deactivated'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有意思的是，<strong>页面初始化的时候，activated会在mounted之后触发。</strong></p>
<p>单纯的切换组件的挂载&#x2F;移除状态，activated &#x2F; deactivated 会触发；<br>组件不会重新实例化走一遍生命周期，尽管这里用是的<code>v-if</code>。</p>
<p><strong>而当我们destroy组件，之后的每一次切换挂载&#x2F;移除，组件都会重新实例化，我们只是第一次destroy而已。</strong></p>
<h3 id="errorCapture"><a href="#errorCapture" class="headerlink" title="errorCapture*"></a>errorCapture*</h3><blockquote>
<p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p>
</blockquote>
<p>这个钩子函数是用来捕获错误的，而且只应用于子孙组件，实际开发中并不常用。 <a href="https://cn.vuejs.org/v2/api/#errorCaptured">传送门</a></p>
<p>那么整个周期流程已经介绍完毕了，同样的提供了process.vue<a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/lifecycle/process.vue">源码</a>。也可以选择重新回头深入了解<a href="#mount">mount机制</a>了。</p>
<h2 id="常用生命周期函数"><a href="#常用生命周期函数" class="headerlink" title="常用生命周期函数"></a>常用生命周期函数</h2><p>11个钩子函数就这样介绍完了，常用的钩子函数并不多。</p>
<h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><p>此时数据&#x2F;事件可用，可以在此<strong>动态创建数据或者定义自定义事件。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>staticString <span class="token operator">=</span> <span class="token string">'static'</span> <span class="token comment">// 定义变量</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'on-created'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 定义自定义事件</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>staticString<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：<strong>created创建的变量，更新不会被vue所监听。</strong> 在此处定义变量数据，是为了提升性能，如果这个变量更新与view层无关的话。</p>
<h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>DOM渲染完毕，可以执行页面的初始化操作（移除遮罩），获取DOM（如果有必要的话）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  
  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>controlPanel<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>vue 并不推荐直接操作DOM，不过还是提供了<code>$ref</code>作为应急解决方案。</strong></p>
<p><a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/lifecycle/useful.vue">useful.vue</a>写的比较简单。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>然而， 本篇的内容仅仅讨论的是<strong>vue组件的生命周期</strong>相关钩子函数。<br>路由守卫，自定义指令，多个组件引用的钩子函数这些并未提及，推荐几篇文章。<br>看完相信能收获得更多。</p>
<ul>
<li><a href="https://juejin.im/entry/5aee8fbb518825671952308c">vue 生命周期深入</a> 针对多个组件引用情况（父子、兄弟组件）等情况生命周期的执行顺序</li>
<li><a href="https://segmentfault.com/a/1190000008879966">vue生命周期探究（一）</a> 包括组件、路由、自定义指令等共计28个的生命周期</li>
<li><a href="https://segmentfault.com/a/1190000008923105">vue生命周期探究（二）</a> 路由导航守卫的钩子函数执行顺序</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-skill</tag>
      </tags>
  </entry>
  <entry>
    <title>M系mac设置2k外接显示器使用HiDPI</title>
    <url>//post/m-series-mac-2k-HiDPI/</url>
    <content><![CDATA[<ul>
<li>原生系统支持</li>
<li>BetterDummy(BetterDisplay)</li>
</ul>
<span id="more"></span>
<h1 id="原生系统支持"><a href="#原生系统支持" class="headerlink" title="原生系统支持"></a>原生系统支持</h1><p>这是推荐方案，下一章节的<code>BetterDummy(BetterDisplay)</code>有一些痛点。</p>
<p>macOS - 13.2.1 (22D68)可以直接设置，<code>Show all resolutions</code>提供更多的HiDPI分辨率，但肉眼反馈并不是所有标注HiDPI的分辨率都是真实的HiDPI，比如我最喜欢<code>2176*1224</code>。</p>
<p><img src="/post/m-series-mac-2k-HiDPI/mac-display.png" alt="mac-display"></p>
<h1 id="BetterDummy-BetterDisplay"><a href="#BetterDummy-BetterDisplay" class="headerlink" title="BetterDummy(BetterDisplay)"></a>BetterDummy(BetterDisplay)</h1><p><code>BetterDummy</code>已更名为<code>BetterDisplay</code>.我使用的是<code>v2.2.1</code>，软件界面已经大变样，使用方式大同小异。</p>
<ol>
<li>将外接屏幕分辨率调整为默认</li>
<li>创建新的虚拟屏幕</li>
<li>系统设置，为外接屏幕设置为“镜像”虚拟屏幕</li>
<li>在软件菜单中调整虚拟屏幕的分辨率</li>
<li>*高刷屏设置最高刷新率（之前没有）</li>
</ol>
<p><img src="/post/m-series-mac-2k-HiDPI/mac-virtual.png" alt="mac-virtual"></p>
<p>可参考该教程：<a href="https://zzbloc.top/archives/turn-on-hidpi-for-macbook">解决2K 显示器的尴尬！为MacBook 开启HiDPI（新方法支持M1）-zz的秘密基地</a></p>
<p>但是我并没有找到教程中“BetterDisplay，真正通过修改配置的方式打开原生的HiDPI”的方式，可能是<code>BetterDummy</code>才有功能。</p>
<p>缺点：</p>
<ol>
<li>造成输入法卡顿，重启相关软件或者输入法可解决问题</li>
<li>偶现重置外接屏幕壁纸问题，因为虚拟屏幕的壁纸无法设置</li>
<li>合上mac盖子，外接屏幕的软件会自动移动内置屏幕，或者反之，可以在合盖子前拔外接屏的屏幕线</li>
<li>第三方软件和系统设置都可以设置分辨率，会造成外接屏幕实际使用时分辨率混乱问题</li>
</ol>
]]></content>
      <categories>
        <category>geek</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>缩放倍率设置达到最佳视觉效果</title>
    <url>//post/optimal-visual-effect-scaling/</url>
    <content><![CDATA[<ul>
<li>计算dpi/ppi</li>
<li>最佳缩放倍率</li>
</ul>
<span id="more"></span>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>1.<strong>Retina视网膜屏幕概念</strong>：</p>
<ul>
<li>标准5.0视力、眼睛距离屏幕30cm，可清晰看到300ppi的像素点边界。</li>
<li>手机屏幕为例，其像素密度为300ppi。</li>
<li>由于Mac和大屏显示器使用时距离更远，所需ppi分别降低为172和115。</li>
</ul>
<ol start="2">
<li><p><strong>Windows下的缩放档位与dpi对应关系</strong>：</p>
<ul>
<li>100％缩放 = 96dpi</li>
<li>125％缩放 = 120dpi</li>
<li>150％缩放 = 144dpi</li>
<li>175％缩放 = 168dpi</li>
<li>200％缩放 = 192dpi</li>
</ul>
</li>
<li><p><strong>如何选择合适的缩放设置</strong>：</p>
<ul>
<li>使用公式：<code>dpi/ppi = 放大倍率</code>。倍率越接近1，显示效果越接近设计师意图。</li>
<li>例如，对于ppi为163的27寸4K显示器，选择175％缩放（168dpi）可得到接近理想的显示效果。</li>
</ul>
</li>
<li><p><strong>实际应用</strong>：</p>
<ul>
<li>可根据显示器的ppi值和上述公式来调整Windows缩放设置，确保内容显示尺寸与设计师意图一致。</li>
</ul>
</li>
<li><p><strong>计算对角线的像素数</strong>（横向像素数和纵向像素数分别是屏幕分辨率的宽和高的像素值）:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.463ex;" xmlns="http://www.w3.org/2000/svg" width="46.265ex" height="2.851ex" role="img" focusable="false" viewBox="0 -1055.2 20449.1 1260"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">角</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">线</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">像</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">素</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(6277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(7333.6,0)"><g transform="translate(1020,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">横</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">像</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">素</text></g><g data-mml-node="msup" transform="translate(4000,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mn" transform="translate(1033,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5658.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6659,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">纵</text></g><g data-mml-node="mi" transform="translate(7659,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(8659,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">像</text></g><g data-mml-node="mi" transform="translate(9659,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">素</text></g><g data-mml-node="msup" transform="translate(10659,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mn" transform="translate(1033,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,145.2)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path></g><rect width="12095.6" height="60" x="1020" y="935.2"></rect></g></g></g></svg></mjx-container></p>
</li>
<li><p><strong>计算ppi（或dpi）</strong>:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="29.522ex" height="5.398ex" role="img" focusable="false" viewBox="0 -1426 13048.6 2386"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1006,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1351,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1740,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(2740,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3260,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(3763,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4108,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4774.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5830.6,0)"><g data-mml-node="mrow" transform="translate(609,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">角</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">线</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">像</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">素</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">屏</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">幕</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尺</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">寸</text></g><g data-mml-node="mo" transform="translate(4000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">英</text></g><g data-mml-node="mi" transform="translate(5389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">寸</text></g><g data-mml-node="mo" transform="translate(6389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="6978" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
</li>
</ol>
<p>以一个常见的例子为示范：假设一个屏幕分辨率为1920x1080，对角线尺寸为15.6英寸的屏幕，对角线像素数，ppi分别为：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="76.648ex" height="3.091ex" role="img" focusable="false" viewBox="0 -1166.2 33878.2 1366.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">角</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">线</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">像</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">素</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(6277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(7333.6,0)"><g transform="translate(1020,0)"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path></g><g data-mml-node="mn" transform="translate(2033,393.1) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2658.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(3659,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path></g><g data-mml-node="mn" transform="translate(2033,393.1) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,256.2)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path></g><rect width="6095.6" height="60" x="1020" y="1046.2"></rect></g><g data-mml-node="mo" transform="translate(14726.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(15782.7,0)"><g transform="translate(853,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3000,0)"></path></g><g data-mml-node="mo" transform="translate(3722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4722.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3000,0)"></path></g></g><g data-mml-node="mo" transform="translate(0,112.7)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="8222.4" height="60" x="853" y="852.7"></rect></g><g data-mml-node="mo" transform="translate(25135.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(26191.7,0)"><g transform="translate(853,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3000,0)"></path></g></g><g data-mml-node="mo" transform="translate(0,142.7)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="3500" height="60" x="853" y="882.7"></rect></g><g data-mml-node="mo" transform="translate(30822.4,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(31878.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1500,0)"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="18.005ex" height="4.638ex" role="img" focusable="false" viewBox="0 -1342 7958.1 2050"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1006,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1628.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2684.6,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1500,0)"></path></g><g data-mml-node="mn" transform="translate(331,-686)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1278,0)"></path></g><rect width="2200" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5402.3,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(6458.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container><br>所以，这个15.6英寸的屏幕的像素密度约为141ppi。</p>
<h1 id="最佳的视觉体验"><a href="#最佳的视觉体验" class="headerlink" title="最佳的视觉体验"></a>最佳的视觉体验</h1><p>对于不<strong>同的屏幕分辨率</strong>，选择<strong>显示器尺寸</strong>和<strong>缩放倍率</strong>是为了确保用户界面元素和文字保持合适的大小，以提供<strong>最佳的视觉体验</strong>。以下是对于1080p、2k、4k屏幕在不同显示器尺寸下的一些建议：</p>
<ol>
<li><p><strong>1080p (1920x1080) 屏幕</strong>:</p>
<ul>
<li>常见的显示器尺寸: 21.5至24寸。</li>
<li>通常不需要缩放，但如果需要，则推荐100%。</li>
<li>逻辑分辨率: 1920x1080</li>
</ul>
</li>
<li><p><strong>2K (2560x1440) 屏幕</strong>:</p>
<ul>
<li>常见的显示器尺寸: 24至27寸。</li>
<li>缩放建议: 大多数情况下可以使用100%缩放，但对于某些用户可能需要125%缩放。</li>
<li>逻辑分辨率: <ul>
<li>100%缩放: 2560x1440</li>
<li>125%缩放: 2048x1152</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>4K (3840x2160) 屏幕</strong>:</p>
<ul>
<li>常见的显示器尺寸: 27至32寸。</li>
<li>缩放建议: 由于4K分辨率的物理像素非常多，建议的缩放范围是150%至200%。</li>
<li>逻辑分辨率:<ul>
<li>150%缩放: 2560x1440</li>
<li>200%缩放: 1920x1080</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结：根据显示器尺寸和分辨率，可以选择适当的缩放倍率，确保内容在屏幕上的大小适中，且清晰易读。调整缩放倍率后，逻辑分辨率也会相应地改变。逻辑分辨率决定了操作系统和应用程序渲染内容的大小。</p>
<ul>
<li>接近110%缩放的一个选项可能是2384x1341，这个比2327x1309稍大一些，但应该能提供相似的视觉体验。</li>
<li>接近120%缩放的一个选项可能是2368x1332或者2340x1314，这些比2133x1200稍大，但也是相近的选项。</li>
</ul>
]]></content>
      <categories>
        <category>geek</category>
      </categories>
  </entry>
  <entry>
    <title>原型链是如何贯穿js的</title>
    <url>//post/prototype/</url>
    <content><![CDATA[<blockquote>
<p>原型链是js的大动脉。</p>
</blockquote>
<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p>js的原型链难以避免要牵扯到面向对象，这里我们先简单说说原型还有原型链。之后我们说到面向对象的演变过程，会再次涉及到原型链，还有更多的东西。相信看完的读者会对JavaScript会有更深的认识。</p>
<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>本小节意在介绍js中几位朋友，读者只需要记住有它们的存在就行了，毕竟这几位朋友性格有点隐匿。</p>
<p>首先，我们要明白，声明一个对象，哪怕是空属性，js也生成一些内置的属性和方法。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 两种方法声明对象 */</span>
<span class="token comment">// 对象直接量</span>
<span class="token keyword">var</span> obj_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// new关键字声明对象</span>
<span class="token keyword">var</span> obj_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在Object的原型对象添加属性</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>attr <span class="token operator">=</span> <span class="token string">'myarr'</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125;</span>

<span class="token comment">// js中的恒等符号对函数来说只比较引用</span>
<span class="token comment">// obj_1.valuOf函数来源于Object.valueOf</span>
<span class="token comment">// 更准确来说是Object.protoype.valueOf</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_1<span class="token punctuation">.</span>valueOf <span class="token operator">===</span> Object<span class="token punctuation">.</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// obj_1并未声明attr属性，通过Object.prototype继承得到attr属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_1<span class="token punctuation">.</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// myarr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p><img src="/post/prototype/obj_attr.jpg" alt="空对象属性的prototype"></p>
<p align="center">*firefox控制台中空对象仍然有`prototype`属性*</p>

<p>  误区：每个浏览器的控制台输出都不太一样，Chrome和Edge并不显示<code>prototype</code>属性，因为我们并没有给obj_1的<code>prototype</code>属性定义任何属性和方法。<br>  由于历代浏览器的更新和ECMAScript的修正，有时难以体现<code>prototype</code>和<code>__proto__</code>的存在，但我们的js代码能体现出它们的确是真实存在的。</p>
<p><code>prototype</code>在这里称之为<code>obj_1</code>的原型对象，通过对象直接量和<code>new</code>关键字声明的对象都具有原型对象，继承自<code>Object.prototype</code>；几乎每个对象都有其原型对象，null是特例。</p>
<h2 id="双对象实现原型继承"><a href="#双对象实现原型继承" class="headerlink" title="双对象实现原型继承"></a>双对象实现原型继承</h2><p>需要原型对象是为了实现继承，但有了原型对象我们还无法把<code>obj_1</code>与<code>Object.prototype</code>链接起来。<br>我们还需要另一个对象：<code>__proto__</code>，该属性能指向构造函数的原形属性<code>constructor</code>。<br>一些老版本浏览器不识别，有些无法识别其内部信息，但不影响程序的正常运行。</p>
<p><img src="/post/prototype/obj_1__proto__.jpg" alt="obj_1的__proto__"></p>
<p align="center">*`obj_1`的`__proto__`对象, 该属性下又有`__proto__`和`constructor`属性*</p>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj_1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype  <span class="token comment">// true</span>
obj_1<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里有三个概念先行抛出</p>
<ul>
<li>继承：继承使子类（超类）可拥有父类的属性和方法，子类也可添加属性和方法</li>
<li>父类：提供属性和方法被子类继承</li>
<li>子类：被父类继承的对象，可调用父类的属性和方法，也能定义属性和方法（父类无法调用）</li>
</ul>
<p>通过<code>Object.prototype.attr</code>与<code>obj_1.attr</code>，我们可以看出 <code>obj_1</code> (子类) 继承了 <code>Object</code> (父类)的原型对象的<code>attr</code>属性。<br>正是因为<code>obj_1</code>的<code>__proto__</code>指向<code>Object.prototype</code>，obj_1继承了父类原型对象，使之拥有了<code>attr</code>属性。<br>而子类的<code>__proto__.constructor</code>直接指向父类。</p>
<blockquote>
<p><strong>原型继承：每声明一个对象，其本身拥有用两个对象：原型对象(<code>prototype</code>)，与<code>__proto__</code>对象，原型对象即可供自身使用，子类继承后也可调用；自身的<code>__proto__</code>对象指向父类的原型对象，其<code>constructor</code>属性指向父类的构造函数</strong>。通过原型对象的方法实现继承，叫原型继承。</p>
</blockquote>
<h2 id="双对象与原型链"><a href="#双对象与原型链" class="headerlink" title="双对象与原型链"></a>双对象与原型链</h2><p>综合以上，我们知道了使用原型对象<code>prototype</code>和<code>__proto__</code>对象可以实现继承的功能。那么我们是不是可以一直继承下去呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Engineer</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Engineer</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'Chris Chen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Engineer (子类)继承 People (父类)</span>

<span class="token keyword">function</span> <span class="token function">Programmer</span><span class="token punctuation">(</span><span class="token parameter">skill</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">showMsg</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'Hi, my name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', I am a '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">' engineer, I can write '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">+</span> <span class="token string">' code!'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Programmer</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token string">'front-end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Programmer (子类) 继承 Engineer (父类)</span>

<span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Programmer</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object &#123; skill: "js", showMsg: showMsg() &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi, my name is Chris Chen, I am a front-end engineer, I can write js code!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码看完，我们从子类开始解释，也就是从下往上的顺序：</p>
<ol>
<li><code>me</code>是<code>Programmer</code>的实例化对象</li>
<li><code>Programmer</code>的原型指向<code>Engineer</code>的实例对象</li>
<li><code>Engineer</code>的原型指向<code>People</code>的实例对象</li>
</ol>
<p>我们再来一张图说明其关系</p>
<p><img src="/post/prototype/proto_egg.jpg" alt="proto_egg"><br><em>这个.. 一盘煎蛋？？</em></p>
<p>好伐，煎蛋就煎蛋，来，我们继续。</p>
<p>请注意重点：**<code>Programmer</code>并无定义<code>type</code>, <code>name</code>属性，<code>Programmer</code>的<code>showMsg</code>中能显示<code>this.name</code> <code>this.type</code>分别来源于<code>Engineer</code>和<code>Programmer</code>的原型对象。**<br>很巧妙的一种属性搜索机制，<strong>自身的构造函数没有该属性，就从自身的原型对象中找，如果父类的原型对象没有，那么继续往父类的父类原型对象找，找到了就赋值；或直到没有父类，返回<code>undefined</code>；</strong>属性如此，方法也是同样的赋值机制。</p>
<p>说到底属性搜索机制就是原型链的一种具体体现，我们再上一张图。</p>
<p><img src="/post/prototype/proto_link.jpg" alt="proto_link"></p>
<p>所以原型链的关键字是<strong>继承</strong>和<strong>原型对象</strong>！！</p>
<blockquote>
<p><strong>原型链：使用<code>prototype</code>和<code>_proto_</code>两个对象实现继承，由于是基于原型对象实现调用链，又称之为原型链。</strong></p>
</blockquote>
<p>关于原型链的第一步介绍就到这里，接下来我们从头开始，说说面向对象。</p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>首先我们先来概述面向过程编程（opp）与面向对象（oop）。这是JS的两种编程范式，也可以理解为编程思想。<br>顾名思义，两者的重心不同。下面我们使用两种方法创建dom并挂载于页面。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 面向过程 */</span>
<span class="token comment">// 1. 定义dom</span>
<span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 设置dom属性</span>
dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'面向过程'</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'opp'</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">'color: skyblue'</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 挂载dmo</span>
<span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 面向对象 */</span>
<span class="token comment">// 1. 定义构造函数</span>
<span class="token keyword">function</span> <span class="token function">CreateElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> innerText<span class="token punctuation">,</span> style</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerText<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 2. 定义原型对象上的方法</span>
<span class="token class-name">CreateElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 实例化对象</span>
<span class="token keyword">var</span> innerBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop'</span><span class="token punctuation">,</span> <span class="token string">'面向对象'</span><span class="token punctuation">,</span> <span class="token string">'color: pink;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用原型方法</span>
innerBox<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>面向过程比较流水线，更注重程序的实现过程，面向对象的程序由一个又一个的单位————对象组成，不关心对象的内部属性和方法，只需实例化，调用方法即可使用。</p>
</blockquote>
<p>或许上面的例子，还不是很有力得体现出两者的区别，那么如果现在，需要挂载多个元素呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 面向过程 */</span>
<span class="token comment">// var dom_1 = document.createElement('div');</span>
<span class="token comment">// dom_1.innerHTML = '面向过程_1';</span>
<span class="token comment">// dom_1.id = 'opp-1';</span>
<span class="token comment">// dom_1.style = 'color: skyblue';</span>

<span class="token comment">// var dom_2 = document.createElement('div');</span>
<span class="token comment">// dom_2.innerHTML = '面向过程_2';</span>
<span class="token comment">// dom_2.id = 'opp-2';</span>
<span class="token comment">// dom_2.style = 'color: skyblue;';</span>

<span class="token comment">// var container = document.getElementById('container');</span>
<span class="token comment">// container.appendChild(dom_1);</span>
<span class="token comment">// container.appendChild(dom_2);</span>

<span class="token comment">/* 这种方法傻的可爱，我们包装成函数吧 */</span>

<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> innerText<span class="token punctuation">,</span> style</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerText<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
  <span class="token keyword">return</span> dom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> box_1 <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-1'</span><span class="token punctuation">,</span> <span class="token string">'面向过程_1'</span><span class="token punctuation">,</span> <span class="token string">'color: skyblue;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> box_2 <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-2'</span><span class="token punctuation">,</span> <span class="token string">'面向过程_2'</span><span class="token punctuation">,</span> <span class="token string">'color: skyblue;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>box_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>box_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 面向对象 */</span>
<span class="token keyword">function</span> <span class="token function">CreateElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> innerText<span class="token punctuation">,</span> style</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerText<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">CreateElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> innerBox_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-1'</span><span class="token punctuation">,</span> <span class="token string">'面向对象_1'</span><span class="token punctuation">,</span> <span class="token string">'color: pink;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
innerBox_1<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里只需再实例化一个对象调用render方法即可</span>
<span class="token keyword">var</span> innerBox_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-2'</span><span class="token punctuation">,</span> <span class="token string">'面向对象_2'</span><span class="token punctuation">,</span> <span class="token string">'color: pink;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
innerBox_2<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重复调用同样的方法，面向过程如果不包装一个函数，显得代码很冗余且愚蠢，而面向对象只需再次实例化即可。<br>这里也提醒我们平时写代码的时候要考虑复用性。</p>
<p>好的，那我们现在需要给dom元素添加一些交互功能，又要怎么做？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 面向过程 */</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> innerText<span class="token punctuation">,</span> style<span class="token punctuation">,</span> event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerText<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
  <span class="token comment">// 直接修改内部函数</span>
  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> box_1 <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-1'</span><span class="token punctuation">,</span> <span class="token string">'面向过程_1'</span><span class="token punctuation">,</span> <span class="token string">'color: skyblue;'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 过于死板，就算没有传参dom.addEventListener也会调用两次</span>
<span class="token keyword">var</span> box_2 <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-2'</span><span class="token punctuation">,</span> <span class="token string">'面向过程_2'</span><span class="token punctuation">,</span> <span class="token string">'color: skyblue;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>box_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>box_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 面向对象 */</span>
<span class="token keyword">function</span> <span class="token function">CreateElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> innerText<span class="token punctuation">,</span> style</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerText<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  dom<span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">CreateElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 在原型对象上添加方法</span>
  <span class="token function-variable function">addMethod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> innerBox_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-1'</span><span class="token punctuation">,</span> <span class="token string">'面向对象_1'</span><span class="token punctuation">,</span> <span class="token string">'color: pink;'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
innerBox_1<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> innerBox_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'oop-2'</span><span class="token punctuation">,</span> <span class="token string">'面向对象_2'</span><span class="token punctuation">,</span> <span class="token string">'color: pink;'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
innerBox_2<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据场景需求决定是否调用addMethod方法</span>
innerBox_2<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从这里可以我们看出两者的扩展方法截然不同，面向过程模式需要直接在函数中修改，而面向对像在原型对象上直接追加方法。</p>
<blockquote>
<p>面向对象比面向过程有更高的复用性和扩展性。</p>
</blockquote>
<p>PS：面向过程也并非一无是处，比面向对象更直观化，也更理解。若不需要考虑太多的因素，使用面向过程开发反而效率会更快。</p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>把大象关进冰箱需要几步在下并不清楚。不过要想进行面向对象开发，第一步是先创建一个对象，js中有6种方法可创建对象：</p>
<ol>
<li>new 操作符</li>
<li>字面量</li>
<li>工厂模式</li>
<li>构造函数</li>
<li>原型模式</li>
<li>混合模式（构造+原型）</li>
</ol>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>前两种方法在开头已使用，这里不再复述。如果要创建多个相同的对象，使用前两种方法，会产生大量重复的代码，而工厂模式解决了这个问题..</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">factoryMode</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">' years old!'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> guest <span class="token operator">=</span> <span class="token function">factoryMode</span><span class="token punctuation">(</span><span class="token string">'Gentleman'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Chris <span class="token operator">=</span> <span class="token function">factoryMode</span><span class="token punctuation">(</span><span class="token string">'Chris'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Gentleman has 25 years old!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Chris has 20 years old!</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ture</span>
<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有点赞哦，这样<strong>重复实例化多个对象</strong>也不怕了，<strong>对象识别</strong>问题仍然没解决</p>
<p>PS:<code>new Object()</code>已决定了工厂模式的实例是由<code>Object</code>实例化而来的，其对象类型是<code>Object</code>，<code>Date</code> <code>Array</code>有对应的对象类型，这里读者可以试试<code>new Array instanceof Array</code>等原生数据类型。</p>
<blockquote>
<p>工厂模式是面向对象中常见的一种设计模式，是一个可以重复实例化多个对象的函数，但识别对象无能为力。</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>我们可以把工厂模式修改一下，就可以写出一个构造函数..</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ConstructorMode</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">' years old!'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> guest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorMode</span><span class="token punctuation">(</span><span class="token string">'Gentleman'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Chris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorMode</span><span class="token punctuation">(</span><span class="token string">'Chris'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Gentleman has 25 years old!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Chris has 20 years old!</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest <span class="token keyword">instanceof</span> <span class="token class-name">ConstructorMode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ConstructorMode <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有几个地方不太一样：</p>
<ol>
<li>没有显示创建对象</li>
<li>属性&#x2F;方法赋值给<code>this</code></li>
<li>使用<code>new</code>关键字调用</li>
<li>无<code>return</code></li>
</ol>
<p>可以看出实现了跟工厂模式一样的功能，那么什么是构造函数呢？</p>
<ul>
<li>构造函数也是一个函数，跟工厂模式一样可重复实例化对象。为了跟普通函数区分，函数名首字母一般是大写的。</li>
<li>使用该函数时需要使用<code>new</code>关键字实例化；不使用<code>new</code>实例化，该构造函数表现如同普通的函数。</li>
<li>虽然没有显示创建对象，但在<code>new</code>实例化时，后台执行了<code>new Object()</code></li>
<li>使用<code>this</code>是因为，构造函数的作用域指向实例化对象，即：两次实例化，<code>ConstructorMode</code>中的<code>this</code>分别指向<code>Guest</code>, <code>Chris</code>。</li>
</ul>
<p>通过上面的<code>instanceof</code>判断，我们能识别出<code>guest</code>是由<code>ConstructoreMode</code>实例化的，与此同时 <code>guest</code> 也是 <code>Object</code> 的实例对象。<br>构造函数也有其弊端，声明在构造函数内的属性叫“构造属性”，问题就在于：构造属性若是引用类型（以函数为例），实例化后的函数执行的动作虽然是相同的，但引用地址不同，我们并不需要两份同样的函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris<span class="token punctuation">.</span>say <span class="token operator">==</span> guest<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>构造函数模式：构造函数是一个需要实例化调用的函数，内部作用域指向实例对象，无须return。构造函数模式，也可实例化大量重复对象，也可识别实例化后的对象是由哪个构造函数实例化而来。其缺点是：若在构造属性中声明函数，实例化后的各个对象引用地址保持独立。</p>
</blockquote>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式靠原型对象发挥作用，<strong>原型对象</strong>开头已有介绍。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 直接在原型对象声明，直面量形式</span>
<span class="token class-name">PrototypeMdoe</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">'prototype'</span><span class="token punctuation">;</span>
<span class="token class-name">PrototypeMdoe</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">do</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'we do the something same, '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> guest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Chris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'guest'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// we do the something same, guest.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'Chris'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// we do the something same, Chris.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span>do <span class="token operator">===</span> Chris<span class="token punctuation">.</span>do<span class="token punctuation">)</span> <span class="token comment">// true，相同的引用指针</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'guest'</span><span class="token punctuation">)</span> <span class="token operator">===</span> Chris<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'Chirs'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false， 返回值不相等</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">Chris</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 指向相同的原型对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实例化对象<code>do</code>方法引用指针是相同的，所以如果是需要给所有实例化对象<strong>共享</strong>的方法，可在原型上直接声明。<code>guest</code>和<code>Chris</code>都由<strong>同一个构造函数的实例化</strong>，<strong>原型对象的指针地址相同</strong>。</p>
<p>也可以使用对象字面量的方法，两者有点的区别：对象字面量声明的原型<code>constructor</code>会指向<code>Object</code>，我们也可以手动设置。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 对象字面量，原型赋值为对象</span>
<span class="token class-name">PrototypeMdoe</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 手动设置构造函数指针</span>
  <span class="token comment">// constructor: PrototypeMdoe,</span>
  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'I;m running!'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 打开constructor的注释对比运行结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  proto<span class="token punctuation">.</span>constructor <span class="token operator">===</span> PrototypeMdoe<span class="token punctuation">,</span>
  proto<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>原型模式：<strong>共享</strong>是原型对象的特点，所有声明在原型上的属性和方法都会<strong>被所有实例化对象继承</strong>，且指向同一个引用地址。</p>
</blockquote>
<p>原型属性是基本类型的数据，共享很方便；如果是<strong>引用类型</strong>的数据，共享将带来麻烦。由于<strong>引用地址相同</strong>，<strong>更改其中一个</strong>实例的原型属性，其他实例的原型也<strong>随之改变</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span class="token class-name">PrototypeMdoe</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> proto_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> proto_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeMdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proto_1<span class="token punctuation">.</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,5]</span>
proto_1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// [2,3,4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proto_2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [1,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>Object.definedPeroperty</strong>：ES5语法，可定义新属性或修改现有属性并返回改对象；第三个参数为属性描述符，能精确添加或修改对象的属性：枚举性、属性值、可写性、存取设置。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">attr</span><span class="token operator">:</span> <span class="token string">'obj'</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Obj</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">' run!'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 使用Object.definedPeroperty设置constructor的特性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Obj</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 设置为ture下面的设置才能生效</span>
  <span class="token comment">// enumerable: false,   // 枚举性</span>
  <span class="token comment">// writable: false,     // 可写性</span>
  <span class="token comment">// get: undefined,      // 取值器</span>
  <span class="token comment">// set: undefined,      // 设置器</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Obj              <span class="token comment">// 属性值</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>isPrototypeOf</code>函数可以判断<strong>原型对象</strong>是否为某个<strong>实例</strong>的原型对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token class-name">PrototypeMdoe</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>proto_1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// true</span>
  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>proto_1<span class="token punctuation">)</span>          <span class="token comment">// false</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>混合模式是组合构造函数和原型模式使用，这是最常用的一种设计模式了。</p>
<p>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。<br>所以每个实例都会有自己的一份实例属性的副本，但同时共享着对方法的引用。<br>最大限度的节省了内存。同时支持向构造函数传递参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateObject</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">CreateObject</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">' years old!'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> guest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateObject</span><span class="token punctuation">(</span><span class="token string">'Gentleman'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Chris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateObject</span><span class="token punctuation">(</span><span class="token string">'Chris'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Gentleman has 25 years old!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Chris has 20 years old!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>hasOwnProperty</code>可检测一个属性是否为实例属性。<br>而<code>in</code>可判断属性是否存在本对象中，包括实例属性或者原型属性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> guest<span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say'</span> <span class="token keyword">in</span> guest<span class="token punctuation">)</span>   <span class="token comment">// true</span>

<span class="token comment">// 判断是否为原型属性</span>
<span class="token keyword">function</span> <span class="token function">isProperty</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">debugger</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  property <span class="token keyword">in</span> object<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isProperty</span><span class="token punctuation">(</span>guest<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isProperty</span><span class="token punctuation">(</span>guest<span class="token punctuation">,</span> <span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建对象的六种方法就到这里了，另外还有<strong>动态原型</strong>、<strong>寄生构造</strong>、<strong>稳妥构造函数</strong>。 这三种模式都是基于混合模式的改良，感兴趣的可以随便看看：<a id="create-object" class="btn">点我查看</a></p>
<div id="other-create" style="display:none;">
  **动态原型**
  原型模式中，不管我们是否调用原型的方法，都会初始化原型中的方法，并且声明一个构造函数时，构造函数和原型对象是分开声明的，略显怪异。我们可以使用动态原型模式，把构造函数和原型对象封装到一起。

  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateObject</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token comment">// 动态创建原型属性，仅在第一次调用时初始化</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">CreateObject</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">' years old!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> guest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateObject</span><span class="token punctuation">(</span><span class="token string">'Gentleman'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Chris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateObject</span><span class="token punctuation">(</span><span class="token string">'Chris'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guest<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Gentleman has 25 years old!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chris<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Chris has 20 years old!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <h4>寄生构造</h4>
  <h4>稳妥构造函数</h4>
</div>

<style>
#other-create {
  border: 5px solid #aaa;
}
</style>

<script>
;(function() {
  var showOtherCreate = true;
  var creatObject = document.getElementById('create-object');

  creatObject.addEventListener('click', function() {
    var otherCreate = document.getElementById('other-create');
    if (showOtherCreate) {
      otherCreate.style.display = 'block';
      creatObject.innerText = '不想看了';
    } else {
      otherCreate.style.display = 'none';
      creatObject.innerText = '点我查看';
    }
    showOtherCreate = !showOtherCreate;
  })
})();
</script>


<h3 id="动态原型"><a href="#动态原型" class="headerlink" title="动态原型"></a>动态原型</h3><h3 id="寄生构造"><a href="#寄生构造" class="headerlink" title="寄生构造"></a>寄生构造</h3><p><strong>未完待续</strong></p>
]]></content>
  </entry>
  <entry>
    <title>跨域</title>
    <url>//post/cross-domain/</url>
    <content><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>源：源由协议，域名和端口号组成，若url地址的协议、域名和端口号均相同则属于同源。</p>
<p>同源策略：浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对象自资源。其阻止的是数据的接受而不是请求的发送</p>
<p>不受同源策略限制：<br>页面中的链接，重定向以及表单提交；<br>可以引入跨域资源，但js不能读写加载内容。 如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;iframe&gt;</code>等。</p>
<h3 id="跨域：受同源策略的限制，不同源的脚本不能操作其他源下面的对象，想操作另一个源下面的对象就是跨域。"><a href="#跨域：受同源策略的限制，不同源的脚本不能操作其他源下面的对象，想操作另一个源下面的对象就是跨域。" class="headerlink" title="跨域：受同源策略的限制，不同源的脚本不能操作其他源下面的对象，想操作另一个源下面的对象就是跨域。"></a>跨域：受同源策略的限制，不同源的脚本不能操作其他源下面的对象，想操作另一个源下面的对象就是跨域。</h3><span id="more"></span>

<p>实现方式：</p>
<ul>
<li>document.domain</li>
<li>JSONP</li>
<li>CORS</li>
<li>window.name</li>
<li>postMessage H5</li>
</ul>
<p>需要跨域的场景：</p>
<ol>
<li>上传图片、文件</li>
<li>富文本编辑器</li>
<li>页面请求第三方接口</li>
</ol>
<p><strong>降域 document.domain</strong></p>
<p>将两个不同源的域名document.domain设置为同一个即可；存在安全性问题，一个网站被攻击，另一个也有安全漏洞，只适用于cookie和iframe窗口。</p>
<p><strong>跨域资源共享 CORS</strong></p>
<p>设置服务器响应头 Access-Control-Allow-Origin 指定允许跨域的源，实现浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p><strong>JSON with Padding JSONP</strong></p>
<p>动态插入script标签，通过script标签引入一个js文件， 在服务端输出JSON数据，客户端执行回调函数，从而解决了跨域的数据请求。 jsonp+padding–将json填充到一个盒子里，（使用回调函数获取json数据）；兼容性好，简单易用，支持浏览器与服务器双向通信。当然也有一些缺点：权限漏洞，只能发送GET请求，需要防止XSS。</p>
<p><strong>window.name</strong></p>
<p>一个窗口的声明周期内，窗口载入的所有页面都是共享一个name属性的，每个页面都对window.name有读写权限，其属性持久存在，不因新页面载入而进行充值。</p>
<p>在原页面中使用一个隐藏的iframe充当中间人角色，由iframe去获取数据，src设为目标页面，再把src设置跟原页面同一个域，否则受到同源策略的限制。原页面再去得到iframe获取到的数据，iframe的window.name。</p>
<p><strong>postMessage</strong></p>
<p>H5提供的一个API</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>vue技巧篇：渲染函数 &amp; JSX</title>
    <url>//post/render-JSX/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方文档介绍的<a href="https://cn.vuejs.org/v2/guide/render-function.html">渲染函数</a>似乎有点太过偏重表现而放轻原因。已经看过这部分好几次，还是有点不知所以然。这也不是第一次看不明白文档的介绍了，还是需要自己整理下知识点。所以，这里的内容是对文档做降级处理，好让这一块知识点更容易理解一点。文档有的东西，这里不会再重复。</p>
<p>建议阅读顺序：先粗略浏览下官方文档；精读这篇文章同时结合文档。</p>
<span id="more"></span>

<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>先讨论render，再讨论JSX。因为JSX是为了render的编写更加方便。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><a href="https://cn.vuejs.org/v2/guide/render-function.html#%E5%9F%BA%E7%A1%80">渲染函数 &amp; JSX - 基础</a> 这一小节官网介绍的是render的使用的场景。还举了个例子，真的不尽人意，起码看完我没能回答自己，render是啥。</p>
<p><a href="https://cn.vuejs.org/v2/api/#render">render</a>是一个实例方法，跟字符串模板&#x2F;template选项一样可以创建DOM。比起字符串模板，render的强大之处在于：<strong>字符串模板创建的DOM是静态的；render可以借助js的能力动态创建DOM。</strong>（不要忘了render 本质上是一个被vue框架封装的js函数）</p>
<p>静态&#x2F;动态DOM如何理解？template不是也可以使用<code>v-if</code> <code>v-show</code> <code>v-for</code>之类的指令吗？<br>虽然template可以使用以上指定，对DOM进行修改，可是其无法改变HTML tag。以上的指令只是切换&#x2F;移除&#x2F;新增固定的HTML tag罢了。（举个反例，随机生成HTML tag 试试？）</p>
<p>官网基础这一小节，我们只需知道render是可以使用js能力创建HTML，是template的升级版就够了。</p>
<p>接下来的三个小节都是在讲如何使用render，我们先从<strong>虚拟DOM</strong>这个知识点入手。【基础】小节的例子，也会相应的介绍。</p>
<ul>
<li>[节点 树以及虚拟 DOM](<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E8%8A%82%E7%82%B9%E3%80%81%E6%A0%91%E4%BB%A5%E5%8F%8A%E8%99%9A%E6%8B%9F">https://cn.vuejs.org/v2/guide/render-function.html#节点、树以及虚拟</a> DOM)</li>
<li><a href="https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0">createElement 参数</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/render-function.html#%E4%BD%BF%E7%94%A8-JavaScript-%E4%BB%A3%E6%9B%BF%E6%A8%A1%E6%9D%BF%E5%8A%9F%E8%83%BD">使用 JavaScript 代替模板功能</a></li>
</ul>
<h3 id="节点、树以及虚拟-DOM"><a href="#节点、树以及虚拟-DOM" class="headerlink" title="节点、树以及虚拟 DOM"></a>节点、树以及虚拟 DOM</h3><p>HTML DOM 节点的知识点相信基础扎实的你烂熟于心了，也看过文档复习了，这里不重复。</p>
<blockquote>
<p>虚拟节点（virtual node）：描述 DOM 节点的JS对象，该对象保存着节点的相应信息。别名 <strong>VNode</strong>。</p>
</blockquote>
<p>那 DOM 是由节点组成，虚拟DOM的概念也自然很好理解：由Vnode组成的节点树结构。</p>
<p>而<code>render</code>返回的值就是一个虚拟DOM，虚拟DOM最终也会被转换为真实的DOM挂载在页面上。</p>
<h3 id="最简单的使用方式"><a href="#最简单的使用方式" class="headerlink" title="最简单的使用方式"></a>最简单的使用方式</h3><p>我学东西喜欢由简单到复杂，如果文档一开始就写个<code>Hello World</code>该多好。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-render<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>skill-render<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我们用<code>template</code>，<code>render</code>分别创建以上相同的dom。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// skill-template.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-render<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123;$options.name&#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'skill-render'</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>自行与下面的版本找不同。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// skill-render.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"skill-render"</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
      <span class="token string">"div"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">"skill-render"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>终于我们知识点足够使用最简单的render，可是这里还是要说明下。<code>render</code>返回的是<code>createElement</code>函数运行后的返回值。所以其实是**<code>createElement</code>有能力创建虚拟DOM，而<code>render</code>依赖<code>createElement</code>的能力渲染为HTML**。两者的作用很符合函数名（笑）。</p>
<p>你已经知道<code>createElement</code>可以创建虚拟DOM，现在可以好好看看 <a href="https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0">createElement 参数</a>了。</p>
<h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><p>到现在，我们才要开始讲文档的基础示例，说实话，这个示例真的挺基础。<br>文档要解决的问题其实就是要设计一个<code>anchored-heading</code>组件。</p>
<ul>
<li>这个组件里面的HTML tag（<code>h1~h6</code>）可以使用prop动态决定，并且标题内部使用了插槽。</li>
<li>而使用<code>template</code>方案，代码冗长又存在重复问题。</li>
<li>所以使用了<code>render</code>函数<strong>动态创建</strong>HTML tag。</li>
<li>在基础小节的最后还进行了一波劝退：**深入渲染函数之前推荐阅读<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">实例属性 API</a>**。</li>
</ul>
<h3 id="深入使用"><a href="#深入使用" class="headerlink" title="深入使用"></a>深入使用</h3><blockquote>
<p>只要在原生的 JavaScript 中可以轻松完成的操作，Vue 的渲染函数就不会提供专有的替代方法。</p>
</blockquote>
<p>文档也写得很详细了，深入底层的代价可以更好地控制交互细节。</p>
<p>这里略过不重复。</p>
<h3 id="render-h-gt-h-App"><a href="#render-h-gt-h-App" class="headerlink" title="render: h =&gt; h(App)"></a><code>render: h =&gt; h(App)</code></h3><p>当你认认真真把关于渲染函数的资料看完，你也自然理解了<code>main.js</code>中，<code>render</code>为什么这么写。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> h <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>render函数并不复杂，理解其需要返回虚拟DOM，最后会挂载在页面上就可以了。编写会比较繁琐，具体的体现就是vue提供的某些指令需要自己实现。用途会比较少，不过有助于我们研究vue，如果你想之后阅读vue源码的话。</p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>vue为了<code>render</code>编写更加方便，<code>createElement</code>可以使用JSX替换之。vue也支持JSX语法，不过需要一个<a href="https://github.com/vuejs/jsx">Babel 插件</a>支持。</p>
<h3 id="什么是JSX"><a href="#什么是JSX" class="headerlink" title="什么是JSX"></a>什么是JSX</h3><p>JSX的定义，我们引用下<a href="https://github.com/jsx/JSX">官网</a>的描述。</p>
<blockquote>
<p>JSX - a faster, safer, easier JavaScript</p>
</blockquote>
<p>…<br>…<br>…</p>
<p>好吧，那我按照自己的理解来介绍了。</p>
<p>JSX是JavaScript的语法扩展。类似模版语言，本质上是js语法。</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装配置也很简单，使用也有介绍。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install @vue&#x2F;babel-preset-jsx @vue&#x2F;babel-helper-vue-jsx-merge-props<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果是vue-cli 2.x创建的vue项目，需要<code>.babelrc</code>配置，vue-cli 3.x+安装后忽略配置，可直接使用。</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;presets&quot;: [&quot;@vue&#x2F;babel-preset-jsx&quot;]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>新建一个vue文件。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- JSX.vue --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"skill-jsx-vue"</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"vue"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>p<span class="token operator">></span>
        hello
        <span class="token operator">&lt;</span>b<span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后发现，这里甚至可以使用去掉<code>&lt;script&gt;</code>标签，直接用js文件编写，不更方便？于是我们删除<code>&lt;script&gt;</code>标签，另存为<code>JSX.js</code>，相应改变组件名还有type数据就能得到以下文件。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// JSX.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'skill-jsx-js'</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> <span class="token string">'js'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>hello <span class="token operator">&lt;</span>b<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>美哉美哉。以后可以抛弃<code>*.vue</code>文件直接使用<code>*.js</code>编写组件了，可把自己高兴坏了。我也不喜欢<code>*.vue</code>的格式。</p>
<p><img src="/post/render-JSX/vue-component.png" alt="vue-component.png"></p>
<p>经常要考虑当前行的作用域问题，是vue示例呢，还是原生js的作用域呢。</p>
<p>but！！</p>
<h3 id="vue实现css-in-js"><a href="#vue实现css-in-js" class="headerlink" title="vue实现css-in-js"></a>vue实现css-in-js</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// JSX.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
export default &#123;
  // ..
  render() &#123;
    return (
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-jsx-vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        hello
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span> &#123;this.type&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    )
  &#125;
&#125;

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.skill-jsx-vue</span> <span class="token punctuation">&#123;</span>
  color<span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>JSX.js是原生js文件，不支持<code>&lt;style lang=&quot;stylus&quot;&gt;</code>的语法解析。那也没关系，css-in-js就是为了解决在js中编写css样式而出现的一种方案。</p>
<p><em>虽然隔壁框架也有成熟的JSX还有css-in-js解决方案，不过这与本文无关，相关内容不会讨论。</em></p>
<p>vue的css-in-js 解决方案是<a href="https://github.com/styled-components/vue-styled-components">vue-styled-components</a>，当然不止这一个，还有其他的解决方案等待我们去探索。</p>
<p>安装完后，我们需要声明一个组件，这个组件只有样式，内容是使用插槽传入的，插槽自动定义的，这个组件供render使用即可。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// JSX.js</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'vue-styled-components'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> StyledP <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  color: wheat;
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'skill-jsx-js'</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> <span class="token string">'js'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>StyledP <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"skill-jsx-js"</span><span class="token operator">></span>hello <span class="token operator">&lt;</span>b<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>StyledP<span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>StyledP</code>也是一个vue组件，而<code>render</code>的<code>&lt;StyledP&gt;&lt;/StyledP&gt;</code> 相当于使用这个vue组件，组件名是js变量，大小写敏感。</p>
<p><em>思考一下，写一个带有样式的DOM，就需要声明一个vue组件，这样情况会不会造成组件滥用？</em></p>
<p>当然你可能会觉得，这是不是违背了<strong>关注点分离</strong>的原则。对于组件化系统的框架，组件是组成项目的基本单位，更加关注的是，以组件为单位，而一个组件又包括HTML、CSS、JS，vue觉得将其所有组合起来比较合理。<br><a href="https://cn.vuejs.org/v2/guide/single-file-components.html#%E6%80%8E%E4%B9%88%E7%9C%8B%E5%BE%85%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB%EF%BC%9F">怎么看待关注点分离？</a></p>
<p>当然我也会提供这一章的源码还有示例给你，还顺便实现了vue-styled-components官网的例子。</p>
<ul>
<li>JSX.vue <a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/JSX/JSX.vue">源码</a> <a href="https://screw-hand.github.io/stardust/#/skill/JSX-vue">示例</a></li>
<li>JSX.js <a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/JSX/JSX.js">源码</a> <a href="https://screw-hand.github.io/stardust/#/skill/JSX-js">示例</a></li>
<li>css-in-js.js<a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/JSX/css-in-js.js">源码</a> <a href="https://screw-hand.github.io/stardust/#/skill/css-in-js">示例</a></li>
</ul>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>今天我们从render出发，知道了虚拟DOM这一很重要的概念。途中认识了JSX，最后还结合了css-in-js实现JSX+css-in-jss。可是这些东西实际作用比较低。render函数示例开发中应用场景并不多，而JSX，css-in-js，vue对其的支持又有点不知道说什么好。不过如果你是抱着<strong>研究vue的精神</strong>而不<strong>是使用vue的想法</strong>看待以上内容，相信还是对你有点帮助的。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-skill</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh配置</title>
    <url>//post/ssh-config/</url>
    <content><![CDATA[<ul>
<li>多个账号配置ssh key</li>
<li>ssh免密码登录</li>
</ul>
<p>…</p>
<span id="more"></span>

<h1 id="多个账号配置ssh-key"><a href="#多个账号配置ssh-key" class="headerlink" title="多个账号配置ssh key"></a>多个账号配置ssh key</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail1@xxx.com"</span>
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/wu/.ssh/id_rsa<span class="token punctuation">)</span>: <span class="token punctuation">[</span>ssh-key-name<span class="token punctuation">]</span>

<span class="token comment"># ~/.ssh/下创建config文件</span>
<span class="token comment"># ~/.ssh/config start</span>
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    <span class="token comment"># 使用HostName的时候，指定使用~/.ssh/github的ssh密钥</span>
    IdentityFile ~/.ssh/github

Host <span class="token number">192.168</span>.110.220
    HostName <span class="token number">192.168</span>.110.220
    PreferredAuthentications publickey
    Port <span class="token number">22</span>
    IdentityFile ~/.ssh/192.168.110.220
<span class="token comment"># ~/.ssh/config end</span>

<span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@192.168.110.220 <span class="token parameter variable">-p</span> <span class="token number">22</span>
<span class="token comment"># Welcome to GitLab, @chris!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="ssh免密码登录"><a href="#ssh免密码登录" class="headerlink" title="ssh免密码登录"></a>ssh免密码登录</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh
<span class="token comment"># 创建ssh密钥</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail1@xxx.com"</span>
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/wu/.ssh/id_rsa<span class="token punctuation">)</span>: <span class="token punctuation">[</span>ssh-key-name<span class="token punctuation">]</span>

<span class="token comment"># 复制指定ssh密钥到服务器，以后登录的时候就不需要输入密码了</span>
ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub root@<span class="token variable">$SERVER</span>

<span class="token comment"># 登录远端服务器</span>
<span class="token function">ssh</span> root@<span class="token variable">$SERVER</span>
<span class="token function">cat</span> ~/.ssh/authorized_keys
<span class="token builtin class-name">exit</span>

<span class="token comment"># 测试跟服务器的连接</span>
<span class="token function">ssh</span> <span class="token parameter variable">-T</span> root@<span class="token variable">$SERVER</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><ul>
<li><a href="https://linuxize.com/post/using-the-ssh-config-file/">Using the SSH Config File | Linuxize</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1456064">ssh免密码登录-腾讯云开发者社区-腾讯云</a></li>
</ul>
<p>…</p>
]]></content>
      <categories>
        <category>cli</category>
      </categories>
      <tags>
        <tag>cli</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>vue技巧篇：自定义双向绑定</title>
    <url>//post/two-way-binding/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>双向绑定</strong> 是 <code>vue</code> 的一大特点之一，使用也非常方便。<br>在需要双向绑定的<strong>表单控件元素</strong>使用指令 <code>v-model</code>即可。</p>
<p>官方文档教程 —— 表单输入绑定（<a href="https://cn.vuejs.org/v2/guide/forms.html">传送门</a>）<br>官方文档api —— v-model 指令（<a href="https://cn.vuejs.org/v2/api/#v-model">传送门</a>）</p>
<p>注意了：到目前为止，<strong>双向绑定只是针对表单控件元素，并没有说明其他DOM元素，或者是自定义组件。</strong></p>
<p>那我们要如何实现在组件（或者说其他DOM元素）的双向绑定呢？</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-components</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fieldValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-components</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h2 id="v-model-浅析"><a href="#v-model-浅析" class="headerlink" title="v-model 浅析"></a><code>v-model</code> 浅析</h2><blockquote>
<p>v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br>v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。<br>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>
</blockquote>
<ul>
<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>
<li>checkbox 和 radio 使用 checked 属性和 change 事件；  </li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>
</ul>
<p>节选几段官方文档的资料，不难察觉<code>v-model</code> 会<strong>占用一个 <code>prop</code> 属性和一个 <code>$emit</code> 事件</strong>。<br>如果有冲突，也是可以更改的。</p>
<p>如果还是好奇 <code>v-model</code>的实现原理，我可以告诉你大概是这样。</p>
<blockquote>
<p><strong>双向绑定基于getter&#x2F;setter 结合观察者模式实现</strong><br>getter&#x2F;setter指<code>Object.defineProperty</code>遍历vue实例的<code>data</code>选项<br>观察者模式是js的一种设计模型，可以实现发布订阅功能</p>
</blockquote>
<h2 id="组件使用双向绑定（基本类型版）"><a href="#组件使用双向绑定（基本类型版）" class="headerlink" title="组件使用双向绑定（基本类型版）"></a>组件使用双向绑定（基本类型版）</h2><!-- 组件使用双向绑定并不罕见，很多vue的ui框架包装的组件都支持直接使用`v-model`指令。 -->

<p>有了相应的资料，我们可以开工了。准备一个组件 <code>base-input.vue</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'base-input'</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      fieldValue<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token comment">// 初始化赋值</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">value</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValue <span class="token operator">=</span> newVal <span class="token comment">// 监听props（外部）更新，赋值给data（内部）</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">fieldValue</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValue<span class="token punctuation">)</span> <span class="token comment">// data（内部）更新，抛出到外部</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fieldValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>有几个注意点要说明下：</p>
<ol>
<li><code>fieldValue</code>  必须初始化赋值为 <code>props</code> 的 <code>value</code></li>
<li>初始化页面时 <code>watch</code> 并不执行</li>
<li>内部更新，触发 <code>fieldValue</code> 监听函数</li>
<li>外部更新，触发 <code>value</code>监听函数</li>
</ol>
<ul>
<li>base-input 源码 <a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/two-way-binding-base-type/base-input/base-input.vue">传送门</a></li>
<li>示例 <a href="https://screw-hand.github.io/stardust/#/skill/two-way-binding-base-type">传送门</a></li>
</ul>
<h3 id="value-与v-model"><a href="#value-与v-model" class="headerlink" title=":value 与v-model"></a><strong><code>:value</code> 与<code>v-model</code></strong></h3><p>因为之前被这两个搞混过，不明白之间的联系和区别，这里单独拿出来讲一下。</p>
<ul>
<li><code>:value</code> 是绑定一个<code>prop value</code> 给组件，实现外部数据传入内部， <strong>单向绑定</strong></li>
<li><code>v-model</code> 是<strong>双向绑定</strong>，默认占用<code>prop value</code> 属性和一个 <code>$emit input  事件</code>;<br>在<code>:value</code> 的基础上<code>$emit input</code>实现内部数据抛出外部，从而外部、内部数据达成同步且外内均可更改。</li>
</ul>
<p>把 <code>base-input v-model=&quot;inputValue&quot;&gt;&lt;/base-input&gt;</code> 换成 <code>:value=&quot;inputValue&quot;</code>试试？</p>
<p><em>我们也将在下一节更改指令默认使用的<code>prop</code> 属性 和<code>$emit</code> 事件</em></p>
<p><strong>可其实这种方式只支持js的基本类型，像对象或者数组的引用类型，这样处理是不够的，所以我们需要对现有的双向绑定方式进行升级。</strong></p>
<h2 id="组件使用双向绑定（引用类型版）"><a href="#组件使用双向绑定（引用类型版）" class="headerlink" title="组件使用双向绑定（引用类型版）"></a>组件使用双向绑定（引用类型版）</h2><p>准备另一个组件：<code>base-div.vue</code></p>
<p>把<code>base-input.vue</code> 的代码复制过来，组件名，类名什么的这些标识信息该改的就改一改。</p>
<p>然后可能有的朋友到这里会把 <code>prop value</code> 的 <code>type</code> 改成 <code>Object</code>，这只是第一步而已。</p>
<p>因为引用类型的特性，我们手动给内部变量赋值，会更改其引用地址，故相当于重新初始化了一个变量。<br>这里会触发另一个watch函数，而另一个watch也具备给内部变量赋值的能力；</p>
<p>如果不特殊处理，这两个watch 函数触发其中一个，就会不断调用另一条，造曾死循环。<br>所以我们需要判断当内外部变量相等的时候，就不赋值了。嗯，<strong>判断两个对象相等</strong>。</p>
<p><strong>判断两个对象相等可能有点尴尬， 那我们把两个对象序列化为JSON 字符串就可以了。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>技术点已经准备够了，我们足够实现用<code>v-model</code>绑定一个对象了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> <span class="token punctuation">[</span> Object<span class="token punctuation">,</span> Array<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      fieldValue<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      fieldValueStringify<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 保存外部传入的变量快照，将在监听器中做比较使用</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 深度监听</span>
      <span class="token function">handler</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>
        <span class="token comment">// 外部传入的变量与内部变量比较</span>
        <span class="token comment">// 不相等，内部变量方可赋值为this.value</span>
        <span class="token comment">// * 内部变量赋值，将会触发fieldValue监听函数</span>
        <span class="token comment">// 且此时应更新fieldValue 对象字符串快照</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">currentValue <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValue <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValueStringify <span class="token operator">=</span> currentValue
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fieldValue<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 为什么要使用深度监听呢？</span>
      <span class="token function">handler</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 自己改变内部变量，或者因外部变量更新手动赋值内部变量</span>
        <span class="token comment">// 这个函数都会被触发</span>
        <span class="token comment">// 要实现的是内部与外部变量同步，所以快照才是保存外部变量</span>
        <span class="token comment">// 1.当外部变量改动，会先调用 watch value，此时内外部变量同步</span>
        <span class="token comment">//   这时不需要抛出事件，否则出现死循环</span>
        <span class="token comment">// 2.当内部变量改动，会先调用 watch fieldValue</span>
        <span class="token comment">//   抛出事件，外部的v-model又会自动更新内部的value</span>
        <span class="token comment">//   从而触发 watch value</span>
        <span class="token comment">//  （这里触发watch value了，可以回去看看1）</span>
        <span class="token comment">//   如果你不会兜兜转，那我想你应该feel到了整个更新流程</span>
        <span class="token comment">// **如果被兜住了，先理解外部变量的改动，再理解内部变量的改动</span>
        <span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">currentValue <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValueStringify</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>base-div 源码 <a href="https://github.com/screw-hand/stardust/blob/master/src/views/skill/two-way-binding-reference-type/base-div/base-div.vue">传送门</a></li>
<li>示例 <a href="https://screw-hand.github.io/stardust/#/skill/two-way-binding-reference-type">传送门</a></li>
</ul>
<p>接下来我们不使用 <code>prop value</code> <code>$emit input</code>了，我们使用 <code>prop insert</code> <code>$emit output</code>。</p>
<p>直接在<code>base-div</code> 改动吧，其实也不复杂。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  
  model<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    prop<span class="token operator">:</span> <span class="token string">'insert'</span><span class="token punctuation">,</span>
    event<span class="token operator">:</span> <span class="token string">'output'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    insert<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">,</span> Array<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      fieldValue<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>insert<span class="token punctuation">,</span>
      fieldValueStringify<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>insert<span class="token punctuation">)</span> <span class="token comment">// 保存外部传入的变量快照，将在监听器中做比较使用</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">insert</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  
    <span class="token literal-property property">fieldValue</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后在外部使用 <code>@output</code> 的时候，会发现外部更新不触发 <code>output</code> 事件。<br>刚开始以为组件实现还是有问题，后面想想不对，外部更新没必要抛出事件。<br>外部更新，可以在外部使用 watch 函数，这里确实不管内部组件的事情了。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-div</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formValue<span class="token punctuation">"</span></span> <span class="token attr-name">@output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleOutput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>今天我们重新了解了 <code>v-model</code> 只针对于表单控件数据的双向绑定，并且会默认占用一个属性和一个事事件。<br><strong>也通过v-model，我们得以在自己的组件实现双向绑定，基本类型和引用类型的处理机制也不太一样。</strong></p>
<p>工作中也经常用到这种需要自定义双向绑定的场景，有时候写得次数太多，就想着能不能抽象出来复用。<br><strong>想想 <code>mixins</code> ， <code>extend</code> 都不太适合，因为会固定占用prop data 事件， 容易起冲突。</strong><br>目前觉得指令可以一试，不过还需要好好研究一下，希望下次的更新能定义一条全局指令——<code>base-model</code>。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-skill</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让mac的vscode-insiders支持在web上直接安装扩展</title>
    <url>//post/vscode-insiders-support-install-extension-by-web/</url>
    <content><![CDATA[<p>mac使用vscode-insiders，无法直接在网页上直接安装扩展。</p>
<span id="more"></span>

<p>Dracula Official - Visual Studio Marketplace<br><a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula">https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula</a></p>
<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode://"></a><code>vscode://</code></h1><p>在 macOS 上，更改默认的应用程序来处理特定的 URL 方案（如 <code>vscode://</code>）可能需要一些手动的操作：</p>
<ol>
<li><p><strong>查找 VS Code Insiders 的 Bundle Identifier</strong>：首先，找到 VS Code Insiders 的 Bundle Identifier。这可以通过在终端中运行以下命令来实现：</p>
<p> bashCopy code</p>
<p> <code>osascript -e &#39;id of app &quot;Visual Studio Code - Insiders&quot;&#39;</code></p>
<p> 请确保应用程序的名称是正确的。</p>
</li>
<li><p><strong>更改 URL 方案的关联</strong>：使用一个名为 <a href="https://github.com/moretension/duti">Duti</a> 的开源工具来更改 URL 方案的关联。首先，安装 Duti，可以通过 Homebrew 安装：</p>
<p> bashCopy code</p>
<p> <code>brew install duti</code></p>
</li>
<li><p><strong>设置新的关联</strong>：安装完成后，使用下面的命令来设置 <code>vscode:</code> URL 方案与 VS Code Insiders 的关联。使用之前找到的 Bundle Identifier 替换 <code>com.microsoft.VSCodeInsiders</code>：</p>
<p> bashCopy code</p>
<p> <code>duti -s com.microsoft.VSCodeInsiders vscode</code></p>
</li>
</ol>
<h1 id="code"><a href="#code" class="headerlink" title="code"></a><code>code</code></h1><p>命令行也变成了<code>code-insiders</code>，可以设置别名还原。临时作用，长期使用需要自行加入<code>~/.bashrc</code>文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">code</span><span class="token operator">=</span>code-insiders <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>geek</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生态圈</title>
    <url>//post/vue-ecosystem/</url>
    <content><![CDATA[<p>这是一次资料整理，关于vue的生态圈。包括工具、插件，这里不按照库的类型分类。</p>
<p>思维导图体现的是<strong>这些库由什么原理实现，或者说深入了解库会接触到的一些关键点。</strong></p>
<p>官方也整理了<a href="https://github.com/vuejs/vue#ecosystem">生态圈</a>，不过<a href="https://github.com/vuejs/vue/commit/4504cafa8dcece12538c8be4ae84fb93afcdafed#diff-04c6e90faac2675aa89e2176d2eec7d8R144-R18://github.com/vuejs/vue/commit/4504cafa8dcece12538c8be4ae84fb93afcdafed#diff-04c6e90faac2675aa89e2176d2eec7d8R144-R182">修改记录</a>是两年前。</p>
<span id="more"></span>

<p><img src="/post/vue-ecosystem/vue-ecosystem.png" alt="vue生态圈"></p>
<p>mind文件下载地址：<a class="btn" href="/download/vue-ecosystem.xmind">传送门</a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的一些技巧</title>
    <url>//post/vue-skill/</url>
    <content><![CDATA[<h2 id="v-if-获取-refs-问题"><a href="#v-if-获取-refs-问题" class="headerlink" title="v-if 获取 refs 问题"></a><code>v-if</code> 获取 <code>refs</code> 问题</h2><p>先简单介绍下这两个指令：</p>
<ul>
<li><code>v-if</code> 条件渲染</li>
<li><code>ref</code> 返回组件实例或DOM元素</li>
</ul>
<p>有时候我们需要在条件渲染的DOM节点上返回一个DOM对象或组件实例，可<code>this.$refs.child</code> 返回的是<code>undefined</code>。通过查阅文档得知:</p>
<blockquote>
<p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条块。<br>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</p>
</blockquote>
<p>如此可得：</p>
<p><strong><code>v-if</code> 条件渲染： 惰性渲染，DOM、事件、组件会被销毁重建</strong></p>
<p><strong><code>ref</code> 返回组件实例或DOM元素，非相应式</strong></p>
<span id="more"></span>

<p>那么可推论得知<code>v-if</code>和<code>ref</code>的实现有冲突，<code>v-show</code>也是条件渲染，而它只是单纯切换元素css display属性值隐藏。**如此可以使用<code>v-show</code>替代<code>v-if</code>**。</p>
<p>总结：工作中常用的是<code>v-if</code>，可<code>v-show</code>也有<code>v-if</code>替代不了的时候，比如用于<code>ref</code>的DOM或组件；<br>而<code>v-if</code>又可使用<code>v-else</code>、<code>v-else-if</code>，这两个指令也比较特殊，必须和<code>v-if</code>相邻，阅读代码时逻辑性更强。</p>
<h2 id="event-——-隐藏的函数参数"><a href="#event-——-隐藏的函数参数" class="headerlink" title="$event —— 隐藏的函数参数"></a><code>$event</code> —— 隐藏的函数参数</h2><p>vue的官方api文档，里详细地介绍了实例属性&#x2F;方法，这些属性和方法都以美元符号<code>$</code>为前缀， <code>$event</code>并没有介绍；<br>但在教程中， <code>$event</code>的定义是获取原生dom事件，实践中有时候其值并非是原生dom对象，<br>而<code>$event</code> 又是可以隐性调用的，这使得<code>$event</code>的机制不那么直观。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用<code>v-on</code>或<code>@</code>指令可以为dom元素绑定事件,<br>函数没有参数时，<code>$event</code>被自动当作实参传入;<br>函数带有参数时，最后一个参数必须显式传入<code>$event</code></p>
<p>请自行准备一个组件：<code>dollar-event.vue</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/* dollar-event.vue */
// eg: 无参数
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$event empty param<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dom事件：本组件事件'</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span> <span class="token comment">// 原生dom对象</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

// eg：带有参数
<span class="token comment">&lt;!-- 调换$event位置，爹妈不疼哦，不信你试试？ --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleParamClick('click', $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$event with param<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">handleParamClick</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> $event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    value<span class="token punctuation">,</span>  <span class="token comment">// 'click'</span>
    $event  <span class="token comment">// 原生dom对象</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>非常简单，就是有无参数的区别，可自定义事件(<code>$emit</code>)机制就有两个含义了。</p>
<h3 id="自定义事件-emit"><a href="#自定义事件-emit" class="headerlink" title="自定义事件($emit)"></a>自定义事件($emit)</h3><p><code>$emit</code>实例方法可以触发父组件的自定义事件，<br>同时还可以传递一个参数给自定义事件接受；<br>这个参数也可以是子组件的<code>$event</code></p>
<p>请再准备一个组件：<code>emit-event.vue</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/* emit-event.vue */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill-emit-event<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleEmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>emit-event<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">handleEmit</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 这里的$event同"基本使用"的第一段实例一样都是原生dom对象</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'dispatch'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">emitParams</span><span class="token operator">:</span> $event<span class="token punctuation">,</span>
    <span class="token literal-property property">emitValue</span><span class="token operator">:</span> <span class="token string">'dispatch emit-event'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

/* dollar-event.vue */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emit-event</span> <span class="token attr-name">@dispatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emitClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emit click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emit-event</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> emitEvent <span class="token keyword">from</span> <span class="token string">'./emit-event'</span>

<span class="token function">emitClick</span> <span class="token punctuation">(</span><span class="token parameter">emitEvent<span class="token punctuation">,</span> $event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    emitEvent<span class="token punctuation">,</span>  <span class="token comment">// &#123; emitParams: '子组件的$event', emitValue: 'dispatch emit-event' &#125;</span>
    $event      <span class="token comment">// emitEvent才是形参$event, 因此自己没有$event了，这里是undefined</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emitEvent<span class="token punctuation">.</span>emitParams<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token comment">// &lt;button class="skill-emit-event"></span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>父组件的自定义事件有参数时也可结合<code>$event</code>一起使用，机制跟“基本使用”是一样的。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/* dollar-event.vue */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emit-event</span> <span class="token attr-name">@dispatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emitParamClick('val', $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emit param click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emit-event</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">emitParamClick</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> $event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    val<span class="token punctuation">,</span>        <span class="token comment">// 'val'</span>
    $event     <span class="token comment">// &#123; emitParams: '子组件的$event', emitValue: 'dispatch emit-event' &#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>示例代码：<a href="https://github.com/screw-hand/vue-skill/tree/master/src/views/skill/dollar-event">dollar-event</a></p>
<p>总结：</p>
<ul>
<li>基本使用时函数无其他实参，可以不用传<code>$event</code>实参，有其他实参的时候，<code>$event</code>必须作为最后一个参数传入</li>
<li>自定义事件时使用，<code>$event</code>作为<code>$emit</code>的实参，若<code>$emit</code>不带参数，<code>$event</code>的值为<code>undefined</code></li>
</ul>
<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>vue的静态资源分两种方式处理，区别就是经不经过webpack处理，或者说——是否为webpack模块:</p>
<ul>
<li>webpack模块：js中<code>import</code>进来的，或用相对路径在<code>template/css</code>引入的</li>
<li>非webpack模块：<code>public</code>目录下，或绝对路径引用的，将被直接拷贝</li>
</ul>
<p>官方推荐使用资源作为模块引入，理由如下：</p>
<pre><code>脚本和样式表会被压缩且打包在一起，从而避免额外的网络请求。
文件丢失会直接在编译时报错，而不是到了用户端才产生 404 错误。
最终生成的文件名包含了内容哈希，因此你不必担心浏览器会缓存它们的老版本。
</code></pre>
<ul>
<li><a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">处理静态资源</a></li>
<li><a href="https://cli.vuejs.org/zh/guide/css.html#%E5%BC%95%E7%94%A8%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">CSS引用静态资源</a></li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-skill</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常见缓存机制</title>
    <url>//post/web-cache/</url>
    <content><![CDATA[<blockquote>
<p>缓存是捷径，使http抄近道</p>
</blockquote>
<!-- cookie session Web Stroage -->

<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>Cookie 是服务器保存在浏览器的一小段文本信息。浏览器每次向服务器发出请求，就会自动附上这段信息，是前端的一种常见而又传统的缓存机制。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>用于保存页面信息：如自动登录，记住用户名</li>
<li>以域名为单位，数量大小有4k-10k，有过期时间</li>
<li>js中通过<code>doucment.cookie</code>调用</li>
<li>cookie的传递<br>从服务器端，发送cookie给客户端，是对应的Set-Cookie头信息。包括了对应的cookie的名称，值，以及各个属性。<br>从客户端发送cookie给服务器，对应Cookie头信息，不发送cookie的各个属性，只发送对应的名称和值。</li>
</ol>
<span id="more"></span>

<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol>
<li>设置：<code>doucument.cookie=&quot;name=value;max-age=seconds;Path=path;HttpOnly;&quot;</code>等；一次设置一个值，同名参数会进行覆盖</li>
<li>指定过期时间的cookie会存储在本地，没有指定时为session Cookie，会话结束后cookie删除，设置domain和paath可指定cookie的作用域。httponly指定cookie必须用http或https传输，该属性可限制js访问操作此cookie。secure可指定cookie只能使用https传输。</li>
<li>读取：document.cookie会返回cookie的名和值，其他参数不会返回，如：a&#x3D;1;b&#x3D;2; 每个cookie的名值通过分号分割。</li>
<li>删除：将max-age设置为-1</li>
</ol>
<h3 id="cookie优点"><a href="#cookie优点" class="headerlink" title="cookie优点"></a>cookie优点</h3><p>可配置性和可扩展性</p>
<ol>
<li>可以在客户端上保存用户数据，起到简单的缓存和用户身份识别等作用</li>
<li>保存用户的偏好，比如网页的字体大小、背景色等等。</li>
<li>记录用户的行为</li>
</ol>
<h3 id="cookie的缺陷"><a href="#cookie的缺陷" class="headerlink" title="cookie的缺陷"></a>cookie的缺陷</h3><p>数据数量：每个cookie的大小限制在4k，不同的浏览器对同一个域下的cookie的数量有限制，IE6 20，IE7+ 50，Firefox 50，Safari ∞，Chrome 53。数量超出时， IE和Opera 会清理近期最少使用的cookie，Firefox会随机清理cookie。保险起见cookie的数量应控制在20个，单个cookie大小应小于4KB。</p>
<p>安全性问题：HTTP请求中的cookie是明文传递（HTTPS不是），故敏感信息不能使用cookie存储，如用户密码等。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。</p>
<p>网络负担：cookie会被附加在每个HTTP请求中，在请求和响应时都会被传输，所以增加了流量的损失。</p>
<h2 id="seesion"><a href="#seesion" class="headerlink" title="seesion"></a>seesion</h2><p>存储会话机制，保存在服务器上。客户端访问服务器时，服务器把客户端信息以某种形式记录在服务器上。再次访问时只需要从该Session中查找该客户的状态就可以了。</p>
<p>标识用户身份： 用户与服务器建立连接的同时，服务器会自动为其分配一个SessionId，cookie把SessiondId自动带到服务器。</p>
<p>session创建：当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了sessionId，如果已包含则说明以前已经为此客户端创建过session，服务器就按照sessionId把这个session检索出来使用（检索不到，会新建一个）。如果客户端请求不包含sessionId，则为此客户端创建一个session并且生成一个与此session相关联的sessionId，sessionId的值是一个既不会重复，又不容易被找到规律以仿造的字符串，这个sessionId将被在本次响应中返回给客户端保存。</p>
<p>禁用cookie：如果客户端禁用了cookie，通常有两种方法实现session而不依赖cookie。<br>1）URL重写，就是把sessionId直接附加在URL路径的后面。<br>2）表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器</p>
<p>Session共享：对于多网站(同一父域不同子域)单服务器，我们需要解决的就是来自不同网站之间SessionId的共享。由于域名不同(aaa.test.com和bbb.test.com)，而SessionId又分别储存在各自的cookie中，因此服务器会认为对于两个子站的访问,是来自不同的会话。解决的方法是通过修改cookies的域名为父域名达到cookie共享的目的,从而实现SessionId的共享。带来的弊端就是，子站间的cookie信息也同时被共享了。  </p>
<p>cookie与session的区别<br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br>5、可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>
<h2 id="web-Storage"><a href="#web-Storage" class="headerlink" title="web Storage"></a>web Storage</h2><p>web 本地存储对浏览器来说，使用 Web Storage 存储键值对比存储 Cookie 方式更直观，而且容量更大，它包含两种：localStorage 和 sessionStorage</p>
<p>sessionStorage（临时存储） ：为每一个数据源维持一个存储区域，在浏览器打开期间存在，包括页面重新加载<br>localStorage（长期存储） ： 一直存储在本地，数据存储是永久的，除非用户或程序对其进行删除操作；localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。 </p>
<p>sessionStorage 和 localStorage 的用法基本一致，引用类型的值要转换成JSON</p>
<p>特点：<br>域内安全、永久保存。即客户端或浏览器中来自同一域名的所有页面都可访问localStorage数据且数据除了删除否则永久保存，但客户端或浏览器之间的数据相互独立。<br>数据不会随着Http请求发送到后台服务器；<br>存储数据的大小至少4MB。</p>
<p>存储方式：以键值对(Key-Value)的方式存储字符串。<br>主要应用：购物车、客户登录、游戏存档。。。<br>可储存的数据类型：数组，图片，json，样式，脚本。。。（只要是能序列化成字符串的内容都可以存储）</p>
<p>JS API<br>localStorage.setItem(键名，键值)    在本地客户端存储一个字符串类型的数据<br>localStorage.getItem(键名)   读取已存储在本地的数据<br>localStorage.removeItem(键名)  移除已存储在本地的数据<br>localStorage.clear()   移除本地存储所有数据</p>
<p>sessionStorage中的四个函数与以上localStorage类的函数用法基本一致</p>
<p>cookie与web Storage的区别<br>1、cookie数据始终在同源的http请求中携带<br>2、cookie可设置路径，限制其作用域<br>3、存储大小，cookie不能超过4k，web Storage可达5M<br>4、cookie有数据有效期，web Storage无<br>5、作用域不同，sessionStroage不在不同浏览器窗口共享，<br>      localStorage与cookie在所有同源窗口共享</p>
<p>cookie与webStorage的使用方法<br>1、兼容性：IE9+支持web Storage，cookie作为远古时期产物，无兼容性问题<br>2、交互性：web Storage不与服务器交互，需要与服务器交互时使用cookie<br>3、数据大小：cookie不能超过4k，web Storage可达5M</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>web应用的服务器环境迁移</title>
    <url>//post/web-env-migrate/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li>单体Web应用部署在云服务提供商上。</li>
<li>用户通过域名访问该应用。</li>
<li>计划将应用从一个云服务器（A）迁移到另一个（B），使用Docker进行部署。</li>
<li>迁移的目标是让用户无感知这一变更。</li>
</ul>
<span id="more"></span>

<h1 id="核心考虑点"><a href="#核心考虑点" class="headerlink" title="核心考虑点"></a>核心考虑点</h1><ul>
<li><strong>测试阶段</strong>：可使用IP地址或直接使用域名进行B服务器的配置，以不干扰现有环境。</li>
<li><strong>迁移策略</strong>：迁移时，考虑将配置从IP地址切换到域名（如果之前未使用），确保用户的请求无论通过原IP还是新域名均能正确路由到B服务器。</li>
<li><strong>部署次数</strong>：可能需要一次或两次配置调整：一次为测试部署（使用IP或域名），一次为迁移时的最终配置。</li>
</ul>
<h1 id="部署和测试策略"><a href="#部署和测试策略" class="headerlink" title="部署和测试策略"></a>部署和测试策略</h1><ul>
<li><strong>直接使用域名</strong>：可以直接在B服务器上使用域名进行部署和配置。<ul>
<li><strong>测试策略</strong>：通过修改本地hosts文件、使用子域名或内部DNS进行测试。</li>
<li><strong>注意</strong>：如果在Nginx等反向代理中使用域名，确保本地hosts文件的修改与之兼容，否则可能导致访问问题。</li>
</ul>
</li>
<li><strong>本地hosts文件配置</strong>：<ul>
<li>为了同时访问A和B服务器，可以在本地hosts文件中添加两条记录：<ul>
<li><code>A服务器的IP地址 yourdomain.com</code></li>
<li><code>B服务器的IP地址 test.yourdomain.com</code></li>
</ul>
</li>
<li>这允许通过<code>yourdomain.com</code>访问A服务器，而通过<code>test.yourdomain.com</code>访问B服务器。</li>
</ul>
</li>
<li><strong>使用IP地址</strong>：最初在B服务器上使用IP地址进行部署和配置。<ul>
<li><strong>第二次部署</strong>：测试完成后，在迁移之前将B服务器配置更新为使用域名。</li>
<li><strong>测试策略</strong>：无需特殊配置进行测试。</li>
</ul>
</li>
</ul>
<h1 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h1><ol>
<li><strong>准备B服务器</strong>：在B服务器上设置Docker环境，并部署Web应用。初期可使用IP地址或子域名进行配置。</li>
<li><strong>测试验证</strong>：通过修改本地hosts文件或使用子域名，确保B服务器上的应用运行正常且可以访问。</li>
<li><strong>迁移准备</strong>：确认B服务器准备就绪后，将其配置更新为使用正式域名。</li>
<li><strong>DNS更新</strong>：在计划的迁移时间点，更新DNS记录，将域名指向B服务器的IP地址。</li>
<li><strong>监控和验证</strong>：在DNS记录更新后，密切监控系统，确保流量正确路由到B服务器，并验证所有功能正常运行。</li>
<li><strong>完全切换</strong>：一旦确认B服务器稳定运行，可以停止A服务器的服务。</li>
</ol>
<h1 id="Docker配置建议"><a href="#Docker配置建议" class="headerlink" title="Docker配置建议"></a>Docker配置建议</h1><ul>
<li>在Docker配置中使用域名，提高灵活性和可维护性。</li>
</ul>
<h1 id="域名-x2F-IP配置优缺点"><a href="#域名-x2F-IP配置优缺点" class="headerlink" title="域名&#x2F;IP配置优缺点"></a>域名&#x2F;IP配置优缺点</h1><ul>
<li><strong>使用域名</strong><ul>
<li><strong>优点</strong>：易于维护，灵活性高，便于未来迁移或更改。</li>
<li><strong>缺点</strong>：初始配置和测试可能更复杂，需额外步骤如修改hosts文件。</li>
</ul>
</li>
<li><strong>使用IP地址</strong><ul>
<li><strong>优点</strong>：测试阶段配置直接，易于控制。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全基础</title>
    <url>//post/web-safe/</url>
    <content><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>通过把SQL命令插入到web表单提交或者页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</p>
<p><strong>防范SQL注入</strong><br>1.校验用户输入的参数，限制其长度或转义单引号或双连字符<br>2.使用参数化SQL或直接使用存储过程进行数据查询存取<br>3.每个应用使用单独的权限有限的数据库连接，不使用管理器权限连接数据库<br>4.机密信息不明文存放，加密或hash掉密码和敏感信息</p>
<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>跨站脚本攻击(Cross Site Scripting)，缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p>
<span id="more"></span>

<p><strong>原理</strong><br>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。<br>诱使受害者打开受到攻击的服务器URL。<br>受害者在Web浏览器中打开URL，恶意脚本执行。</p>
<p><strong>攻击方式</strong></p>
<ol>
<li>反射型：发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS随响应内容一起返回给浏览器，最后浏览器解析执行XSS代码，这个过程就像一次发射，所以叫反射型XSS。</li>
<li>存储型：存储型XSS和反射型的XSS差别就在于，存储型的XSS提交的代码会存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。</li>
</ol>
<p><strong>防御措施</strong></p>
<ul>
<li>编码：对用户输入的HTML实体进行编码</li>
<li>过滤：移除用户上的DOM属性，如onerror等，移除用户上传的style、script、iframe节点</li>
<li>校正：避免直接对HTML实体编码，使用DOM Prase转换，校对不配对的DOM标签</li>
<li>cookie：避免直接在cookie 中泄露用户隐私，例如email、密码等等。<br>        通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。<br>        如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie 。</li>
</ul>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF跨站点请求伪造(Cross—Site Request Forgery)</p>
<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。<br>由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。<br>这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p>
<p>完成一次CSRF攻击，受害者必须依次完成以下两个步骤：</p>
<ol>
<li>登录受信任网站A，并在本地生成Cookie。</li>
<li>在不登出A的情况下，访问危险网站B。</li>
</ol>
<p>看到这里，你也许会问：“如果我不满足以上两个条件中的一个，我就不会受到CSRF攻击”。是滴，确实如此，但是你不能保证以下情况不会发生：</p>
<ul>
<li>你不能保证你登录了一个网站之后，不再打开一个tab页面并访问其它的网站（黄网）。</li>
<li>你不能保证你关闭浏览器之后，你本地的Cookie立刻过期，你上次的会话已经结束。</li>
<li>上述中所谓的攻击网站，可能就是一个钓鱼网站或者黄色网站。</li>
</ul>
<p>防御CSRF攻击：</p>
<ul>
<li>通过 referer、token 或者 验证码 来检测用户提交。</li>
<li>尽量不要在页面的链接中暴露用户隐私信息。</li>
<li>对于用户修改删除等操作最好都使用post 操作 。</li>
<li>避免全站通用的cookie，严格设置cookie的域。</li>
</ul>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack5</title>
    <url>//post/webpack5/</url>
    <content><![CDATA[<p>简介：本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em>，它们均为静态资源，用于展示你的内容。</p>
<span id="more"></span>

<h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><ol>
<li><p>entry 入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</p>
</li>
<li><p>output 输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</p>
</li>
<li><p>loaders 模块转换器，用于把模块原内容按照需求转换成新内容。</p>
</li>
<li><p>plugins 扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</p>
</li>
<li><p>mode 告知 webpack 使用相应模式的<a href="https://webpack.docschina.org/configuration/mode">内置优化</a>。</p>
</li>
<li><p>module 模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</p>
</li>
<li><p>resolve 配置webpack对模块的解析规则</p>
</li>
<li><p>externals 指定模块为外包模块，构建时不打包</p>
</li>
<li><p>bundle 由多个不同的模块生成，bundles 包含了早已经过加载和编译的最终源文件版本。</p>
</li>
<li><p>chunk 通常 chunk 会直接对应所输出的 bundle，但是有一些配置并不会产生一对一的关系。bundle 由 chunk 组成，其中有几种类型（例如，入口 chunk(entry chunk) 和子 chunk(child chunk)）。</p>
</li>
<li><p>vendors 第三方模块。</p>
</li>
</ol>
<h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"production"</span><span class="token punctuation">,</span> <span class="token comment">// "production" | "development" | "none"</span>
  <span class="token comment">// Chosen mode tells webpack to use its built-in optimizations accordingly.</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./app/entry"</span><span class="token punctuation">,</span> <span class="token comment">// string | object | array</span>
  <span class="token comment">// 默认为 ./src</span>
  <span class="token comment">// 这里应用程序开始执行</span>
  <span class="token comment">// webpack 开始打包</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// webpack 如何输出结果的相关选项</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// string (default)</span>
    <span class="token comment">// 所有输出文件的目标路径</span>
    <span class="token comment">// 必须是绝对路径（使用 Node.js 的 path 模块）</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span> <span class="token comment">// string (default)</span>
    <span class="token comment">// entry chunk 的文件名模板</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span> <span class="token comment">// string</span>
    <span class="token comment">// 输出解析文件的目录，url 相对于 HTML 页面</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 这里有一种旧的语法形式可以使用（点击显示）</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span> <span class="token comment">// 通用模块定义</span>
      <span class="token comment">// the type of the exported library</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span> <span class="token comment">// string | string[]</span>
      <span class="token comment">// the name of the exported library</span>

      <span class="token comment">/* Advanced output.library configuration (click to show) */</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">uniqueName</span><span class="token operator">:</span> <span class="token string">"my-application"</span><span class="token punctuation">,</span> <span class="token comment">// (defaults to package.json "name")</span>
    <span class="token comment">// unique name for this build to avoid conflicts with other builds in the same HTML</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"my-config"</span><span class="token punctuation">,</span>
    <span class="token comment">// name of the configuration, shown in output</span>
    <span class="token comment">/* 高级输出配置（点击显示） */</span>
    <span class="token comment">/* Expert output configuration 1 (on own risk) */</span>
    <span class="token comment">/* Expert output configuration 2 (on own risk) */</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 模块配置相关</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 模块规则（配置 loader、解析器等选项）</span>
      <span class="token punctuation">&#123;</span>
        <span class="token comment">// Conditions:</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/demo-files"</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// these are matching conditions, each accepting a regular expression or string</span>
        <span class="token comment">// test and include have the same behavior, both must be matched</span>
        <span class="token comment">// exclude must not be matched (takes preferrence over test and include)</span>
        <span class="token comment">// Best practices:</span>
        <span class="token comment">// - Use RegExp only in test and for filename matching</span>
        <span class="token comment">// - Use arrays of absolute paths in include and exclude to match the full path</span>
        <span class="token comment">// - Try to avoid exclude and prefer include</span>
        <span class="token comment">// Each condition can also receive an object with "and", "or" or "not" properties</span>
        <span class="token comment">// which are an array of conditions.</span>
        <span class="token literal-property property">issuer</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">issuer</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">issuer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">and</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">issuer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">or</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">issuer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">not</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">issuer</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// like "or"</span>
        <span class="token comment">// conditions for the issuer (the origin of the import)</span>
        <span class="token comment">/* Advanced conditions (click to show) */</span>

        <span class="token comment">// Actions:</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>
        <span class="token comment">// 应该应用的 loader，它相对上下文解析</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// options for the loader</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// apply multiple loaders and options instead</span>
          <span class="token string">"htmllint-loader"</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"html-loader"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              <span class="token comment">// ...</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"javascript/auto"</span><span class="token punctuation">,</span>
        <span class="token comment">// specifies the module type</span>
        <span class="token comment">/* Advanced actions (click to show) */</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">oneOf</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// ... (rules)</span>
        <span class="token punctuation">]</span>
        <span class="token comment">// only use one of these nested rules</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token comment">// ... (conditions)</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// ... (rules)</span>
        <span class="token punctuation">]</span>
        <span class="token comment">// use all of these nested rules (combine with conditions to be useful)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">/* 高级模块配置（点击展示） */</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// options for resolving module requests</span>
    <span class="token comment">// (does not apply to resolving of loaders)</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// directories where to look for modules (in order)</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">".css"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用的扩展名</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// a list of module name aliases</span>
      <span class="token comment">// aliases are imported relative to the current context</span>
      <span class="token string-property property">"module"</span><span class="token operator">:</span> <span class="token string">"new-module"</span><span class="token punctuation">,</span>
      <span class="token comment">// 别名："module" -> "new-module" 和 "module/path/file" -> "new-module/path/file"</span>
      <span class="token string-property property">"only-module$"</span><span class="token operator">:</span> <span class="token string">"new-module"</span><span class="token punctuation">,</span>
      <span class="token comment">// 别名 "only-module" -> "new-module"，但不匹配 "only-module/path/file" -> "new-module/path/file"</span>
      <span class="token string-property property">"module"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/third/module.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// alias "module" -> "./app/third/module.js" and "module/file" results in error</span>
      <span class="token string-property property">"module"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/third"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// alias "module" -> "./app/third" and "module/file" -> "./app/third/file"</span>
      <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/module.js"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/alternative-module.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// alias "./app/module.js" -> "./app/alternative-module.js"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">/* 可供选择的别名语法（点击展示） */</span>
    <span class="token comment">/* 高级解析选项（点击展示） */</span>
    <span class="token comment">/* Expert resolve configuration (click to show) */</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">performance</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">hints</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token comment">// 枚举</span>
    <span class="token literal-property property">maxAssetSize</span><span class="token operator">:</span> <span class="token number">200000</span><span class="token punctuation">,</span> <span class="token comment">// 整数类型（以字节为单位）</span>
    <span class="token literal-property property">maxEntrypointSize</span><span class="token operator">:</span> <span class="token number">400000</span><span class="token punctuation">,</span> <span class="token comment">// 整数类型（以字节为单位）</span>
    <span class="token function-variable function">assetFilter</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">assetFilename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 提供资源文件名的断言函数</span>
      <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.css'</span><span class="token punctuation">)</span> <span class="token operator">||</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span> <span class="token comment">// enum</span>
  <span class="token comment">// 通过为浏览器调试工具提供极其详细的源映射的元信息来增强调试能力，</span>
  <span class="token comment">// 但会牺牲构建速度。</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span> <span class="token comment">// string（绝对路径！）</span>
  <span class="token comment">// webpack 的主目录</span>
  <span class="token comment">// entry 和 module.rules.loader 选项</span>
  <span class="token comment">// 都相对于此目录解析</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span> <span class="token comment">// 枚举</span>
  <span class="token comment">// the environment in which the bundle should run</span>
  <span class="token comment">// changes chunk loading behavior, available external modules</span>
  <span class="token comment">// and generated code style</span>
  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^@angular</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// Don't follow/bundle these modules, but request them at runtime from the environment</span>
  <span class="token literal-property property">externalsType</span><span class="token operator">:</span> <span class="token string">"var"</span><span class="token punctuation">,</span> <span class="token comment">// (defaults to output.library.type)</span>
  <span class="token comment">// Type of externals, when not specified inline in externals</span>
  <span class="token literal-property property">externalsPresets</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// presets of externals</span>
  <span class="token literal-property property">ignoreWarnings</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">warning</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token string">"errors-only"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// lets you precisely control what bundle information gets displayed</span>
    <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">"errors-only"</span><span class="token punctuation">,</span>
    <span class="token comment">// A stats preset</span>

    <span class="token comment">/* Advanced global settings (click to show) */</span>

    <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// include value of --env in the output</span>
    <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// include absolute output path in the output</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// include public path in the output</span>

    <span class="token literal-property property">assets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show list of assets in output</span>
    <span class="token comment">/* Advanced assets settings (click to show) */</span>

    <span class="token literal-property property">entrypoints</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show entrypoints list</span>
    <span class="token literal-property property">chunkGroups</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show named chunk group list</span>
    <span class="token comment">/* Advanced chunk group settings (click to show) */</span>

    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show list of chunks in output</span>
    <span class="token comment">/* Advanced chunk group settings (click to show) */</span>

    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show list of modules in output</span>
    <span class="token comment">/* Advanced module settings (click to show) */</span>
    <span class="token comment">/* Expert module settings (click to show) */</span>

    <span class="token comment">/* Advanced optimization settings (click to show) */</span>

    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show stats for child compilations</span>

    <span class="token literal-property property">logging</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show logging in output</span>
    <span class="token literal-property property">loggingDebug</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">webpack</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token comment">// show debug type logging for some loggers</span>
    <span class="token literal-property property">loggingTrace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show stack traces for warnings and errors in logging output</span>

    <span class="token literal-property property">warnings</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show warnings</span>

    <span class="token literal-property property">errors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show errors</span>
    <span class="token literal-property property">errorDetails</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show details for errors</span>
    <span class="token literal-property property">errorStack</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show internal stack trace for errors</span>
    <span class="token literal-property property">moduleTrace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show module trace for errors</span>
    <span class="token comment">// (why was causing module referenced)</span>

    <span class="token literal-property property">builtAt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show timestamp in summary</span>
    <span class="token literal-property property">errorsCount</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show errors count in summary</span>
    <span class="token literal-property property">warningsCount</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show warnings count in summary</span>
    <span class="token literal-property property">timings</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show build timing in summary</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show webpack version in summary</span>
    <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// show build hash in summary</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// proxy URLs to backend development server</span>
      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token string">'http://localhost:3000'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">static</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// boolean | string | array | object, static file location</span>
    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// enable gzip compression</span>
    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// true for index.html upon 404, object for multiple paths</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// hot module replacement. Depends on HotModuleReplacementPlugin</span>
    <span class="token literal-property property">https</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// true for self-signed, object for cert authority</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">experiments</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">asyncWebAssembly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// WebAssembly as async module (Proposal)</span>
    <span class="token literal-property property">syncWebAssembly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// WebAssembly as sync module (deprecated)</span>
    <span class="token literal-property property">outputModule</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// Allow to output ESM</span>
    <span class="token literal-property property">topLevelAwait</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// Allow to use await on module evaluation (Proposal)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// list of additional plugins</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">chunkIds</span><span class="token operator">:</span> <span class="token string">"size"</span><span class="token punctuation">,</span>
    <span class="token comment">// method of generating ids for chunks</span>
    <span class="token literal-property property">moduleIds</span><span class="token operator">:</span> <span class="token string">"size"</span><span class="token punctuation">,</span>
    <span class="token comment">// method of generating ids for modules</span>
    <span class="token literal-property property">mangleExports</span><span class="token operator">:</span> <span class="token string">"size"</span><span class="token punctuation">,</span>
    <span class="token comment">// rename export names to shorter names</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// minimize the output files</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CssMinimizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// minimizers to use for the output files</span>

    <span class="token comment">/* Advanced optimizations (click to show) */</span>

    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"my-name"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// define groups of modules with specific</span>
          <span class="token comment">// caching behavior</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.sass$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"css/mini-extract"</span><span class="token punctuation">,</span>

          <span class="token comment">/* Advanced selectors (click to show) */</span>

          <span class="token comment">/* Advanced effects (click to show) */</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

      <span class="token literal-property property">fallbackCacheGroup</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* Advanced (click to show) */</span> <span class="token punctuation">&#125;</span>

      <span class="token comment">/* Advanced selectors (click to show) */</span>

      <span class="token comment">/* Advanced effects (click to show) */</span>

      <span class="token comment">/* Expert settings (click to show) */</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">/* 高级配置（点击展示） */</span>
  <span class="token comment">/* Advanced caching configuration (click to show) */</span>
  <span class="token comment">/* Advanced build configuration (click to show) */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://webpack.docschina.org/configuration/#options">配置速览</a></p>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>webpack：webpack核心功能</p>
<p>webpack-cli：webpack命令行包，提供命令行的方式调用</p>
<p>webpack-dev-server： webpack开发服务，提供开发周期的服务</p>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>以上三个包强烈建议全部安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> 005-webpack-init
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack webpack-cli webpack-dev-server

<span class="token comment"># 安装html-webpack-plugin管理html</span>
<span class="token function">npm</span> i <span class="token parameter variable">-D</span> html-webpack-plugin

<span class="token function">npm</span> set-script build <span class="token string">"webpack --mode=production  --node-env=production"</span>
<span class="token function">npm</span> set-script serve <span class="token string">"webpack serve"</span>
<span class="token function">npm</span> set-script <span class="token function">watch</span> <span class="token string">"webpack --watch"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>src&#x2F;index.html - 被html-webpack-plugin所引用为模板，编译后自动引入src&#x2F;index.js脚本</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>src&#x2F;index.js - 指定为 webpack的入口模块，将从这个模块开始便利依赖树</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>webpack.config.js - webpack的配置文件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name]@[contenthash].js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">'[name]@[contenthash].async.js'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">overlay</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'src/index.html'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用</p>
<pre class="line-numbers language-none"><code class="language-none"># 编译代码
npm run build

# 监听代码变化并自动编译
npm run watch

# 启动开发服务 http:&#x2F;&#x2F;lcoalhost:8080
npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>build：编译后的源码在dist目录，可以直接在浏览器打开dist&#x2F;index.html以查看编译后的代码（建议每次build之前手动清空dist目录）</p>
</li>
<li><p>watch：相当于自动完成build动作，其他同build</p>
</li>
<li><p>serve：启动一个本地的开发服务，编译的代码默认不输出在dist，存储在内存中</p>
</li>
</ul>
<h3 id="loader心得"><a href="#loader心得" class="headerlink" title="loader心得"></a>loader心得</h3><p>原则：webpack默认只能识别js模块，如果入口模块的依赖树有对其他模块（样式&#x2F;html&#x2F;图片）等依赖，需要配置相应的模块规则，匹配对应的文件，使用需要的loader。</p>
<p><strong>使用babel转义js</strong></p>
<ol>
<li>添加核心编译器&#x2F;库 （babel&#x2F;typescript）</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install -D @babel&#x2F;core @babel&#x2F;preset-env webpack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>添加webpack的loader（babel-loader&#x2F; ts-loader）</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install -D babel-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>配置编译器（.babelrc、tsconfig.json）</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">"@babel/react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">"@babel/env"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>配置webpack的模块解析规则（webpack.config.js）</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>总结：ES6+ &#x2F; TypeScript &#x2F; Flow &#x2F; Scss Sass  &#x2F; Less &#x2F; Styl &#x2F; Rect &#x2F; Vue &#x2F; Angular 的模块解析基本按照以上原则。</p>
<p>js&#x2F;ts脚本分别只需要babel-loader 还有ts-loader，而一般样式模块（Scss Sass &#x2F; Less &#x2F; Styl ）需要使用多个loader，<strong>loader的执行顺序是从右到左。</strong></p>
<h3 id="最简单的解析样式"><a href="#最简单的解析样式" class="headerlink" title="最简单的解析样式"></a>最简单的解析样式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token comment">// 用正则去匹配要用该 loader 转换的 CSS 文件</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">npm install -D style-loader css-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>css-loader用于解析css模块，style-loader把解析的css模块插入到html的style标签中。</p>
<h3 id="解析css预处理语言并使用postcss插件"><a href="#解析css预处理语言并使用postcss插件" class="headerlink" title="解析css预处理语言并使用postcss插件"></a>解析css预处理语言并使用postcss插件</h3><ol>
<li><p>css预处理语言需要对应的<strong>预处理语言核心、loader</strong>（styl、styl-loader)</p>
</li>
<li><p>*如果需要增强样式功能，可以使用postcss以及其loader（postcss、post-loader）(可选)</p>
</li>
<li><p>此刻预处理语言被转换为css，同样需要使用css-loader解析</p>
</li>
<li><p>使用style-loader插入html成为内联样式</p>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install -D styl styl-loader postcss postcss-loader css-loader style-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span> <span class="token string">'stylus-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="分离样式文件"><a href="#分离样式文件" class="headerlink" title="分离样式文件"></a>分离样式文件</h3><p>默认情况下，webpack将样式内容耦合在js中，然后使用style-loader使样式内容插入html成为内联样式，如果需要使样式文件单独分离出来，webpack5内置了插件——mini-css-extract-plugin，可以分离出独立的样式文件。只需要把style-loader替换成mini-css-extract-plugin的loader，配置插件即可。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span> <span class="token string">'stylus-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>，
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name]@[contenthash].css'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">'[name]@[contenthash].async.css'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="css模块化"><a href="#css模块化" class="headerlink" title="css模块化"></a>css模块化</h3><p>css-loader提供了选项，可配置使得支持css模块化。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">/* stylesHandler, */</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'local'</span><span class="token punctuation">,</span>
              <span class="token literal-property property">localIdentName</span><span class="token operator">:</span> <span class="token string">'[path][name]__[local]--[hash:base64:5]'</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>
        <span class="token string">'stylus-loader'</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>对于一些静态资源（字体、图片等）可以使用以下loader处理</p>
<ul>
<li><a href="https://v4.webpack.js.org/loaders/url-loader/"><code>url-loader</code></a> 将一个文件作为一个数据URI内联到bundle中（图片）</li>
<li><a href="https://v4.webpack.js.org/loaders/file-loader/"><code>file-loader</code></a> 将文件发送到输出目录（字体）</li>
<li><a href="https://v4.webpack.js.org/loaders/raw-loader/"><code>raw-loader</code></a> 以字符串形式导入文件（其他文件，不常用）</li>
</ul>
<p><a href="https://webpack.js.org/loaders/">webpack - loaders</a></p>
<h3 id="HTML管理实现MPA"><a href="#HTML管理实现MPA" class="headerlink" title="HTML管理实现MPA"></a>HTML管理实现MPA</h3><p>webpack默认不创建html文件，html-webpack-plugin可以用来管理html，自动引入entry的编译后的js、以及分离样式文件等。</p>
<p>实现多页面应用，必须指定多个入口模块（entry），可以多次实例化html-webpack-plugin，并配置不同的chunks选项，以指定不同的入口模块。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    app<span class="token operator">:</span> <span class="token string">'./src/main_client.tsx'</span><span class="token punctuation">,</span>
    pageA<span class="token operator">:</span> <span class="token string">'./src/multi-page/pageA.tsx'</span><span class="token punctuation">,</span>
    pageB<span class="token operator">:</span> <span class="token string">'./src/multi-page/pageB.tsx'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    filename<span class="token operator">:</span> <span class="token string">"[name].js"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      template<span class="token operator">:</span> <span class="token string">"src/index.html"</span><span class="token punctuation">,</span>
      filename<span class="token operator">:</span> <span class="token string">'app.html'</span><span class="token punctuation">,</span>
      chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'app'</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      template<span class="token operator">:</span> <span class="token string">"src/index.html"</span><span class="token punctuation">,</span>
      filename<span class="token operator">:</span> <span class="token string">'pageA.html'</span><span class="token punctuation">,</span>
      chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'pageA'</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      template<span class="token operator">:</span> <span class="token string">"src/index.html"</span><span class="token punctuation">,</span>
      filename<span class="token operator">:</span> <span class="token string">'pageB.html'</span><span class="token punctuation">,</span>
      chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'pageB'</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h2><h3 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h3><p>webpack把源码编译后，浏览器的开发者工具看到的代码是编译后的代码，不方便调试。</p>
<p>为此source-map可以将编译后的代码映射到源码，让其调试变得方便。</p>
<ul>
<li><p>webpack配置文件设置<code>devtool:&quot;source-map&quot;</code></p>
</li>
<li><p>也可以设置成其他的，为了构建速度，推荐</p>
</li>
<li><p><code>devtool: &#39;cheap-module-source-map&#39;, // recommend dev</code></p>
</li>
<li><p><code>devtool: &#39;eval-source-map&#39; // product</code></p>
</li>
</ul>
<p><a href="https://webpack.js.org/configuration/devtool/#devtool">webpack - devtool</a></p>
<p><code>devtool:&quot;source-map&quot;</code>只是第一步，调试不同模块的源码，还需在相应loader进行配置，具体还需查阅相关的loader文档。</p>
<ul>
<li><p>typescript <code>tsconfig.json</code> <code>compilerOptions.sourceMap: true</code>开启</p>
</li>
<li><p>样式 css-loader <code>options.sourceMap:true</code></p>
</li>
<li><p>webpack的devtool默认设置的是JavaScript</p>
</li>
</ul>
<p><a href="https://webpack.js.org/loaders/source-map-loader/">source-map-loader</a> 可从现有的source-map文件提取出相应的映射文件。</p>
<h3 id="模块热替换-Hot-Module-Replacement"><a href="#模块热替换-Hot-Module-Replacement" class="headerlink" title="模块热替换(Hot Module Replacement)"></a>模块热替换(Hot Module Replacement)</h3><p>live reload：源代码更新，webpack-dev-server自动构建并刷新web</p>
<p>HMR：live reload的升级版，可在web不刷新的情况下更新web内容</p>
<p>webpack-dev-server v4.0.0 默认启动HMR</p>
<p><strong>以上仅在开发环境下有效。</strong></p>
<p>entry入口文件结尾追加以下内容（必须）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="/post/webpack5/hmr.png"></p>
<h3 id="检查代码"><a href="#检查代码" class="headerlink" title="检查代码"></a>检查代码</h3><p>安装相应的lint，合理地配置lint规则， 使用webpack-[lint]-plugin即可。</p>
<ul>
<li><p>在webpack中检查代码会使构建速度变慢</p>
</li>
<li><p>终端会打印lint规则的信息（错误&#x2F;警告）</p>
</li>
<li><p>定位并不一定在源码的行数</p>
</li>
<li><p>建议使用集成代码检查的编辑器</p>
</li>
<li><p>把代码检测步骤放到代码提交之前</p>
</li>
</ul>
<h2 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h2><h3 id="限制webpack处理模块范围"><a href="#限制webpack处理模块范围" class="headerlink" title="限制webpack处理模块范围"></a>限制webpack处理模块范围</h3><ol>
<li><p>loader include &#x2F; exclude (优先级更高)</p>
</li>
<li><p>resolve.modules 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</p>
</li>
<li><p>resolve.mainFields（配置第三方模块使用哪个入口文件，对应package.json的字段)</p>
</li>
<li><p>resolve.alias 常用的库可以硬性配置</p>
</li>
<li><p>resolve.extensions 长度减少，更常用的先放在前面</p>
</li>
<li><p>module.noParse 非模块化实现的库可以配置不解析，并使用script标签引入</p>
</li>
<li><p>IgnorePlugin 忽略指定模块的生成，一些体积比较大的库只需要使用部分可以排除掉</p>
</li>
</ol>
<h3 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h3><p>痛点</p>
<ul>
<li><p>相同的资源被重复的加载，浪费用户的流量和服务器的成本；</p>
</li>
<li><p>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</p>
</li>
</ul>
<p>optimization.SplitChunks，适用于SPA、MPA，SPA的效果并不是很明显。</p>
<p>效果</p>
<ul>
<li>减少网络传输流量，降低服务器成本；</li>
<li>虽然用户第一次打开网站的速度得不到优化，但之后访问其它页面的速度将大大提升。</li>
</ul>
<h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><p>按需加载&#x2F;异步加载&#x2F;预加载  <code>import()</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "chunk_script" */</span> <span class="token string">'../src/script.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h3><p>webpack v4+在生产模式下默认使用<a href="https://webpack.js.org/plugins/terser-webpack-plugin/">terser-webpack-plugin</a>压缩代码，也可以使用<a href="https://github.com/webpack-contrib/closure-webpack-plugin">closure-webpack-plugin</a>压缩，结合<a href="https://webpack.js.org/configuration/optimization/#optimizationminimizer">optimization.minimizer</a>一起使用。</p>
<h3 id="dll-well？"><a href="#dll-well？" class="headerlink" title="dll (well？)"></a>dll (well？)</h3><h3 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h3><pre class="line-numbers language-none"><code class="language-none">output.publicPath: &#39;&#x2F;&#x2F;js.cdn.com&#x2F;id&#x2F;&#39;

new MiniCssExtractPlugin(&#123;
    filename: &#39;style&#x2F;[name]_[hash].css&#39;,
    chunkFilename: &#39;style&#x2F;[id]_[hash].css&#39;,
    pubicPath: &#39;&#x2F;&#x2F;css.cdn.com&#x2F;id&#x2F;&#39;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><p>基于ES2015的模块化实现（import、export），因为ES2015的模态化是静态机制的，所以webpack在构建的时候，能剔除一些引入但未被使用的代码。webpack内置功能。</p>
<h3 id="输出分析"><a href="#输出分析" class="headerlink" title="输出分析"></a>输出分析</h3><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>编译后的代码</p>
<p>异步模块</p>
<p>热更新</p>
<p>loader</p>
<p>plugin</p>
<h2 id="生态圈"><a href="#生态圈" class="headerlink" title="生态圈"></a>生态圈</h2><ul>
<li>webpack</li>
<li>webpack-cli</li>
<li>webpack-dev-server</li>
<li>webpack-dev-middleware</li>
<li>webpack-merge</li>
<li>webpack-chain</li>
</ul>
<p>loader <a href="https://webpack.js.org/loaders/">https://webpack.js.org/loaders/</a></p>
<p>plugin <a href="https://webpack.js.org/plugins/">https://webpack.js.org/plugins/</a></p>
<p>命令行 <a href="https://webpack.js.org/api/cli/">https://webpack.js.org/api/cli/</a></p>
<p>npm包 <a href="https://www.npmjs.com/search?q=keywords:webpack">https://www.npmjs.com/search?q=keywords:webpack</a></p>
<p>github <a href="https://github.com/webpack">https://github.com/webpack</a></p>
<h2 id="版本差异"><a href="#版本差异" class="headerlink" title="版本差异"></a>版本差异</h2><p>v3~v4 <a href="https://github.com/webpack/webpack/releases/tag/v4.0.0">Release v4.0.0 · webpack</a></p>
<p>v4~v5 <a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/">2020-10-10-webpack-5-release</a></p>
<ul>
<li>使用持久化缓存提高构建性能；</li>
<li>使用更好的算法和默认值改进长期缓存（long-term caching）；</li>
<li>清理内部结构而不引入任何破坏性的变化；</li>
<li>引入一些breaking changes，以便尽可能长的使用v5版本。</li>
</ul>
<h2 id="其他构建工具"><a href="#其他构建工具" class="headerlink" title="其他构建工具"></a>其他构建工具</h2><ul>
<li>grunt</li>
<li>gulp</li>
<li>vite</li>
<li>esbuild</li>
<li>rollup</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://webpack.wuhaolin.cn/">深入浅出 Webpack</a></p>
<p><a href="https://weread.qq.com/web/reader/7fd32de0723278b37fd69c3">Node.js+Webpack开发实战-夏磊</a></p>
<p><a href="https://weread.qq.com/web/reader/e9542392a43425f386c7736754b367530425a65365671365534c24">Webpack实战：入门、进阶与调优</a></p>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>《JavaScript高级程序设计（第4版）》的笔记</title>
    <url>//post/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89%E3%80%8B/</url>
    <content><![CDATA[<p><strong>JavaScript高级程序设计（第4版）</strong></p>
<p>马特·弗里斯比<br>278个想法</p>
<span id="more"></span>

<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><a href="https://weread.qq.com/web/reader/751326d0720befab7514782k4e73277021a4e732ced3b55">https://weread.qq.com/web/reader/751326d0720befab7514782k4e73277021a4e732ced3b55</a></p>
<blockquote>
<p>工业革命是钢铁铸就的，互联网革命则是JavaScript造就的。25年的反复锻造与打磨，成就了JavaScript在今天的应用程序开发中毋庸置疑的统治地位，但并非一开始就是如此。<br>Brendan Eich只用10天就写出了JavaScript的第一版。初生的JavaScript看似弱不禁风，但历史表明，第一印象并不代表一切。今天，这门语言的每个细节，也就是这本书所涉及的方方面面，都是反复推敲的产物。并非所有决定都让人满意，也没有完美的编程语言，不过单从无所不在这方面看，JavaScript倒是很接近完美。它是目前唯一一个可以随处部署的语言：服务器、桌面浏览器、手机浏览器，甚至原生移动应用程序中都有它的身影。<br>JavaScript目前的使用者有不同层次的软件工程师，他们的背景各异。无论是以开发设计精良、优雅的软件为目标，还是仅仅为了完成业绩而简单堆砌一个系统，JavaScript都能派上用场。<br>怎么使用JavaScript完全取决于你。一切尽在你的掌握之中。<br>在我超过15年的软件开发生涯中，JavaScript工具和最佳实践已经发生了天翻地覆的变化。2004年，我开始接触这门语言，当时还是雅虎地球村（Geocities）、雅虎群组（Yahoo Groups）和Macromedia Flash播放器的天下。JavaScript给人感觉像个玩具，当时我在RSS、MySpace Profile Pages等流行的沙盒环境中开始使用它。后来我又帮助一些个人网站修改和自定义功能，那种感觉就像在狂野的西部拓荒，而我也因此喜欢上了它。<br>当初我创建第一家公司的时候，配置主机装个数据库要花几天时间，而JavaScript只要扔到HTML里就可以跑起来。“前端应用程序”是不存在的，主要是零七碎八的函数。后来Ajax因为jQuery火了而变得更加流行，这才打开了通向新世界的大门，可靠、稳定的应用程序应运而生。这股风潮愈演愈烈，直到有一天遇到了发展瓶颈，但突然间，强大的框架诞生了。前端模型、数据绑定、路由管理、反应式视图，全都爆发出来了。我就在这个时候搬到硅谷，帮人打理一家公司。很快，使用我代码的用户达到了几百万。置身硅谷这么长时间以来，我也为开源做了一些贡献，培训了不计其数的软件工程师，也走了一点儿运。我的上一家公司在2018年被Stripe收购，我现在就供职于这家公司，致力于为互联网构建其经济基础设施。<br>我很高兴在马特第一次到帕洛阿尔托的一家小型创业公司领导工程化时结识了他。那家公司叫Claco，当时我刚成为它的顾问。他追求伟大软件的活力和激情溢于言表，而这家羽翼未丰的公司很快就开发出一款漂亮的产品。一如为硅谷公司设立标杆的惠普，这家创业公司也诞生在一间平房里。但这可不是寻常的民房，而是一间“黑客屋”，里面十几位才华横溢的软件工程师经常通宵达旦地工作。虽然过的不是什么高档次生活——他们坐的都是别人扔在大街上的那种沙发床和旧椅子——他们在这间房子里每天所写代码的数量和质量却引人瞩目。连续工作几小时后，大多数人会把精力投入到公司的另一个子项目上，然后又是几个小时的工作。不太会写代码的人也常受启发，发现自己学习的渴望，然后仅仅几个星期后就变成了代码能手。<br>马特是促成这种开发效率的关键角色。他是“黑客屋”里经验最丰富的人，恰好也是思维最清晰、最专业的一个。拿到计算机工程学位并不能说明什么，只要在窗户或者白板上看到马特写的算法、性能计算以及代码，你就知道马特又在专注于他的下一个大项目。随着我对他了解的加深，我们成为了好朋友。他的领悟能力，他对培训工作的热爱，以及几乎可以把所有东西转化成笑话的能力，都是我所欣赏的品质。<br>虽然马特是一位极具才华的软件工程师和项目领导，但他之所以能成为本书作者独一无二的人选，还是凭借他独有的经验和知识。<br>他不仅仅花时间教别人，而且还把这本书写完了。<br>在Claco，他开发了多款整体性产品，端到端地帮助教师在课堂上提供更好的学习体验。在DoorDash，他是第一位工程师，开发了一个可靠的物流配送系统并实现了高速增长，目前公司估值超过了120亿美元。最后，在Google，马特写的软件已经被这个星球上的数十亿人使用了。<br>全情投入，快速增长，誉满天下——多数软件工程师终其一生也只能体验到其中一项，而且还得运气好。马特不仅体验到了全部，还成为了畅销书作者。除了本书，他还写了两本JavaScript和Angular的书。说实话，我就想知道他什么时候能写一本书，把自己管理时间的奥秘分享出来。<br>本书是一部翔实的工具书，满满的都是JavaScript知识和实用技术。我热切希望本书读者能够不断学习，并亲手打造属于自己的梦想。欢迎大家多多挑错，多记笔记，别忘了打开代码编辑器，毕竟互联网革命才刚刚开始！<br>Zach Tratar<br>Stripe软件工程师<br>Jobstart联合创始人、前CEO</p>
</blockquote>
<h2 id="1-1-简短的历史回顾"><a href="#1-1-简短的历史回顾" class="headerlink" title="1.1 简短的历史回顾"></a>1.1 简短的历史回顾</h2><blockquote>
<p>两个版本的JavaScript:Netscape Navigator中的JavaScript，以及IE中的JScript。</p>
</blockquote>
<blockquote>
<p>1997年，JavaScript 1.1作为提案被提交给欧洲计算机制造商协会（Ecma）。第39技术委员会（TC39）承担了“标准化一门通用、跨平台、厂商中立的脚本语言的语法和语义”的任务（参见TC39-ECMAScript）。TC39委员会由来自网景、Sun、微软、Borland、Nombas和其他对这门脚本语言有兴趣的公司的工程师组成。他们花了数月时间打造出ECMA-262，也就是ECMAScript（发音为“ek-ma-script”）这个新的脚本语言标准。</p>
</blockquote>
<h2 id="1-2-JavaScript实现"><a href="#1-2-JavaScript实现" class="headerlink" title="1.2 JavaScript实现"></a>1.2 JavaScript实现</h2><blockquote>
<p>ECMA-262将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。</p>
</blockquote>
<p><a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p>
<blockquote>
<p>ECMA-262第6版，俗称ES6、ES2015或ES Harmony（和谐版），于2015年6月发布。这一版包含了大概这个规范有史以来最重要的一批增强特性。ES6正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。</p>
</blockquote>
<p><a href="https://maninboat.gitbooks.io/you-dont-know-js-es6/content/ch8.3.html">https://maninboat.gitbooks.io/you-dont-know-js-es6/content/ch8.3.html</a></p>
<blockquote>
<p>ECMA-262第7版，也称为ES7或ES2016，于2016年6月发布。这次修订只包含少量语法层面的增强，如Array.prototype.includes和指数操作符。</p>
</blockquote>
<blockquote>
<p>ECMA-262第7版，也称为ES7或ES2016，于2016年6月发布。这次修订只包含少量语法层面的增强，如Array.prototype.includes和指数操作符。</p>
</blockquote>
<blockquote>
<p>ECMA-262第8版，也称为ES8、ES2017，完成于2017年6月。这一版主要增加了异步函数（async&#x2F;await）、SharedArrayBuffer及Atomics API，以及Object.values()&#x2F;Object.entries()&#x2F;Object. getOwnPropertyDescriptors()和字符串填充方法，另外明确支持对象字面量最后的逗号。</p>
</blockquote>
<blockquote>
<p>ECMA-262第9版，也称为ES9、ES2018，发布于2018年6月。这次修订包括异步迭代、剩余和扩展属性、一组新的正则表达式特性、Promise finally()，以及模板字面量修订。</p>
</blockquote>
<blockquote>
<p>ECMA-262第10版，也称为ES10、ES2019，发布于2019年6月。这次修订增加了Array.prototype. flat()&#x2F;flatMap()、String.prototype.trimStart()&#x2F;trimEnd()、Object.fromEntries()方法，以及Symbol.prototype.description属性，明确定义了Function.prototype.toString()的返回值并固定了Array.prototype.sort()的顺序。另外，这次修订解决了与JSON字符串兼容的问题，并定义了catch子句的可选绑定。</p>
</blockquote>
<blockquote>
<p>万维网联盟（W3C, World Wide Web Consortium）开始了制定DOM标准的进程。</p>
</blockquote>
<blockquote>
<p>目前，W3C不再按照Level来维护DOM了，而是作为DOM Living Standard来维护，其快照称为DOM4。</p>
</blockquote>
<h2 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h2><blockquote>
<p>JavaScript是一门用来与网页交互的脚本语言，包含以下三个组成部分。<br>❑ ECMAScript：由ECMA-262定义并提供核心功能。<br>❑ 文档对象模型（DOM）：提供与网页内容交互的方法和接口。<br>❑ 浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。<br>JavaScript的这三个部分得到了五大Web浏览器（IE、Firefox、Chrome、Safari和Opera）不同程度的支持。所有浏览器基本上对ES5（ECMAScript 5）提供了完善的支持，而对ES6（ECMAScript 6）和ES7（ECMAScript 7）的支持度也在不断提升。这些浏览器对DOM的支持各不相同，但对Level 3的支持日益趋于规范。HTML5中收录的BOM会因浏览器而异，不过开发者仍然可以假定存在很大一部分公共特性。</p>
</blockquote>
<h2 id="2-1-lt-script-gt-元素"><a href="#2-1-lt-script-gt-元素" class="headerlink" title="2.1 &lt;script&gt;元素"></a>2.1 <code>&lt;script&gt;</code>元素</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script#%E5%B1%9E%E6%80%A7">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script#%E5%B1%9E%E6%80%A7</a></p>
<blockquote>
<p><code>&lt;script&gt;</code>元素有下列8个属性。</p>
</blockquote>
<blockquote>
<p>把所有JavaScript文件都放在<code>&lt;head&gt;</code>里，也就意味着必须把所有JavaScript代码都下载、解析和解释完成后，才能开始渲染页面（页面在浏览器解析到<code>&lt;body&gt;</code>的起始标签时开始渲染）。对于需要很多JavaScript的页面，这会导致页面渲染的明显延迟，在此期间浏览器窗口完全空白。为解决这个问题，现代Web应用程序通常将所有JavaScript引用放在<code>&lt;body&gt;</code>元素中的页面内容后面</p>
</blockquote>
<blockquote>
<p>defer的属性。这个属性表示脚本在执行的时候不会改变页面的结构。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在<code>&lt;script&gt;</code>元素上设置defer属性，相当于告诉浏览器立即下载，但延迟执行。</p>
</blockquote>
<blockquote>
<p>async属性与defer类似。当然，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。不过，与defer不同的是，标记为async的脚本并不保证能按照它们出现的次序执</p>
</blockquote>
<h2 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h2><blockquote>
<p>JavaScript是通过<code>&lt;script&gt;</code>元素插入到HTML页面中的。这个元素可用于把JavaScript代码嵌入到HTML页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的JavaScript。本章的重点可以总结如下。<br>❑ 要包含外部JavaScript文件，必须将src属性设置为要包含文件的URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。<br>❑ 所有<code>&lt;script&gt;</code>元素会依照它们在网页中出现的次序被解释。在不使用defer和async属性的情况下，包含在<code>&lt;script&gt;</code>元素中的代码必须严格按次序解释。<br>❑ 对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code>元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把<code>&lt;script&gt;</code>元素放到页面末尾，介于主内容之后及</body>标签之前。<br>❑ 可以使用defer属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。<br>❑ 可以使用async属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。<br>❑ 通过使用<code>&lt;noscript&gt;</code>元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染。</p>
</blockquote>
<h2 id="第3章-语言基础"><a href="#第3章-语言基础" class="headerlink" title="第3章 语言基础"></a>第3章 语言基础</h2><blockquote>
<p>语法<br>❑ 数据类型<br>❑ 流控制语句<br>❑ 理解函数任何语言的核心所描述的都是这门语言在最基本的层面上如何工作，涉及语法、操作符、数据类型以及内置功能，在此基础之上才可以构建复杂的解决方案。</p>
</blockquote>
<h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><blockquote>
<p>ECMAScript中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。</p>
</blockquote>
<blockquote>
<p>所谓标识符，就是变量、函数、属性或函数参数的名称。标识符可以由一或多个下列字符组成：<br>❑ 第一个字符必须是一个字母、下划线（_）或美元符号（$）；<br>❑ 剩下的其他字符可以是字母、下划线、美元符号或数字。标识符中的字母可以是扩展ASCII（Extended ASCII）中的字母，也可以是Unicode的字母字符，如À和Æ（但不推荐使用）。</p>
</blockquote>
<blockquote>
<p>按照惯例，ECMAScript标识符使用驼峰大小写形式，即第一个单词的首字母小写，后面每个单词的首字母大写</p>
</blockquote>
<h2 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h2><blockquote>
<p>ECMAScript变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有3个关键字可以声明变量：var、const和let。</p>
</blockquote>
<blockquote>
<p>let声明的范围是块作用域，而var声明的范围是函数作用域。</p>
</blockquote>
<blockquote>
<p>let与var的另一个重要的区别，就是let声明的变量不会在作用域中被提升。</p>
</blockquote>
<blockquote>
<p>在let声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此阶段引用任何后面才声明的变量都会抛出ReferenceError。</p>
</blockquote>
<blockquote>
<p>使用let在全局作用域中声明的变量不会成为window对象的属性（var声明的变量则会）。</p>
</blockquote>
<blockquote>
<p>let声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免SyntaxError，必须确保页面不会重复声明同一个变量。</p>
</blockquote>
<blockquote>
<p>不能使用let进行条件式声明是件好事，因为条件声明是一种反模式，它让程序变得更难理解。如果你发现自己在使用这个模式，那一定有更好的替代方式。</p>
</blockquote>
<blockquote>
<p>let出现之前，for循环定义的迭代变量会渗透到循环体外部</p>
</blockquote>
<blockquote>
<p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部</p>
</blockquote>
<blockquote>
<p>const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改const声明的变量会导致运行时错误。</p>
</blockquote>
<blockquote>
<p>const声明的限制只适用于它指向的变量的引用。换句话说，如果const变量引用的是一个对象，那么修改这个对象内部的属性并不违反const的限制。</p>
</blockquote>
<blockquote>
<p>不能用const来声明迭代变量（因为迭代变量会自增）</p>
</blockquote>
<blockquote>
<p>只想用const声明一个不会被修改的for循环变量，那也是可以的。</p>
</blockquote>
<blockquote>
<p>ECMAScript 6增加let和const从客观上为这门语言更精确地声明作用域和语义提供了更好的支持。</p>
</blockquote>
<blockquote>
<p>使用const声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用const来声明变量，只在提前知道未来会有修改时，再使用let。</p>
</blockquote>
<h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><blockquote>
<p>ECMAScript有6种简单数据类型（也称为原始类型）: Undefined、Null、Boolean、Number、String和Symbol。Symbol（符号）是ECMAScript 6新增的。还有一种复杂数据类型叫Object（对象）。Object是一种无序名值对的集合。</p>
</blockquote>
<p>typeof function () {} &#x2F;&#x2F; “function”<br>typeof Function       &#x2F;&#x2F; “function”<br>typeof Object         &#x2F;&#x2F; “function”<br>typeof Object         &#x2F;&#x2F; “function”<br>typeof []             &#x2F;&#x2F; “object”<br>typeof {}             &#x2F;&#x2F; “object”</p>
<p>Object instanceof Function &#x2F;&#x2F; true<br>Function instanceof Object &#x2F;&#x2F; true</p>
<blockquote>
<p>对一个值使用typeof操作符会返回下列字符串之一：<br>❑ “undefined”表示值未定义；<br>❑ “boolean”表示值为布尔值；<br>❑ “string”表示值为字符串；<br>❑ “number”表示值为数值；<br>❑ “object”表示值为对象（而不是函数）或null；<br>❑ “function”表示值为函数；<br>❑ “symbol”表示值为符号。</p>
</blockquote>
<blockquote>
<p>严格来讲，函数在ECMAScript中被认为是对象，并不代表一种数据类型。可是，函数也有自己特殊的属性。为此，就有必要通过typeof操作符来区分函数和其他对象。</p>
</blockquote>
<blockquote>
<p>Null类型同样只有一个值，即特殊值null。逻辑上讲，null值表示一个空对象指针，这也是给typeof传一个null会返回”object”的原因</p>
</blockquote>
<blockquote>
<p>任何时候，只要变量要保存对象，而当时又没有那个对象可保存，就要用null来填充该变量。这样就可以保持null是空对象指针的语义，并进一步将其与undefined区分开来。</p>
</blockquote>
<blockquote>
<p>这两个布尔值不同于数值，因此true不等于1，false不等于0。</p>
</blockquote>
<blockquote>
<p>布尔值字面量true和false是区分大小写的，因此True和False（及其他大小混写形式）是有效的标识符，但不是布尔值。</p>
</blockquote>
<blockquote>
<p>Number类型使用IEEE 754格式表示整数和浮点值（在某些语言中也叫双精度值）。</p>
</blockquote>
<blockquote>
<p>整数也可以用八进制（以8为基数）或十六进制（以16为基数）字面量表示。对于八进制字面量，第一个数字必须是零（0），然后是相应的八进制数字（数值0~7）。如果字面量中包含的数字超出了应有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数</p>
</blockquote>
<p>ECMAScript 2015或ES6中的八进制值通过前缀0o来表示；严格模式下，前缀0会被视为语法错误，如果要表示八进制值，应该使用前缀0o。——译者注</p>
<blockquote>
<p>八进制字面量在严格模式下是无效的，会导致JavaScript引擎抛出语法错误。</p>
</blockquote>
<blockquote>
<p>八进制字面量在严格模式下是无效的，会导致JavaScript引擎抛出语法错误。</p>
</blockquote>
<blockquote>
<p>要创建十六进制字面量，必须让真正的数值前缀0x（区分大小写），然后是十六进制数字（0~9以及A~F）。十六进制数字中的字母大小写均可。</p>
</blockquote>
<blockquote>
<p>使用八进制和十六进制格式创建的数值在所有数学操作中都被视为十进制数值。</p>
</blockquote>
<blockquote>
<p>因为存储浮点值使用的内存空间是存储整数值的两倍，所以ECMAScript总是想方设法把值转换为整数。在小数点后面没有数字的情况下，数值就会变成整数。类似地，如果数值本身就是整数，只是小数点后面跟着0（如1.0），那它也会被转换为整数</p>
</blockquote>
<blockquote>
<p>对于非常大或非常小的数值，浮点值可以用科学记数法来表示。科学记数法用于表示一个应该乘以10的给定次幂的数值。ECMAScript中科学记数法的格式要求是一个数值（整数或浮点数）后跟一个大写或小写的字母e，再加上一个要乘的10的多少次幂。</p>
</blockquote>
<blockquote>
<p>科学记数法也可以用于表示非常小的数值，例如0.00000000000000003。这个数值用科学记数法可以表示为3e-17。默认情况下，ECMAScript会将小数点后至少包含6个零的浮点值转换为科学记数法（例如，0.000000 3会被转换为3e-7）。</p>
</blockquote>
<blockquote>
<p>浮点值的精确度最高可达17位小数，但在算术计算中远不如整数精确。例如，0.1加0.2得到的不是0.3，而是0.30000000000000004。</p>
</blockquote>
<blockquote>
<p>ECMAScript可以表示的最小数值保存在Number.MIN_VALUE中，这个值在多数浏览器中是5e-324；可以表示的最大数值保存在Number.MAX_VALUE中，这个值在多数浏览器中是1.797693134862315 7e+308。如果某个计算得到的数值结果超出了JavaScript可以表示的范围，那么这个数值会被自动转换为一个特殊的Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以Infinity（正无穷大）表示。</p>
</blockquote>
<p>console.log(0&#x2F;0);     &#x2F;&#x2F; NaN<br>console.log(-0&#x2F;+0);   &#x2F;&#x2F; NaN</p>
<blockquote>
<p>有一个特殊的数值叫NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用0除任意数值在其他语言中通常都会导致错误，从而中止代码执行。但在ECMAScript中，0、+0或-0相除会返回NaN</p>
</blockquote>
<blockquote>
<p>有一个特殊的数值叫NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用0除任意数值在其他语言中通常都会导致错误，从而中止代码执行。但在ECMAScript中，0、+0或-0相除会返回NaN</p>
</blockquote>
<p>console.log(5&#x2F;0);    &#x2F;&#x2F; Infinity<br>console.log(5&#x2F;-0);   &#x2F;&#x2F; -Infinity</p>
<blockquote>
<p>如果分子是非0值，分母是有符号0或无符号0，则会返回Infinity或-Infinity</p>
</blockquote>
<blockquote>
<p>如果分子是非0值，分母是有符号0或无符号0，则会返回Infinity或-Infinity</p>
</blockquote>
<p>NaN计算操作，返回NaN；NaN不等于其本身，用isNaN()判断。</p>
<blockquote>
<p>NaN有几个独特的属性。首先，任何涉及NaN的操作始终返回NaN（如NaN&#x2F;10），在连续多步计算时这可能是个问题。其次，NaN不等于包括NaN在内的任何值。</p>
</blockquote>
<blockquote>
<p>ECMAScript提供了isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给isNaN()后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。</p>
</blockquote>
<p>#TODO</p>
<blockquote>
<p>注意 虽然不常见，但isNaN()可以用于测试对象。此时，首先会调用对象的valueOf()方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用toString()方法，并测试其返回值。这通常是ECMAScript内置函数和操作符的工作方式，本章后面会讨论。</p>
</blockquote>
<blockquote>
<p>有3个函数可以将非数值转换为数值：Number()、parseInt()和parseFloat()。Number()是转型函数，可用于任何数据类型。</p>
</blockquote>
<blockquote>
<p>Number()函数基于如下规则执行转换。<br>❑ 布尔值，true转换为1，false转换为0。<br>❑ 数值，直接返回。<br>❑ null，返回0。<br>❑ undefined，返回NaN。<br>❑ 字符串，应用以下规则。<br>__ ■ 如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。因此，Number(“1”)返回1, Number(“123”)返回123, Number(“011”)返回11（忽略前面的零）。<br>__ ■ 如果字符串包含有效的浮点值格式如”1.1”，则会转换为相应的浮点值（同样，忽略前面的零）。<br>__ ■ 如果字符串包含有效的十六进制格式如”0xf”，则会转换为与该十六进制值对应的十进制整数值。<br>__ ■ 如果是空字符串（不包含字符），则返回0。<br>__ ■ 如果字符串包含除上述情况之外的其他字符，则返回NaN。<br>❑ 对象，调用valueOf()方法，并按照上述规则转换返回的值。如果转换结果是NaN，则调用toString()方法，再按照转换字符串的规则转换。</p>
</blockquote>
<p>parseInt()工作机制：</p>
<ol>
<li>从非空字符开始转换</li>
<li>非数值、加号、减号开头返回NaN</li>
<li>空字符串也返回NaN</li>
<li>非以上情况继续转换</li>
<li>可支持不同的进制格式字符</li>
<li>非数值&#x2F;末尾字符结束转换</li>
<li>第二个参数支持指定2~36进制，强制识别</li>
</ol>
<p>parseInt(‘0xA’, 10) &#x2F;&#x2F; 0xA 十进制为10，此处返回0</p>
<blockquote>
<p>考虑到用Number()函数转换字符串时相对复杂且有点反常规，通常在需要得到整数时可以优先使用parseInt()函数。parseInt()函数更专注于字符串是否包含数值模式。字符串最前面的空格会被忽略，从第一个非空格字符开始转换。如果第一个字符不是数值字符、加号或减号，parseInt()立即返回NaN。这意味着空字符串也会返回NaN（这一点跟Number()不一样，它返回0）。如果第一个字符是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符。比如，”1234blue”会被转换为1234，因为”blue”会被完全忽略。类似地，”22.5”会被转换为22，因为小数点不是有效的整数字符。<br>假设字符串中的第一个字符是数值字符，parseInt()函数也能识别不同的整数格式（十进制、八进制、十六进制）。换句话说，如果字符串以”0x”开头，就会被解释为十六进制整数。如果字符串以”0”开头，且紧跟着数值字符，在非严格模式下会被某些实现解释为八进制整数。</p>
</blockquote>
<blockquote>
<p>考虑到用Number()函数转换字符串时相对复杂且有点反常规，通常在需要得到整数时可以优先使用parseInt()函数。parseInt()函数更专注于字符串是否包含数值模式。字符串最前面的空格会被忽略，从第一个非空格字符开始转换。如果第一个字符不是数值字符、加号或减号，parseInt()立即返回NaN。这意味着空字符串也会返回NaN（这一点跟Number()不一样，它返回0）。如果第一个字符是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符。比如，”1234blue”会被转换为1234，因为”blue”会被完全忽略。类似地，”22.5”会被转换为22，因为小数点不是有效的整数字符。假设字符串中的第一个字符是数值字符，parseInt()函数也能识别不同的整数格式（十进制、八进制、十六进制）。换句话说，如果字符串以”0x”开头，就会被解释为十六进制整数。如果字符串以”0”开头，且紧跟着数值字符，在非严格模式下会被某些实现解释为八进制整数。</p>
</blockquote>
<blockquote>
<p>传底数参数相当于让parseInt()自己决定如何解析，所以为避免解析出错，建议始终传给它第二个参数。</p>
</blockquote>
<blockquote>
<p>parseFloat()函数的工作方式跟parseInt()函数类似，都是从位置0开始检测每个字符。同样，它也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止。这意味着第一次出现的小数点是有效的，但第二次出现的小数点就无效了，此时字符串的剩余字符都会被忽略。因此，”22.34.5”将转换成22.34。</p>
</blockquote>
<blockquote>
<p>parseFloat()函数的另一个不同之处在于，它始终忽略字符串开头的零。这个函数能识别前面讨论的所有浮点格式，以及十进制格式（开头的零始终被忽略）。十六进制数值始终会返回0。因为parseFloat()只解析十进制值，因此不能指定底数。最后，如果字符串表示整数（没有小数点或者小数点后面只有一个零），则parseFloat()返回整数。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Unicode">https://developer.mozilla.org/zh-CN/docs/Glossary/Unicode</a></p>
<blockquote>
<p>String（字符串）数据类型表示零或多个16位Unicode字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（&#96;）标示</p>
</blockquote>
<blockquote>
<p>String（字符串）数据类型表示零或多个16位Unicode字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（&#96;）标示</p>
</blockquote>
<blockquote>
<p>注意 如果字符串中包含双字节字符，那么length属性返回的值可能不是准确的字符数。第5章将具体讨论如何解决这个问题。</p>
</blockquote>
<h2 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h2><blockquote>
<p>后缀版与前缀版的主要区别在于，后缀版递增和递减在语句被求值后才发生。</p>
</blockquote>
<blockquote>
<p>ECMAScript中的所有数值都以IEEE 754 64位格式存储，但位操作并不直接应用到64位表示，而是先把值转换为32位整数，再进行位操作，之后再把结果转换为64位。</p>
</blockquote>
<h2 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h2><blockquote>
<p>JavaScript最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。</p>
</blockquote>
<blockquote>
<p>另一种没那么常用的垃圾回收策略是引用计数（reference counting）。其思路是对每个值都记录它被引用的次数。</p>
</blockquote>
<blockquote>
<p>开发者不知道什么时候运行时会收集垃圾，因此最好的办法是在写代码时就要做到：无论什么时候开始收集垃圾，都能让它尽快结束工作。</p>
</blockquote>
<h2 id="5-3-原始值包装类型"><a href="#5-3-原始值包装类型" class="headerlink" title="5.3 原始值包装类型"></a>5.3 原始值包装类型</h2><blockquote>
<p>JavaScript字符串使用了两种Unicode编码混合的策略：UCS-2和UTF-16。对于可以采用16位编码的字符（U+0000~U+FFFF）</p>
</blockquote>
<h2 id="5-5-小结"><a href="#5-5-小结" class="headerlink" title="5.5 小结"></a>5.5 小结</h2><blockquote>
<p>JavaScript比较独特的一点是，函数实际上是Function类型的实例，也就是说函数也是对象。因为函数也是对象，所以函数也有方法，可以用于增强其能力。</p>
</blockquote>
<h2 id="6-2-Array"><a href="#6-2-Array" class="headerlink" title="6.2 Array"></a>6.2 Array</h2><p>Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p>
<p>显然form比偶of更加强大。</p>
<blockquote>
<p>Array构造函数还有两个ES6新增的用于创建数组的静态方法：from()和of()。from()用于将类数组结构转换为数组实例，而of()用于将一组参数转换为数组实例。</p>
</blockquote>
<blockquote>
<p>Array构造函数还有两个ES6新增的用于创建数组的静态方法：from()和of()。from()用于将类数组结构转换为数组实例，而of()用于将一组参数转换为数组实例。</p>
</blockquote>
<p>function fn () { console.log(Array.from(arguments)) }<br>fn(1,2,3,4,5) &#x2F;&#x2F; Array(5) [ 1, 2, 3, 4, 5 ]</p>
<blockquote>
<p>Array.of()可以把一组参数转换为数组。这个方法用于替代在ES6之前常用的Array.prototype.slice.call(arguments)</p>
</blockquote>
<blockquote>
<p>Array.of()可以把一组参数转换为数组。这个方法用于替代在ES6之前常用的Array.prototype. slice.call(arguments)</p>
</blockquote>
<blockquote>
<p>在ES6中，Array的原型上暴露了3个用于检索数组内容的方法：keys()、values()和entries()。keys()返回数组索引的迭代器，values()返回数组元素的迭代器，而entries()返回索引&#x2F;值对的迭代器</p>
</blockquote>
<blockquote>
<p>栈是一种后进先出（LIFO, Last-In-First-Out）的结构，也就是最近添加的项先被删除。数据项的插入（称为推入，push）和删除（称为弹出，pop）只在栈的一个地方发生，即栈顶。</p>
</blockquote>
<p>push()、shift()</p>
<blockquote>
<p>队列以先进先出（FIFO, First-In-First-Out）形式限制访问。队列在列表末尾添加数据，但从列表开头获取数据。</p>
</blockquote>
<blockquote>
<p>队列以先进先出（FIFO, First-In-First-Out）形式限制访问。队列在列表末尾添加数据，但从列表开头获取数据。</p>
</blockquote>
<h2 id="6-3-定型数组"><a href="#6-3-定型数组" class="headerlink" title="6.3 定型数组"></a>6.3 定型数组</h2><p>只是在介绍一些基础理论还有api使用，并没有涉及具体场景以及区别，详细内容更建议看<a href="https://es6.ruanyifeng.com/#docs/arraybuffer">https://es6.ruanyifeng.com/#docs/arraybuffer</a></p>
<blockquote>
<p>定型数组（typed array）是ECMAScript新增的结构，目的是提升向原生库传输数据的效率。实际上，JavaScript并没有“TypedArray”类型，它所指的其实是一种特殊的包含数值类型的数组。</p>
</blockquote>
<blockquote>
<p>定型数组（typed array）是ECMAScript新增的结构，目的是提升向原生库传输数据的效率。实际上，JavaScript并没有“TypedArray”类型，它所指的其实是一种特殊的包含数值类型的数组。</p>
</blockquote>
<blockquote>
<p>OpenGL ES是OpenGL专注于2D和3D计算机图形的子集。这个新API被命名为WebGL（Web Graphics Library）</p>
</blockquote>
<blockquote>
<p>注意 SharedArrayBuffer是ArrayBuffer的一个变体，可以无须复制就在执行上下文间传递它。关于这种类型，请参考第27章。</p>
</blockquote>
<blockquote>
<p>ArrayBuffer()是一个普通的JavaScript构造函数，可用于在内存中分配特定数量的字节空间。</p>
</blockquote>
<blockquote>
<p>ArrayBuffer某种程度上类似于C++的malloc()，但也有几个明显的区别</p>
</blockquote>
<h2 id="7-1-理解迭代"><a href="#7-1-理解迭代" class="headerlink" title="7.1 理解迭代"></a>7.1 理解迭代</h2><p>Q 迭代是什么？<br>A 有条件的重复执行，循环是是最基础的迭代方式。<br>迭代器模式——某些内置的类型拥有Symbol.iterator属性（该属性是迭代器工厂模式，调用可返回一个新的迭代器）。<br>很多时候不需要显示调用，某些常用操作语法会自动调用。<br> 迭代器API使用next()方法在可迭代对象中遍历数据。每次成功调用next()，都会返回一个IteratorResult对象，其中包含迭代器返回的下一个值。若不调用next()，则无法知道迭代器的当前位置。</p>
<p>非内置支持迭代器的类型也可使用Symbol.iterator定义一个迭代器，显示声明next函数。须知迭代器是一次性的，为了创建多歌迭代器，Symbol.iterator可以使用闭包返回迭代器。</p>
<p>Q 为了解决什么问题？<br>A迭代之前需要事先知道如何使用数据结构、 遍历顺序并不是数据结构固有的。</p>
<p>Q特点是什么？</p>
<p>A迭代器不关注类型的数据结构和遍历顺序（递增、递减等），也可以提前终止迭代器。</p>
<p>——————</p>
<p>Q 生成器是什么？<br>A 一种异步编程解决方案，函数内能暂停和恢复代码执行、带星号（*）的funciton就是一个生成器，初始化的时状态为暂停执行。通过next()方法让生成器开始或恢复执行。yield关键字可以让生成器停止和开始执行。</p>
<p>Q 生成器的作用<br>A 生成器对象作为可迭代对象，next() 开始&#x2F;恢复执行生成器，yield暂停；yied *可产生迭代器对象。</p>
<p>Q 生成器跟迭代器的联系。<br>A 浅显的理解：基于迭代器实现，也有相同的next()函数。也可以把生成器作为迭代对象使用。</p>
<blockquote>
<p>7.1 理解迭代</p>
</blockquote>
<blockquote>
<p>7.1 理解迭代</p>
</blockquote>
<blockquote>
<p>在ECMAScript较早的版本中，执行迭代必须使用循环或其他辅助结构。随着代码量增加，代码会变得越发混乱。很多语言都通过原生语言结构解决了这个问题，开发者无须事先知道如何迭代就能实现迭代操作。这个解决方案就是迭代器模式。</p>
</blockquote>
<h2 id="7-2-迭代器模式"><a href="#7-2-迭代器模式" class="headerlink" title="7.2 迭代器模式"></a>7.2 迭代器模式</h2><blockquote>
<p>迭代器模式（特别是在ECMAScript这个语境下）描述了一个方案，即可以把有些结构称为“可迭代对象”（iterable），因为它们实现了正式的Iterable接口，而且可以通过迭代器Iterator消费。</p>
</blockquote>
<p>‘’[Symbol.iterator]    &#x2F;&#x2F; function Symbol.iterator()<br>‘’<a href="">Symbol.iterator</a> &#x2F;&#x2F;String Iterator {  }</p>
<blockquote>
<p>实现Iterable接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现Iterator接口的对象的能力。在ECMAScript中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的Symbol.iterator作为键。</p>
</blockquote>
<p>Symbol.iterator是一个默认迭代器，要想知道某个类型的变量是否有迭代功能， 可以检测该变量是否拥有该属性；且此属性返回一个迭代器器工厂函数（调用此工厂函数会返回一个新的迭代器），部分内置类型已实现Iterable接口。</p>
<blockquote>
<p>实现Iterable接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现Iterator接口的对象的能力。在ECMAScript中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的Symbol.iterator作为键。</p>
</blockquote>
<blockquote>
<p>实现Iterable接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现Iterator接口的对象的能力。在ECMAScript中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的Symbol.iterator作为键。</p>
</blockquote>
<p>在进行某些操作的时候，会自动调用类型的Symbol.itator迭代工厂函数生成一个迭代器：<br>for (let i of ‘str’) {console.log(i)} &#x2F;&#x2F; 依次输出s、t、r</p>
<blockquote>
<p>实际写代码过程中，不需要显式调用这个工厂函数来生成迭代器。实现可迭代协议的所有类型都会自动兼容接收可迭代对象的任何语言特性。</p>
</blockquote>
<blockquote>
<p>实际写代码过程中，不需要显式调用这个工厂函数来生成迭代器。实现可迭代协议的所有类型都会自动兼容接收可迭代对象的任何语言特性。</p>
</blockquote>
<blockquote>
<p>迭代器API使用next()方法在可迭代对象中遍历数据。每次成功调用next()，都会返回一个IteratorResult对象，其中包含迭代器返回的下一个值。若不调用next()，则无法知道迭代器的当前位置。</p>
</blockquote>
<blockquote>
<p>为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对应一个新计数器。为此，可以把计数器变量放到闭包里，然后通过闭包返回迭代器</p>
</blockquote>
<h2 id="7-3-生成器"><a href="#7-3-生成器" class="headerlink" title="7.3 生成器"></a>7.3 生成器</h2><blockquote>
<p>拥有在一个函数块内暂停和恢复代码执行的能力。这种新能力具有深远的影响，比如，使用生成器可以自定义迭代器和实现协程。</p>
</blockquote>
<h2 id="8-1-理解对象"><a href="#8-1-理解对象" class="headerlink" title="8.1 理解对象"></a>8.1 理解对象</h2><blockquote>
<p>数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。</p>
</blockquote>
<blockquote>
<p>使用解构，可以在一个类似对象字面量的结构中，声明多个变量，同时执行多个赋值操作。</p>
</blockquote>
<h2 id="8-2-创建对象"><a href="#8-2-创建对象" class="headerlink" title="8.2 创建对象"></a>8.2 创建对象</h2><blockquote>
<p>ECMAScript的构造函数就是能创建对象的函数。</p>
</blockquote>
<blockquote>
<p>constructor本来是用于标识对象类型的。不过，一般认为instanceof操作符是确定对象类型更可靠的方式。</p>
</blockquote>
<blockquote>
<p>构造函数也是函数。并没有把某个函数定义为构造函数的特殊语法。</p>
</blockquote>
<blockquote>
<p>ECMAScript的Object类型有一个方法叫Object.getPrototypeOf()，返回参数的内部特性[[Prototype]]的值。</p>
</blockquote>
<blockquote>
<p>Object.values()返回对象值的数组，Object.entries()返回键&#x2F;值对的数组。</p>
</blockquote>
<h2 id="8-4-类"><a href="#8-4-类" class="headerlink" title="8.4 类"></a>8.4 类</h2><blockquote>
<p>类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法</p>
</blockquote>
<blockquote>
<p>ECMAScript中没有正式的类这个类型。从各方面来看，ECMAScript类就是一种特殊函数。声明一个类之后，通过typeof操作符检测类标识符，表明它是一个函数</p>
</blockquote>
<blockquote>
<p>可以把方法定义在类构造函数中或者类块中，但不能在类块中给原型添加原始值或对象作为成员数据：</p>
</blockquote>
<blockquote>
<p>类定义也支持获取和设置访问器。</p>
</blockquote>
<blockquote>
<p>可以在类上定义静态方法。这些方法通常用于执行不特定于实例的操作，也不要求存在类的实例。与原型成员类似，静态成员每个类上只能有一个。</p>
</blockquote>
<blockquote>
<p>类继承使用的是新语法，但背后依旧使用的是原型链。</p>
</blockquote>
<blockquote>
<p>派生类的方法可以通过super关键字引用它们的原型。这个关键字只能在派生类中使用，而且仅限于类构造函数、实例方法和静态方法内部。在类构造函数中使用super可以调用父类构造函数。</p>
</blockquote>
<blockquote>
<p>new.target保存通过new关键字调用的类或函数。通过在实例化时检测new.target是不是抽象基类，可以阻止对抽象基类的实例化</p>
</blockquote>
<blockquote>
<p>ES6类为继承内置引用类型提供了顺畅的机制，开发者可以方便地扩展内置类型</p>
</blockquote>
<blockquote>
<p>软件设计原则：“组合胜过继承（composition over inheritance）。”</p>
</blockquote>
<h2 id="9-1-代理基础"><a href="#9-1-代理基础" class="headerlink" title="9.1 代理基础"></a>9.1 代理基础</h2><blockquote>
<p>代理是使用Proxy构造函数创建的。这个构造函数接收两个参数：目标对象和处理程序对象。</p>
</blockquote>
<blockquote>
<p>使用代理的主要目的是可以定义捕获器（trap）。捕获器就是在处理程序对象中定义的“基本操作的拦截器”。</p>
</blockquote>
<blockquote>
<p>只有在代理对象上执行这些操作才会触发捕获器。在目标对象上执行这些操作仍然会产生正常的行为。</p>
</blockquote>
<h2 id="9-2-代理捕获器与反射方法"><a href="#9-2-代理捕获器与反射方法" class="headerlink" title="9.2 代理捕获器与反射方法"></a>9.2 代理捕获器与反射方法</h2><blockquote>
<p>对于在代理对象上执行的任何一种操作，只会有一个捕获处理程序被调用。不会存在重复捕获的情况。</p>
</blockquote>
<p>Q 捕获器跟反射API的区别？？</p>
<blockquote>
<p>get()捕获器会在获取属性值的操作中被调用。对应的反射API方法为Reflect.get()。</p>
</blockquote>
<blockquote>
<p>get()捕获器会在获取属性值的操作中被调用。对应的反射API方法为Reflect.get()。</p>
</blockquote>
<h2 id="9-4-小结"><a href="#9-4-小结" class="headerlink" title="9.4 小结"></a>9.4 小结</h2><blockquote>
<p>宏观上看，代理是真实JavaScript对象的透明抽象层。代理可以定义包含捕获器的处理程序对象，而这些捕获器可以拦截绝大部分JavaScript的基本操作和方法。在这个捕获器处理程序中，可以修改任何基本操作的行为，当然前提是遵从捕获器不变式。</p>
</blockquote>
<blockquote>
<p>代理的应用场景是不可限量的。开发者使用它可以创建出各种编码模式，比如（但远远不限于）跟踪属性访问、隐藏属性、阻止修改或删除属性、函数参数验证、构造函数参数验证、数据绑定，以及可观察对象。</p>
</blockquote>
<h2 id="第10章-函数"><a href="#第10章-函数" class="headerlink" title="第10章 函数"></a>第10章 函数</h2><blockquote>
<p>因为函数实际上是对象。每个函数都是Function类型的实例，而Function也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。</p>
</blockquote>
<blockquote>
<p>函数想象为对象，把函数名想象为指针</p>
</blockquote>
<h2 id="10-1-箭头函数"><a href="#10-1-箭头函数" class="headerlink" title="10.1 箭头函数"></a>10.1 箭头函数</h2><blockquote>
<p>箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用arguments、super和new.target，也不能用作构造函数。此外，箭头函数也没有prototype属性。</p>
</blockquote>
<h2 id="10-2-函数名"><a href="#10-2-函数名" class="headerlink" title="10.2 函数名"></a>10.2 函数名</h2><blockquote>
<p>ECMAScript 6的所有函数对象都会暴露一个只读的name属性，其中包含关于函数的信息。</p>
</blockquote>
<h2 id="10-3-理解参数"><a href="#10-3-理解参数" class="headerlink" title="10.3 理解参数"></a>10.3 理解参数</h2><blockquote>
<p>arguments对象是一个类数组对象（但不是Array的实例），因此可以使用中括号语法访问其中的元素</p>
</blockquote>
<blockquote>
<p>ECMAScript函数的参数只是为了方便才写出来的，并不是必须写出来的。</p>
</blockquote>
<blockquote>
<p>然箭头函数中没有arguments对象，但可以在包装函数中把它提供给箭头函数</p>
</blockquote>
<h2 id="10-5-默认参数值"><a href="#10-5-默认参数值" class="headerlink" title="10.5 默认参数值"></a>10.5 默认参数值</h2><blockquote>
<p>函数的默认参数只有在函数被调用时才会求值，不会在函数定义时求值。而且，计算默认值的函数只有在调用函数但未传相应参数时才会被调用。</p>
</blockquote>
<h2 id="10-6-参数扩展与收集"><a href="#10-6-参数扩展与收集" class="headerlink" title="10.6 参数扩展与收集"></a>10.6 参数扩展与收集</h2><blockquote>
<p>箭头函数虽然不支持arguments对象，但支持收集参数的定义方式，因此也可以实现与使用arguments一样的逻辑：</p>
</blockquote>
<h2 id="10-7-函数声明与函数表达式"><a href="#10-7-函数声明与函数表达式" class="headerlink" title="10.7 函数声明与函数表达式"></a>10.7 函数声明与函数表达式</h2><blockquote>
<p>JavaScript引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。</p>
</blockquote>
<h2 id="10-9-函数内部"><a href="#10-9-函数内部" class="headerlink" title="10.9 函数内部"></a>10.9 函数内部</h2><blockquote>
<p>使用arguments.callee就可以让函数逻辑与函数名解耦</p>
</blockquote>
<blockquote>
<p>函数名只是保存指针的变量。因此全局定义的sayColor()函数和o.sayColor()是同一个函数，只不过执行的上下文不同。</p>
</blockquote>
<h2 id="10-10-函数属性与方法"><a href="#10-10-函数属性与方法" class="headerlink" title="10.10 函数属性与方法"></a>10.10 函数属性与方法</h2><blockquote>
<p>函数还有两个方法：apply()和call()。</p>
</blockquote>
<blockquote>
<p>使用call()或apply()的好处是可以将任意对象设置为任意函数的作用域，这样对象可以不用关心方法。</p>
</blockquote>
<h2 id="10-14-闭包"><a href="#10-14-闭包" class="headerlink" title="10.14 闭包"></a>10.14 闭包</h2><blockquote>
<p>包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。</p>
</blockquote>
<h2 id="11-1-异步编程"><a href="#11-1-异步编程" class="headerlink" title="11.1 异步编程"></a>11.1 异步编程</h2><blockquote>
<p>同步行为对应内存中顺序执行的处理器指令。</p>
</blockquote>
<blockquote>
<p>异步行为类似于系统中断，即当前进程外部的实体可以触发代码执行。</p>
</blockquote>
<blockquote>
<p>第二个指令块（加操作及赋值操作）是由系统计时器触发的，这会生成一个入队执行的中断。到底什么时候会触发这个中断，这对JavaScript运行时来说是一个黑盒，因此实际上无法预知（尽管可以保证这发生在当前线程的同步代码执行之后，否则回调都没有机会出列被执行）。无论如何，在排定回调以后基本没办法知道系统状态何时变化。</p>
</blockquote>
<blockquote>
<p>随着代码越来越复杂，回调策略是不具有扩展性的。“回调地狱”这个称呼可谓名至实归。嵌套回调的代码维护起来就是噩梦。</p>
</blockquote>
<h2 id="11-2-期约"><a href="#11-2-期约" class="headerlink" title="11.2 期约"></a>11.2 期约</h2><blockquote>
<p>2012年Promises&#x2F;A+组织分叉（fork）了CommonJS的Promises&#x2F;A建议，并以相同的名字制定了Promises&#x2F;A+规范。这个规范最终成为了ECMAScript 6规范实现的范本。</p>
</blockquote>
<blockquote>
<p>❑ 待定（pending）<br>❑ 兑现（fulfilled，有时候也称为“解决”, resolved）<br>❑ 拒绝（rejected）</p>
</blockquote>
<blockquote>
<p>无论落定为哪种状态都是不可逆的。只要从待定转换为兑现或拒绝，期约的状态就不再改变。</p>
</blockquote>
<blockquote>
<p>期约故意将异步行为封装起来，从而隔离外部的同步代码。</p>
</blockquote>
<blockquote>
<p>对这个静态方法而言，如果传入的参数本身是一个期约，那它的行为就类似于一个空包装。因此，Promise.resolve()可以说是一个幂等方法</p>
</blockquote>
<blockquote>
<p>Promise.reject()会实例化一个拒绝的期约并抛出一个异步错误（这个错误不能通过try&#x2F;catch捕获，而只能通过拒绝处理程序捕获）</p>
</blockquote>
<blockquote>
<p>拒绝期约的错误并没有抛到执行同步代码的线程里，而是通过浏览器异步消息队列来处理的。因此，try&#x2F;catch块并不能捕获该错误。</p>
</blockquote>
<blockquote>
<p>then()和catch()的onRejected处理程序在语义上相当于try&#x2F;catch。出发点都是捕获错误之后将其隔离，同时不影响正常逻辑执行。</p>
</blockquote>
<h2 id="11-3-异步函数"><a href="#11-3-异步函数" class="headerlink" title="11.3 异步函数"></a>11.3 异步函数</h2><blockquote>
<p>[插图]</p>
</blockquote>
<h2 id="11-4-小结"><a href="#11-4-小结" class="headerlink" title="11.4 小结"></a>11.4 小结</h2><blockquote>
<p>异步函数是将期约应用于JavaScript函数的结果。异步函数可以暂停执行，而不阻塞主线程。</p>
</blockquote>
<h2 id="12-1-window对象"><a href="#12-1-window对象" class="headerlink" title="12.1 window对象"></a>12.1 window对象</h2><blockquote>
<p>BOM的核心是window对象，表示浏览器的实例。window对象在浏览器中有两重身份，一个是ECMAScript中的Global对象，另一个就是浏览器窗口的JavaScript接口。</p>
</blockquote>
<blockquote>
<p>如果在这里使用let或const替代var，则不会把变量添加给全局对象</p>
</blockquote>
<blockquote>
<p>window.devicePixelRatio实际上与每英寸像素数（DPI, dots per inch）是对应的。DPI表示单位像素密度，而window.devicePixelRatio表示物理像素与逻辑像素之间的缩放系数。</p>
</blockquote>
<h2 id="12-2-location对象"><a href="#12-2-location对象" class="headerlink" title="12.2 location对象"></a>12.2 location对象</h2><blockquote>
<p>它既是window的属性，也是document的属性。也就是说，window.location和document.location指向同一个对象。</p>
</blockquote>
<blockquote>
<p>URLSearchParams提供了一组标准API方法，通过它们可以检查和修改查询字符串。</p>
</blockquote>
<h2 id="14-1-节点层级"><a href="#14-1-节点层级" class="headerlink" title="14.1 节点层级"></a>14.1 节点层级</h2><blockquote>
<p>其中，document节点表示每个文档的根节点。在这里，根节点的唯一子节点是<code>&lt;html&gt;</code>元素，我们称之为文档元素（documentElement）。文档元素是文档最外层的元素，所有其他元素都存在于这个元素之内。每个文档只能有一个文档元素。</p>
</blockquote>
<h2 id="15-1-Selectors-API"><a href="#15-1-Selectors-API" class="headerlink" title="15.1 Selectors API"></a>15.1 Selectors API</h2><blockquote>
<p>则querySelector()方法会抛出错误。</p>
</blockquote>
<blockquote>
<p>querySelectorAll()返回的NodeList实例一个属性和方法都不缺，但它是一个静态的“快照”，而非“实时”的查询。</p>
</blockquote>
<h2 id="第16章-DOM2和DOM3"><a href="#第16章-DOM2和DOM3" class="headerlink" title="第16章 DOM2和DOM3"></a>第16章 DOM2和DOM3</h2><blockquote>
<p>DOM1（DOM Level 1）主要定义了HTML和XML文档的底层结构。DOM2（DOM Level 2）和DOM3（DOM Level 3）在这些结构之上加入更多交互能力，提供了更高级的XML特性。</p>
</blockquote>
<h2 id="16-2-样式"><a href="#16-2-样式" class="headerlink" title="16.2 样式"></a>16.2 样式</h2><blockquote>
<p>浏览器在每个元素上都暴露了getBoundingClientRect()方法，返回一个DOMRect对象，包含6个属性：left、top、right、bottom、height和width。这些属性给出了元素在页面中相对于视口的位置。图16-4[插图]展示了这些属性的含义。</p>
</blockquote>
<h2 id="17-1-事件流"><a href="#17-1-事件流" class="headerlink" title="17.1 事件流"></a>17.1 事件流</h2><blockquote>
<p>IE事件流被称为事件冒泡，这是因为事件被定义为从最具体的元素（文档树中最深的节点）开始触发，然后向上传播至没有那么具体的元素（文档）。</p>
</blockquote>
<blockquote>
<p>Netscape Communicator团队提出了另一种名为事件捕获的事件流。事件捕获的意思是最不具体的节点应该最先收到事件，而最具体的节点应该最后收到事件</p>
</blockquote>
<blockquote>
<p>由于旧版本浏览器不支持，因此实际当中几乎不会使用事件捕获。通常建议使用事件冒泡，特殊情况下可以使用事件捕获。</p>
</blockquote>
<blockquote>
<p>DOM2 Events规范规定事件流分为3个阶段：事件捕获、到达目标和事件冒泡。</p>
</blockquote>
<h2 id="17-2-事件处理程序"><a href="#17-2-事件处理程序" class="headerlink" title="17.2 事件处理程序"></a>17.2 事件处理程序</h2><blockquote>
<p>在JavaScript中指定事件处理程序的传统方式是把一个函数赋值给（DOM元素的）一个事件处理程序属性。</p>
</blockquote>
<blockquote>
<p>DOM2 Events为事件处理程序的赋值和移除定义了两个方法：addEventListener()和remove-EventListener()。</p>
</blockquote>
<blockquote>
<p>大多数情况下，事件处理程序会被添加到事件流的冒泡阶段，主要原因是跨浏览器兼容性好。把事件处理程序注册到捕获阶段通常用于在事件到达其指定目标之前拦截事件。如果不需要拦截，则不要使用事件捕获。</p>
</blockquote>
<blockquote>
<p>IE实现了与DOM类似的方法，即attachEvent()和detachEvent()。这两个方法接收两个同样的参数：事件处理程序的名字和事件处理函数。</p>
</blockquote>
<h2 id="17-3-事件对象"><a href="#17-3-事件对象" class="headerlink" title="17.3 事件对象"></a>17.3 事件对象</h2><blockquote>
<p>preventDefault()方法用于阻止特定事件的默认动作。</p>
</blockquote>
<blockquote>
<p>stopPropagation()方法用于立即阻止事件流在DOM结构中传播，取消后续的事件捕获或冒泡。</p>
</blockquote>
<h2 id="17-4-事件类型"><a href="#17-4-事件类型" class="headerlink" title="17.4 事件类型"></a>17.4 事件类型</h2><blockquote>
<p>当用户按下键盘上的某个字符键时，首先会触发keydown事件，然后触发keypress事件，最后触发keyup事件。</p>
</blockquote>
<blockquote>
<p>对于非字符键，在键盘上按一下这个键，会先触发keydown事件，然后触发keyup事件。如果按住某个非字符键不放，则会重复触发keydown事件，直到这个键被释放，此时会触发keyup事件。</p>
</blockquote>
<blockquote>
<p>对于keydown和keyup事件，event对象的keyCode属性中会保存一个键码，对应键盘上特定的一个键。对于字母和数字键，keyCode的值与小写字母和数字的ASCII编码一致。</p>
</blockquote>
<blockquote>
<p>浏览器在event对象上支持charCode属性，只有发生keypress事件时这个属性才会被设置值，包含的是按键字符对应的ASCII编码。</p>
</blockquote>
<blockquote>
<p>一旦有了字母编码，就可以使用String.fromCharCode()方法将其转换为实际的字符了。</p>
</blockquote>
<h2 id="17-5-内存与性能"><a href="#17-5-内存与性能" class="headerlink" title="17.5 内存与性能"></a>17.5 内存与性能</h2><blockquote>
<p>事件委托利用事件冒泡，可以只使用一个事件处理程序来管理一种类型的事件。</p>
</blockquote>
<blockquote>
<p>被innerHTML删除的元素上如果有事件处理程序，就不会被垃圾收集程序正常清理。</p>
</blockquote>
<blockquote>
<p>如果在页面卸载后事件处理程序没有被清理，则它们仍然会残留在内存中。之后，浏览器每次加载和卸载页面（比如通过前进、后退或刷新），内存中残留对象的数量都会增加，这是因为事件处理程序不会被回收。</p>
</blockquote>
<h2 id="17-6-模拟事件"><a href="#17-6-模拟事件" class="headerlink" title="17.6 模拟事件"></a>17.6 模拟事件</h2><blockquote>
<p>任何时候，都可以使用document.createEvent()方法创建一个event对象。这个方法接收一个参数，此参数是一个表示要创建事件类型的字符串。</p>
</blockquote>
<blockquote>
<p>DOM3增加了自定义事件的类型。自定义事件不会触发原生DOM事件，但可以让开发者定义自己的事件。要创建自定义事件，需要调用createEvent(“CustomEvent”)。</p>
</blockquote>
<h2 id="18-1-使用requestAnimationFrame"><a href="#18-1-使用requestAnimationFrame" class="headerlink" title="18.1 使用requestAnimationFrame"></a>18.1 使用requestAnimationFrame</h2><blockquote>
<p>因此，实现平滑动画最佳的重绘间隔为1000毫秒&#x2F;60，大约17毫秒。以这个速度重绘可以实现最平滑的动画，因为这已经是浏览器的极限了。</p>
</blockquote>
<blockquote>
<p>因为requestAnimationFrame()只会调用一次传入的函数，所以每次更新用户界面时需要再手动调用它一次。同样，也需要控制动画何时停止。结果就会得到非常平滑的动画。</p>
</blockquote>
<blockquote>
<p>通过requestAnimationFrame节流</p>
</blockquote>
<h2 id="19-5-富文本编辑"><a href="#19-5-富文本编辑" class="headerlink" title="19.5 富文本编辑"></a>19.5 富文本编辑</h2><blockquote>
<p>在空白HTML文件中嵌入一个iframe。通过designMode属性，可以将这个空白文档变成可以编辑的，实际编辑的则是<code>&lt;body&gt;</code>元素的HTML。</p>
</blockquote>
<h2 id="20-1-Atomics与SharedArrayBuffer"><a href="#20-1-Atomics与SharedArrayBuffer" class="headerlink" title="20.1 Atomics与SharedArrayBuffer"></a>20.1 Atomics与SharedArrayBuffer</h2><blockquote>
<p>SharedArrayBuffer与ArrayBuffer具有同样的API。二者的主要区别是ArrayBuffer必须在不同执行上下文间切换，SharedArrayBuffer则可以被任意多个执行上下文同时使用。</p>
</blockquote>
<blockquote>
<p>浏览器的JavaScript编译器和CPU架构本身都有权限重排指令以提升程序执行效率。正常情况下，JavaScript的单线程环境是可以随时进行这种优化的。但多线程下的指令重排可能导致资源争用，而且极难排错。</p>
</blockquote>
<h2 id="20-2-跨上下文消息"><a href="#20-2-跨上下文消息" class="headerlink" title="20.2 跨上下文消息"></a>20.2 跨上下文消息</h2><blockquote>
<p>跨文档消息，有时候也简称为XDM（cross-document messaging），是一种在不同执行上下文（如不同工作线程或不同源的页面）间传递信息的能力。</p>
</blockquote>
<h2 id="20-3-Encoding-API"><a href="#20-3-Encoding-API" class="headerlink" title="20.3 Encoding API"></a>20.3 Encoding API</h2><blockquote>
<p>Encoding API主要用于实现字符串与定型数组之间的转换。规范新增了4个用于执行转换的全局类：TextEncoder、TextEncoderStream、TextDecoder和TextDecoderStream。</p>
</blockquote>
<h2 id="20-4-File-API与Blob-API"><a href="#20-4-File-API与Blob-API" class="headerlink" title="20.4 File API与Blob API"></a>20.4 File API与Blob API</h2><blockquote>
<p>File API仍然以表单中的文件输入字段为基础，但是增加了直接访问文件信息的能力。</p>
</blockquote>
<blockquote>
<p>FileReader类型表示一种异步文件读取机制。可以把FileReader想象成类似于XMLHttpRequest，只不过是用于从文件系统读取文件，而不是从服务器读取数据。F</p>
</blockquote>
<blockquote>
<p>blob表示二进制大对象（binary larget object），是JavaScript对不可修改二进制数据的封装类型。包含字符串的数组、ArrayBuffers、ArrayBufferViews，甚至其他Blob都可以用来创建blob。</p>
</blockquote>
<blockquote>
<p>对象URL有时候也称作Blob URL，是指引用存储在File或Blob中数据的URL。</p>
</blockquote>
<blockquote>
<p>创建对象URL，可以使用window.URL.createObjectURL()方法并传入File或Blob对象。这个函数返回的值是一个指向内存中地址的字符串。</p>
</blockquote>
<blockquote>
<p>使用完数据之后，最好能释放与之关联的内存。只要对象URL在使用中，就不能释放内存。如果想表明不再使用某个对象URL，则可以把它传给window.URL.revokeObjectURL()。页面卸载时，所有对象URL占用的内存都会被释放。不过，最好在不使用时就立即释放内存，以便尽可能保持页面占用最少资源。</p>
</blockquote>
<h2 id="20-8-Page-Visibility-API"><a href="#20-8-Page-Visibility-API" class="headerlink" title="20.8 Page Visibility API"></a>20.8 Page Visibility API</h2><blockquote>
<p>Web开发中一个常见的问题是开发者不知道用户什么时候真正在使用页面。如果页面被最小化或隐藏在其他标签页后面，那么轮询服务器或更新动画等功能可能就没有必要了</p>
</blockquote>
<h2 id="20-9-Streams-API"><a href="#20-9-Streams-API" class="headerlink" title="20.9 Streams API"></a>20.9 Streams API</h2><blockquote>
<p>流的基本单位是块（chunk）。块可是任意数据类型，但通常是定型数组。</p>
</blockquote>
<h2 id="20-10-计时API"><a href="#20-10-计时API" class="headerlink" title="20.10 计时API"></a>20.10 计时API</h2><p>微秒 [1]  ，时间单位，符号μs（英语：microsecond ），1微秒等于百万分之一秒（10的负6次方秒），1毫秒等于千分之一秒（10的负3次方秒） [2]  。</p>
<blockquote>
<p>为此，必须使用不同的计时API来精确且准确地度量时间的流逝。HighResolution Time API定义了window.performance.now()，这个方法返回一个微秒精度的浮点值。</p>
</blockquote>
<blockquote>
<p>为此，必须使用不同的计时API来精确且准确地度量时间的流逝。HighResolution Time API定义了window.performance.now()，这个方法返回一个微秒精度的浮点值。</p>
</blockquote>
<blockquote>
<p>Navigation Timing API提供了高精度时间戳，用于度量当前页面加载速度。</p>
</blockquote>
<blockquote>
<p>Resource Timing API提供了高精度时间戳，用于度量当前页面加载时请求资源的速度。</p>
</blockquote>
<h2 id="20-11-Web组件"><a href="#20-11-Web组件" class="headerlink" title="20.11 Web组件"></a>20.11 Web组件</h2><blockquote>
<p>概念上讲，影子DOM（shadow DOM）Web组件相当直观，通过它可以将一个完整的DOM树作为节点添加到父DOM树。</p>
</blockquote>
<blockquote>
<p>浏览器会尝试将无法识别的元素作为通用元素整合进DOM。当然，这些元素默认也不会做任何通用HTML元素不能做的事。</p>
</blockquote>
<blockquote>
<p>调用customElements.define()方法可以创建自定义元素。</p>
</blockquote>
<h2 id="20-12-Web-Cryptography-API"><a href="#20-12-Web-Cryptography-API" class="headerlink" title="20.12 Web Cryptography API"></a>20.12 Web Cryptography API</h2><blockquote>
<p>生成、使用和应用加密密钥对，加密和解密消息</p>
</blockquote>
<blockquote>
<p>在需要生成随机值时，很多人会使用Math.random()。这个方法在浏览器中是以伪随机数生成器（PRNG, PseudoRandom Number Generator）方式实现的。所谓“伪”指的是生成值的过程不是真的随机。PRNG生成的值只是模拟了随机的特性。浏览器的PRNG并未使用真正的随机源，只是对一个内部状态应用了固定的算法。</p>
</blockquote>
<blockquote>
<p>初始状态在重复自身之前都会产生2128-1个伪随机值。这种循环被称为置换循环（permutation cycle），而这个循环的长度被称为一个周期（period）。</p>
</blockquote>
<blockquote>
<p>伪随机数生成器主要用于快速计算出看起来随机的值。</p>
</blockquote>
<blockquote>
<p>密码学安全伪随机数生成器（CSPRNG, Cryptographically Secure PseudoRandom Number Generator）额外增加了一个熵作为输入，例如测试硬件时间或其他无法预计行为的系统特性。这样一来，计算速度明显比常规PRNG慢很多，但CSPRNG生成的值就很难预测，可以用于加密了。</p>
</blockquote>
<blockquote>
<p>加密、散列、签名和生成密钥</p>
</blockquote>
<blockquote>
<p>❑ SHA-1（Secure Hash Algorithm 1）：架构类似MD5的散列函数。</p>
</blockquote>
<blockquote>
<p>❑ SHA-2（Secure Hash Algorithm 2）：构建于相同耐碰撞单向压缩函数之上的一套散列函数。</p>
</blockquote>
<blockquote>
<p>这个算法被认为是安全的，广泛应用于很多领域和协议，包括TLS、PGP和加密货币（如比特币）。</p>
</blockquote>
<h2 id="21-2-错误处理"><a href="#21-2-错误处理" class="headerlink" title="21.2 错误处理"></a>21.2 错误处理</h2><blockquote>
<p>错误处理在编程中的重要性毋庸置疑。所有主流Web应用程序都需要定义完善的错误处理协议，大多数优秀的应用程序有自己的错误处理策略，尽管主要逻辑是放在服务器端的。</p>
</blockquote>
<blockquote>
<p>InternalError类型的错误会在底层JavaScript引擎抛出异常时由浏览器抛出。例如，递归过多导致了栈溢出。</p>
</blockquote>
<blockquote>
<p>RangeError错误会在数值越界时抛出。</p>
</blockquote>
<blockquote>
<p>ReferenceError会在找不到对象时发生。</p>
</blockquote>
<blockquote>
<p>最后一种错误类型是URIError，只会在使用encodeURI()或decodeURI()但传入了格式错误的URI时发生。</p>
</blockquote>
<blockquote>
<p>使用throw操作符时，代码立即停止执行，除非try&#x2F;catch语句捕获了抛出的值。</p>
</blockquote>
<blockquote>
<p>捕获错误的目的是阻止浏览器以其默认方式响应；抛出错误的目的是为错误提供有关其发生原因的说明。</p>
</blockquote>
<blockquote>
<p>何没有被try&#x2F;catch语句处理的错误都会在window对象上触发error事件。</p>
</blockquote>
<blockquote>
<p>Web应用程序开发中的一个常见做法是建立中心化的错误日志存储和跟踪系统。</p>
</blockquote>
<h2 id="21-3-调试技术"><a href="#21-3-调试技术" class="headerlink" title="21.3 调试技术"></a>21.3 调试技术</h2><blockquote>
<p>浏览器控制台是个读取-求值-打印-循环（REPL, read-eval-print-loop），与页面的JavaScript运行时并发。</p>
</blockquote>
<h2 id="21-4-旧版IE的常见错误"><a href="#21-4-旧版IE的常见错误" class="headerlink" title="21.4 旧版IE的常见错误"></a>21.4 旧版IE的常见错误</h2><blockquote>
<p>旧版IE中所有DOM对象都是用COM对象实现的，并非原生JavaScript对象。在涉及垃圾回收时，这可能会导致很多奇怪的行为。其中，”member not found”错误是IE中垃圾回收程序常报告的错误。</p>
</blockquote>
<h2 id="22-2-浏览器对XPath的支持"><a href="#22-2-浏览器对XPath的支持" class="headerlink" title="22.2 浏览器对XPath的支持"></a>22.2 浏览器对XPath的支持</h2><blockquote>
<p>XPath是为了在DOM文档中定位特定节点而创建的，因此它对XML处理很重要。</p>
</blockquote>
<h2 id="第23章-JSON"><a href="#第23章-JSON" class="headerlink" title="第23章 JSON"></a>第23章 JSON</h2><blockquote>
<p>理解JSON最关键的一点是要把它当成一种数据格式，而不是编程语言。</p>
</blockquote>
<blockquote>
<p>JSON也不是只能在JavaScript中使用，它是一种通用数据格式。很多语言都有解析和序列化JSON的内置能力。</p>
</blockquote>
<h2 id="23-1-语法"><a href="#23-1-语法" class="headerlink" title="23.1 语法"></a>23.1 语法</h2><blockquote>
<p>JSON没有变量、函数或对象实例的概念。</p>
</blockquote>
<h2 id="23-2-解析与序列化"><a href="#23-2-解析与序列化" class="headerlink" title="23.2 解析与序列化"></a>23.2 解析与序列化</h2><blockquote>
<p>在序列化JavaScript对象时，所有函数和原型成员都会有意地在结果中省略。此外，值为undefined的任何属性也会被跳过。最终得到的就是所有实例属性均为有效JSON数据类型的表示。</p>
</blockquote>
<h2 id="24-1-XMLHttpRequest对象"><a href="#24-1-XMLHttpRequest对象" class="headerlink" title="24.1 XMLHttpRequest对象"></a>24.1 XMLHttpRequest对象</h2><blockquote>
<p>发送GET请求最常见的一个错误是查询字符串格式不对。查询字符串中的每个名和值都必须使用encodeURIComponent()编码，所有名&#x2F;值对必须以和号（&amp;）分隔</p>
</blockquote>
<blockquote>
<p>XHR模拟表单提交。为此，第一步需要把Content-Type头部设置为”application&#x2F;x-www-formurlencoded”，这是提交表单时使用的内容类型。</p>
</blockquote>
<blockquote>
<p>现代Web应用程序中经常需要对表单数据进行序列化，因此XMLHttpRequest Level 2新增了FormData类型。FormData类型便于表单序列化，也便于创建与表单类似格式的数据然后通过XHR发送。</p>
</blockquote>
<h2 id="24-2-进度事件"><a href="#24-2-进度事件" class="headerlink" title="24.2 进度事件"></a>24.2 进度事件</h2><blockquote>
<p>Progress Events是W3C的工作草案，定义了客户端-服务器端通信。</p>
</blockquote>
<h2 id="24-3-跨源资源共享"><a href="#24-3-跨源资源共享" class="headerlink" title="24.3 跨源资源共享"></a>24.3 跨源资源共享</h2><blockquote>
<p>最好在访问本地资源时使用相对URL，在访问远程资源时使用绝对URL。</p>
</blockquote>
<blockquote>
<p>默认情况下，跨源请求不提供凭据（cookie、HTTP认证和客户端SSL证书）。可以通过将withCredentials属性设置为true来表明请求会发送凭据。</p>
</blockquote>
<h2 id="24-4-替代性跨源技术"><a href="#24-4-替代性跨源技术" class="headerlink" title="24.4 替代性跨源技术"></a>24.4 替代性跨源技术</h2><blockquote>
<p>这种动态创建图片的技术经常用于图片探测（image pings）。图片探测是与服务器之间简单、跨域、单向的通信。</p>
</blockquote>
<blockquote>
<p>图片探测频繁用于跟踪用户在页面上的点击操作或动态显示广告。当然，图片探测的缺点是只能发送GET请求和无法获取服务器响应的内容。这也是只能利用图片探测实现浏览器与服务器单向通信的原因。</p>
</blockquote>
<blockquote>
<p>JSONP格式包含两个部分：回调和数据。</p>
</blockquote>
<h2 id="24-5-Fetch-API"><a href="#24-5-Fetch-API" class="headerlink" title="24.5 Fetch API"></a>24.5 Fetch API</h2><blockquote>
<p>系统级网络协议已经成功完成消息的一次往返传输。至于真正的“成功”请求，则需要在处理响应时再定义。</p>
</blockquote>
<blockquote>
<p>因为服务器没有响应而导致浏览器超时，这样真正的fetch()失败会导致期约被拒绝</p>
</blockquote>
<blockquote>
<p>Headers对象是所有外发请求和入站响应头部的容器。</p>
</blockquote>
<blockquote>
<p>Headers对象与Map对象极为相似。这是合理的，因为HTTP头部本质上是序列化后的键&#x2F;值对，它们的JavaScript表示则是中间接口。</p>
</blockquote>
<blockquote>
<p>顾名思义，Request对象是获取资源请求的接口。这个接口暴露了请求的相关信息，也暴露了使用请求体的不同方式。</p>
</blockquote>
<h2 id="24-6-Beacon-API"><a href="#24-6-Beacon-API" class="headerlink" title="24.6 Beacon API"></a>24.6 Beacon API</h2><blockquote>
<p>unload事件对浏览器意味着没有理由再发送任何结果未知的网络请求（因为页面都要被销毁了）</p>
</blockquote>
<h2 id="24-7-Web-Socket"><a href="#24-7-Web-Socket" class="headerlink" title="24.7 Web Socket"></a>24.7 Web Socket</h2><blockquote>
<p>客户端与服务器之间可以发送非常少的数据，不会对HTTP造成任何负担。使用更小的数据包让Web Socket非常适合带宽和延迟问题比较明显的移动应用。</p>
</blockquote>
<h2 id="25-1-cookie"><a href="#25-1-cookie" class="headerlink" title="25.1 cookie"></a>25.1 cookie</h2><blockquote>
<p>所有名和值都是URL编码的，因此必须使用decodeURIComponent()解码。</p>
</blockquote>
<blockquote>
<p>为绕过浏览器对每个域cookie数的限制，有些开发者提出了子cookie的概念。子cookie是在单个cookie存储的小块数据，本质上是使用cookie的值在单个cookie中存储多个名&#x2F;值对。</p>
</blockquote>
<h2 id="25-2-Web-Storage"><a href="#25-2-Web-Storage" class="headerlink" title="25.2 Web Storage"></a>25.2 Web Storage</h2><blockquote>
<p>Web Storage的第2版定义了两个对象：localStorage和sessionStorage。localStorage是永久存储机制，sessionStorage是跨会话的存储机制。这两种浏览器存储API提供了在浏览器中不受页面刷新影响而存储数据的两种方式。</p>
</blockquote>
<h2 id="26-1-理解模块模式"><a href="#26-1-理解模块模式" class="headerlink" title="26.1 理解模块模式"></a>26.1 理解模块模式</h2><blockquote>
<p>模块系统的核心是管理依赖。</p>
</blockquote>
<h2 id="26-3-使用ES6之前的模块加载器"><a href="#26-3-使用ES6之前的模块加载器" class="headerlink" title="26.3 使用ES6之前的模块加载器"></a>26.3 使用ES6之前的模块加载器</h2><blockquote>
<p>为了统一CommonJS和AMD生态系统，通用模块定义（UMD, Universal Module Definition）规范应运而生。UMD可用于创建这两个系统都可以使用的模块代码。</p>
</blockquote>
<h2 id="第27章-工作者线程"><a href="#第27章-工作者线程" class="headerlink" title="第27章 工作者线程"></a>第27章 工作者线程</h2><blockquote>
<p>工作者线程的价值所在：允许把主线程的工作转嫁给独立的实体，而不会改变现有的单线程模型。</p>
</blockquote>
<h2 id="27-1-工作者线程简介"><a href="#27-1-工作者线程简介" class="headerlink" title="27.1 工作者线程简介"></a>27.1 工作者线程简介</h2><blockquote>
<p>JavaScript环境实际上是运行在托管操作系统中的虚拟环境。在浏览器中每打开一个页面，就会分配一个它自己的环境。</p>
</blockquote>
<blockquote>
<p>使用工作者线程，浏览器可以在原始页面环境之外再分配一个完全独立的二级子环境。这个子环境不能与依赖单线程交互的API（如DOM）互操作，但可以与父环境并行执行代码。</p>
</blockquote>
<blockquote>
<p>工作者线程是以实际线程实现的。</p>
</blockquote>
<blockquote>
<p>工作者线程并行执行。</p>
</blockquote>
<blockquote>
<p>工作者线程可以共享某些内存</p>
</blockquote>
<blockquote>
<p>Web工作者线程规范中定义了三种主要的工作者线程：专用工作者线程、共享工作者线程和服务工作者线程。现代浏览器都支持这些工作者线程。</p>
</blockquote>
<h2 id="27-2-专用工作者线程"><a href="#27-2-专用工作者线程" class="headerlink" title="27.2 专用工作者线程"></a>27.2 专用工作者线程</h2><blockquote>
<p>支持传统多线程模型的语言中，可以使用锁、互斥量，以及volatile变量。在JavaScript中，有三种在上下文间转移信息的方式：结构化克隆算法（structured clone algorithm）、可转移对象（transferable objects）和共享数组缓冲区（shared array buffers）。</p>
</blockquote>
<blockquote>
<p>始终保持固定数量的线程活动，需要时就把任务分派给它们。</p>
</blockquote>
<h2 id="27-5-小结"><a href="#27-5-小结" class="headerlink" title="27.5 小结"></a>27.5 小结</h2><blockquote>
<p>工作者线程可以是专用线程、共享线程。专用线程只能由一个页面使用，而共享线程则可以由同源的任意页面共享。</p>
</blockquote>
<blockquote>
<p>服务工作者线程用于让网页模拟原生应用程序。服务工作者线程也是一种工作者线程，但它们更像是网络代理，而非独立的浏览器线程。</p>
</blockquote>
<h2 id="28-1-可维护性"><a href="#28-1-可维护性" class="headerlink" title="28.1 可维护性"></a>28.1 可维护性</h2><blockquote>
<p>JavaScript并不强迫开发者把任何东西都定义为对象。它支持任何编程风格，包括传统的面向对象编程、声明式编程，以及函数式编程。</p>
</blockquote>
<blockquote>
<p>最好的方法是永远不要修改不属于你的对象。只有你自己创建的才是你的对象，包括自定义类型和对象字面量。</p>
</blockquote>
<h2 id="28-2-性能"><a href="#28-2-性能" class="headerlink" title="28.2 性能"></a>28.2 性能</h2><blockquote>
<p>只要函数中有引用超过两次的全局对象，就应该把这个对象保存为一个局部变量。</p>
</blockquote>
<blockquote>
<p>达夫设备的基本思路是以8的倍数作为迭代次数从而将循环展开为一系列语句。</p>
</blockquote>
<blockquote>
<p>求模、逻辑AND与和逻辑OR或都很适合替代成位操作。</p>
</blockquote>
<h2 id="A-5-数组打平方法"><a href="#A-5-数组打平方法" class="headerlink" title="A.5 数组打平方法"></a>A.5 数组打平方法</h2><blockquote>
<p>CMAScript 2019在Array.prototype上增加了两个方法：flat()和flatMap()。这两个方法为打平数组提供了便利。如果没有这两个方法，则打平数组就要使用迭代或递归。</p>
</blockquote>
<h2 id="A-6-Object-fromEntries"><a href="#A-6-Object-fromEntries" class="headerlink" title="A.6 Object.fromEntries()"></a>A.6 Object.fromEntries()</h2><blockquote>
<p>ECMAScript 2019又给Object类添加了一个静态方法fromEntries()，用于通过键&#x2F;值对数组的集合构建对象。这个方法执行与Object.entries()方法相反的操作。</p>
</blockquote>
<blockquote>
<p>这个方法可以方便地将Map实例转换为Object实例，因为Map迭代器返回的结果与fromEntries()的参数恰好匹配</p>
</blockquote>
<h2 id="B-6-类与模块"><a href="#B-6-类与模块" class="headerlink" title="B.6 类与模块"></a>B.6 类与模块</h2><blockquote>
<p>TC39委员会决定在ES6类和模块中定义的所有代码默认都处于严格模式。</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>不再性感，不再赚钱，数据科学的时代变了</title>
    <url>//post/database/</url>
    <content><![CDATA[<blockquote>
<p>作者：Vicki Boykis | 译者：阿拉丁 </p>
</blockquote>
<blockquote>
<p>阅读数：678 2019 年 3 月 2 日 | 话题：大数据  AI 最佳实践</p>
</blockquote>
<pre><code>当你看到“数据科学”这个词时，会想到什么？你可能会觉得它是统计学、机器学习、深度学习和“21 世纪最性感的工作”等关键词的组合，或者你的脑海里会浮现出一个数据科学家的形象，她坐在电脑旁，将 AB 测试得到的结果拼接在一起，又或者你听很多人说过干这行有赚不完的钱（根据权威部门统计：入门级数据科学家的平均年薪约人民币 744253 元）。无论是哪一种，它都是迷人、聪明和复杂的。

从本文作者 Vicki Boykis 十年前进入这一领域以来，数据科学一直给人这样的印象，但现在，数据科学已经不再是当初的样子了。以下内容由 AI 前线编译，原文来自 Vicki Boykis 发表于个人博客的文章《Data science is different now》。
</code></pre>
<p>我最初是一名数据分析师。</p>
<pre><code>我是否曾经提到过我有多讨厌 Excel 默认的数字字符串格式？
——Vicki Boykis（@vboykis）2012 年 5 月 18 日
</code></pre>
<p>我经常是一边苦等 SQL 的运行结果、整理乱糟糟的 Excel 文件，一边看着 Hacker News 上有关海量数据挖掘的文章、Facebook 数据科学团队的新闻和谷歌首席经济学家 Hal Varian 写的文章，然后一边做着白日梦。</p>
<p>2012 年，我很幸运地被分配到了一个数据分析工程团队，他们正在将一些 ETL 作业从 Oracle 迁移到 Hadoop 上，以便满足不断增长的数据吞吐量要求。</p>
<span id="more"></span>

<pre><code>有没有“给白痴用的 Hadoop”？ 给小白用的 Hadoop 并不适合我。
——Vicki Boykis（@vboykis）2012 年 8 月 16 日
</code></pre>
<p>我自愿成为第一个使用 Pig 和 Hive 的分析师，主要是因为我不想等到工程工作完成后才能访问我的数据。而且，我沉迷于数据科学家的光环——这些人开展很酷的实验，提出很酷的分析想法，并可以使用 MacBook。</p>
<p>我也想成为这样的人！所以，我在线学习了 Python，重温了我在大学学习过的统计学。在早期，并没有真正形式化的方法来学习“数据科学”，最多只能看看其他人在做什么、去参加聚会或者试着从人力资源招聘的职位描述中读出点什么。</p>
<p>在独自摸索了很长一段时间之后，我在过去的六年时间里已经在“数据科学”领域站稳了脚跟。并且，作为一名导师（但我之前并没有导师），我一直在回复电子邮件，和那些希望进入数据科学领域的人喝咖啡会面。</p>
<p>自 2012 年以来，数据科学行业发展极其迅速。它几乎经历了甘特炒作周期的每个阶段。</p>
<p>我们已经经历了早期采用阶段、有关人工智能和偏见的负面新闻、Facebook 等公司的第二轮和第三轮风险投资，现在正处于高采用增长阶段：银行、医疗保健公司和其他财富 100 强企业（这些公司已经落后市场五年）也在为机器学习招聘数据科学家。</p>
<p>很多东西都变了。大数据（记得 Hadoop 和 Pig 吗？）已经出局了，R 语言的采用率急剧上升，Python 成为经济学家的宠儿，而云计算再次改变了一切。</p>
<p>然而，媒体针对数据科学领域的炒作却没有变，一直在鼓吹数据科学家是“21 世纪最性感的职业”。但我现在认为这是一个很严重的问题，需要引起社区的注意。希望进入这个行业的初级数据科学家供过于求，而一旦他们获得了梦寐以求的“数据科学家”头衔，他们能够得到的东西与他们的期望其实是不匹配的。<br>新数据科学家的供过于求</p>
<p>首先，我们来谈谈初级数据科学家的供过于求。针对数据科学的持续媒体炒作导致过去五年中市场上的初级人才数量激增。</p>
<p>这纯粹是道听途说的东西，所以不要太当真。但是，基于我自己作为简历筛选者、数据科学家导师、面试官、面试者，以及与从事类似职业的朋友和同事的对话，我有一种直觉，每个给定的数据科学职位（特别是入门级的科学职位）的候选人数量从 20 个增加到 100 个或更多。我最近了解到，我的一位朋友在招聘一个职位时收到了不止 500 份简历。</p>
<p>这都很正常，类似的情况还有很多。机器学习教父吴恩达的 AI 创业公司每周要求工作 70 到 80 个小时，但仍然收到了大量申请，甚至有人愿意免费做志愿者。在写这篇文章时，他们的办公室已经容不下更多的人。</p>
<p>要评估市场需求与供应之间的真正差距是非常非常困难的，不过我们可以从这里(<a href="https://www.wired.com/story/andrew-ngs-new-online-school/)%E5%BC%80%E5%A7%8B%E7%9D%80%E6%89%8B%E3%80%82">https://www.wired.com/story/andrew-ngs-new-online-school/)开始着手。</a></p>
<pre><code>对 4 月份招聘广告的研究发现，美国有超过 10,000 个针对人工智能或机器学习的职位空缺。

[超过 10 万人参加了 Fast.ai](http://xn--10fast-qo7i07amn353ae9cy36wyeg.ai/)（一家专注于推广人工智能的创业公司）的深度学习课程。
</code></pre>
<p>假设平均 MOOC 完成率约为 7％，那意味着有 7000 人可以填补这 10,000 个工作岗位。但是，今年是这样，那么明年呢？我们是否在假设数据科学创造的就业率是稳定的？如果实际情况不是这样的，那么数据科学就业市场有可能会萎缩。</p>
<p>LinkedIn 提供的数据表明，市场上有 151,717 个数据科学人才空缺。虽然目前还不清楚它们是不是就是指数据科学家，或者是只拥有部分技能的人，但我们假设是前者。因此，我们可以说美国现在有 150,000 多个数据科学家职位空缺。</p>
<p>我们假设有 100,000 个人已经参加了数据科学课程，并且其中有 7,000 个人会完成课程。</p>
<p>但是，上面这数字并没有考虑到其他的数据科学候选人计划和途径：Fast.ai 之外的 MOOC，比如 Coursera、Metis（超过 10 个全国性训练营）和 General Assembly（每 12 周就有 25 人参加）、来自加州大学洛杉矶分校等地的远程学位、分析和数据科学的本科学位、YouTube，等等。还有很多博士正在从学术界转向数据科学领域，但却无法在竞争极其激烈的就业市场中找到工作。</p>
<p>这篇文章指出，在 2015 年有 4 万个数据科学家职位空缺。总体而言，到 2018 年，分析技能的市场供应将超过市场容量。<br>image</p>
<p>参加数据科学计划的初级人才数量，再加上数百个开设数据科学课程的训练营，你将看到一场完美的风暴。</p>
<p>除了我从工作中了解到的以及与 100 多名同事进行的交谈之外，下面的两条推文让我确信目前存在真正的数据科学供应泡沫。</p>
<pre><code>@Cal 的数据科学入门课程 Data 8 非常受欢迎。它位于有泽勒巴大剧院。2018 年秋季开学。pic.twitter.com/VBhtPnikmw
——Mike Olson（@mikeolson），2018 年 10 月 4 日

UVA（美国弗吉尼亚大学）很自豪地宣布开设数据科学学院的计划，它将满足社会对数据科学不断增长的需求。https://t.co/QlP4OUrTrO
——UVA（@UVA）2019 年 1 月 18 日
</code></pre>
<p>由于学术界在跟上新趋势方面通常会滞后，因此，对于所有希望在数据科学领域找到职位的初级数据科学家来说，这确实令人感到担忧。对于一个拥有数据科学新学位的人来说，要找到一个数据科学的职位是非常困难的，因为他们要在市场上与许多新人展开竞争。</p>
<p>但在三、四年前，情况并非如此。而现在，数据科学已经从流行语变成了连硅谷之外的公司都在招聘的职位，职位的准入门槛更高了，而且偏爱具备数据科学经验的人，数据科学面试仍然很难通过。</p>
<p>正如很多文章指出的那样，你不一定会在第一次尝试时就能找到你梦寐以求的工作。市场可能非常残酷，并且对于大量初入者来说非常令人沮丧。<br>数据科学是一个具有误导性的岗位需求</p>
<p>第二个问题是，一旦这些初级人员进入市场，他们会对数据科学工作产生不切实际的期望。每个人都认为他们将从事与机器学习、深度学习和贝叶斯模拟相关的工作。</p>
<p>这不是他们的错，这就是数据科学课程和技术媒体所宣扬的。</p>
<p>但现实的情况却是，“数据科学”大多数时候是关于如何清理和整理数据以及将数据从一个地方移动到另一个地方。</p>
<p>我最近进行的一次非科学调查证实了这一点：</p>
<pre><code>一段时间以来，我一直对此感到好奇，所以决定做一个民意调查。
“作为一个 2019 年被称为’数据科学家’的人，我花了大部分时间（60％以上）：”
也欢迎“其他”选项，请在回复中添加。
——Vicki Boykis（@vboykis）2019 年 1 月 28 日
</code></pre>
<p>还有很多行业专家发来的推文也是如此：</p>
<pre><code>对于我最近的几个 ML 项目，复杂性并不在于建模或训练，而在于输入预处理。我发现在一个项目中耗尽了 CPU（而不是 GPU），我不确定如何进一步优化 Python（我正在考虑使用 C++）。
——mat kelcey（@mat_kelcey）2019 年 2 月 11 日

我看到初级 ML/CV 工程师对构建数据集完全缺乏兴趣。虽然这是一项无聊的工作，但我认为在整理数据集时需要学到很多东西，毕竟这占了问题的一大半。
——Katherine Scott（@kscottz）2019 年 2 月 1 日

角色和责任：
- 自动化糟糕的商业行为

- 根据需要编写临时 SQL

经验要求：

· 15 年使用 Python 进行深度学习的经验

· 写过有关贝叶斯建模的博士论文

· 7 种语言的 NLP 经验

· 10 年从头开始​​创建 Hadoop 集群的经验

——NickHeitzman（@NickDoesData）2019 年 2 月 12 日

在过去两年中，项目的工作类别所占百分比：
- 涉及 ML：15％

- 涉及移动、监控和统计数据：85％

——Vicki Boykis（@vboykis）2019 年 1 月 15 日
</code></pre>
<p>显而易见的是，在炒作周期的后期阶段，数据科学逐渐向工程学靠近，数据科学家需要的技能不再是基于可视化和统计学，而是更接近传统计算机科学课程所提供的那些：</p>
<pre><code>像单元测试和持续集成这样的概念很快就成为数据科学家和从事 ML 工程的数值科学家的行话和常用的工具。
</code></pre>
<p>这导致了一些事情的发生。首先是“机器学习工程师”这个头衔的崛起，在过去的 3 到 4 年里，它带来了更多的声望和更高的收入潜力。</p>
<p>其次，它导致数据科学家头衔含金量严重缩水。由于数据科学家头衔的声望，像 Lyft 这样的公司会招聘数据科学，但实际上他们只需要数据分析师的技能，导致“数据科学”职位对技能的要求发生了扭曲，究竟需要多少新进入者也变得不明确。</p>
<h2 id="给新数据科学家的建议"><a href="#给新数据科学家的建议" class="headerlink" title="给新数据科学家的建议"></a>给新数据科学家的建议</h2><p>因此，本着继续为初学者提供建议的初衷，如果有人问我如何在 2019 年进入数据科学领域，我会给他们发送下面这样的电子邮件。</p>
<p>这是一个两步走的计划：</p>
<pre><code>    1. 不要死盯着数据科学的工作岗位。

    2. 为大多数数据科学家相关的工作做好准备，但不要成为数据科学家。调整你的技能组合。
</code></pre>
<p>这些话可能有点令人沮丧！但请允许我解释一下，希望它们不像听起来的那么悲观。</p>
<h2 id="不要进入数据科学领域"><a href="#不要进入数据科学领域" class="headerlink" title="不要进入数据科学领域"></a>不要进入数据科学领域</h2><p>因为每个初级职位一般有 50 个（有时 100 个，有时 200 个）人申请，所以不要与这些人去竞争。不要去攻读数学科学学位，不要参加训练营（我见过的大多数训练营的效果都不太好）。</p>
<p>不要做别人正在做的事情，因为这样无法让你脱颖而出。你正处在一个过度饱和的行业中，这样只会给自己增加难度。在我之前提到的那份PWC 报告中，数据科学职位的数量估计为 5 万，数据工程师职位的数量为 50 万，数据分析师职位的数量是 12.5 万。</p>
<p>通过“后门”进入数据科学领域要容易得多，也就是说从初级开发人员开始，可以是 DevOps 工程师、项目管理人员、数据分析师、信息管理员或类似的角色。这可能需要更长的时间，但在你努力完成数据科学工作的同时，你也将学会对职业生涯来说至关重要的 IT 技能。</p>
<h2 id="了解当今数据科学所需的技能"><a href="#了解当今数据科学所需的技能" class="headerlink" title="了解当今数据科学所需的技能"></a>了解当今数据科学所需的技能</h2><p>以下是你在数据领域需要解决的一些问题：</p>
<p>1）创建 Python 包</p>
<p>2）将 R 语言用在生产环境中</p>
<p>3）优化 Spark 作业，使其更有效地运行</p>
<p>4）对数据进行版本控制</p>
<p>5）让模型和数据可重现</p>
<p>6）对 SQL 进行版本控制</p>
<p>7）在数据湖中建立和维护干净的数据</p>
<p>8）大规模时间序列预测工具</p>
<p>9）共享 Jupyter Notebook</p>
<p>10）寻找可用于清理数据的系统</p>
<p>11）JSON</p>
<p>作为一名数据科学家，优化模型、可视化和分析数据是职责工作的一部分，而数据科学主要是（也一直是）关于在一个地方获得用于插补的干净数据。</p>
<p>你应该如何为解决这些问题做好准备？如何为工作做好准备？你可以考虑学习下面这三种技能，它们都是基础技能，并彼此依赖，从简单到困难。</p>
<p>所有这些技能也是数据科学以外的软件开发的基础和关键，这意味着，如果你无法找到数据科学工作，可以快速转做软件开发或 DevOps。我认为这种灵活性与针对特定数据相关工作的培训同样重要。</p>
<p><strong>1. 学习 SQL</strong></p>
<p>首先，我建议每个人都要学习 SQL，无论他们的目标是成为数据工程师、ML 专家还是 AI 大师。</p>
<p>SQL 并不性感，也不是上述问题的解决方案。但为了访问数据，你很可能需要针对数据库编写一些 SQL 查询，并用它获取答案。</p>
<p>SQL 非常强大且非常流行，甚至有些 NoSQL 和键值存储数据库也在重新实现它。比如 Presto 推出的 Presto 和 Athena、BigQuery、KSQL、Pandas、Spark，等等。如果你发现自己陷入了数据工具海洋之中，很可能可以找到一个适合你的 SQL 工具。而且，一旦你理解了 SQL，你会发现它比其他查询语言更容易理解，从而开辟了一个全新的世界。</p>
<p>在熟悉了 SQL 之后，下一步是了解数据库的工作原理，这样你就可以学会如何优化查询。你不一定要成为数据库开发人员，但很多概念将延续到你的其他编程生活当中。</p>
<p><strong>2. 学好一门编程语言和学习编程概念</strong></p>
<p>SQL 不是一门编程语言吗？它是的，但它是声明性的。你指定所需的输出（即你要从表中获取哪些列），但不指定这些列以怎样的形式返回给你。SQL 抽象了很多数据库底层的细节。</p>
<p>你需要一门过程式语言，你可以自行指定如何以及从哪里获取数据。大多数现代语言都是过程式的：Java、Python、Scala、R 语言、Go 语言，等等。</p>
<p>关于为数据科学应该选择哪种语言存在很多争论，我不会针对任何特定情况规定说要学习哪一种语言，只是在我的职业生涯中，Python 对我来说非常有用。作为一个初学者，它很容易入门，可以说是数据领域最流行的编程语言，并且可以用来完成很多不同的事情，从将模型嵌入 scikit 中，到访问 AWS API，再到构建 Web 应用程序、清理数据，以及创建深度学习模型。</p>
<p>当然，也有一些任务不太适合用 Python 来完成：大型应用程序、打包依赖项和一些特定的与数字相关的任务，特别是时间序列和 R 语言提供的一系列功能。</p>
<p>如果你不选择 Python，也没问题。但你至少要选择一种语言，让你在数据科学领域之外保持灵活性。例如，如果你的第一份工作是数据分析师、QA 分析师、DevOps 初级工程师，或者其他职位，掌握一门语言都有助于你站稳脚跟。</p>
<p>在选择了一门编程语言并弄清楚如何使用它之后，就可以开始学习它背后的范式以及它与计算机科学生态系统的关系。</p>
<p>你是如何使用你的语言实现 OOP 的？OOP 是什么东西？你如何优化你的代码？你的语言的依赖项是如何工作的？如何使用给定语言打包代码，如何进行版本控制、持续集成，如何部署模型工件？你的语言社区在哪里，会在哪里举行聚会？</p>
<p>了解你的语言，了解它的优缺点，用你的语言开发一些有趣的东西。</p>
<p>然后，当你有足够的信心继续下去时，也只有在这个时候，才能开始学习你的第二门语言。它将把你带入更广泛的语言设计、算法和模式的世界。</p>
<p><strong>3. 了解云端的工作</strong></p>
<p>现在你已经知道如何编程，现在是时候将这些技能和理论带到云端了。</p>
<p>如今，云无处不在，你可能需要在下一个工作中使用云。如果有更多的机器学习范例转移到云端（如 SageMaker、Cloud AI 和 Azure 机器学习），已经有现成的模板可用来实现算法，而且企业的更多数据也开始存储在那里。</p>
<p>你可能会与行业领导者 AWS 合作，但越来越多的公司正在采用 Google Cloud，而很多已经与微软开展业务合作的保守企业在使用 Azure。我建议深入了解这三个云供应商，然后挑选一个你最感兴趣的。云设计范式都是类似的，你必须了解如何将服务粘合在一起，如何区分云端的服务器，以及如何使用 JSON。</p>
<p>有趣的是，这三家供应商现在都提供了他们的产品认证。我一般不会通过认证来衡量一个人对知识的掌握程度与否，但通过认证可以学到云的工作原理，这是工程的另一个组成部分：网络。</p>
<p>了解这三种产品，并在开始下一份工作之前在云端构建一些有趣的东西。</p>
<p>这里缺失的部分当然是“软技能”——知道在什么时候构建什么，知道如何在工作场所进行交流，知道其他人想要什么。软技能与技术技能一样重要，有很多专门讨论它的文章，但为了保持这篇文章不会太长，这里就不作累述了。</p>
<h2 id="最后的步骤"><a href="#最后的步骤" class="headerlink" title="最后的步骤"></a>最后的步骤</h2><p>现在，请深呼吸，我想你已经做好准备了。</p>
<p>如果上述有任何一点（或者所有）让你感兴趣，那说明你已经准备好在 2019 年成为数据科学家、机器学习工程师、云专家或 AI 大师了。</p>
<p>请记住，你的最终目标是打败那些攻读数据科学学位、参加训练营和学习教程的人。</p>
<p>你想要迈出第一步，获得一个与数据相关的职位，然后朝着你梦想的工作前进，同时尽可能多地了解科技行业的总体情况。</p>
<p>我最后一个一般性的建议是给自己打气：</p>
<p>这对每个人来说都很难，似乎有很多事情你必须知道。不要气馁。</p>
<p>不要因为想太多就望而却步。先从小处开始，做一些小的事情，学习一些小的东西，构建一些小的东西，把你做的事情告诉其他人。请记住，你在数据科学领域的第一份工作可能不是数据科学家。</p>
<p>祝你好运！</p>
<p>英文原文：<br><a href="https://veekaybee.github.io/2019/02/13/data-science-is-different/">https://veekaybee.github.io/2019/02/13/data-science-is-different/</a></p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器图片机制</title>
    <url>//post/image/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>浏览器中引用图片是一种很常见的情况，使用方式的不同，他们的意义也不同。比如————作为“内容主体”、“背景”、“图标”等，而设计师有时候也会提供不同的格式图片（img&#x2F;png&#x2F;svg&#x2F;）。在不同的场景，我们对同一份图片素材，要根据图片在web界面中的意义合理运用。个人会列举浏览器常用使用图片的方式。</p>
<ul>
<li>img</li>
<li>background-image</li>
<li>icon-font</li>
<li>svg</li>
<li>webpack 与 img</li>
<li>base64</li>
</ul>
<span id="more"></span>

<h2 id="img、background-image"><a href="#img、background-image" class="headerlink" title="img、background-image"></a>img、background-image</h2><p><code>HTML</code>的<code>img</code>标签、<code>css</code>的<code>background-image</code>样式是最原始的使用图片方式，在H5时代前，相当长的一段时间都是用这两方式引用图片资源的。</p>
<p><code>&lt;img&gt;</code>标签，将图片作为<strong>内容主体</strong>引入web页面，故其是<strong>占位</strong>的；而<code>background-image</code>样式，起<strong>修饰</strong>作用，<strong>不占位</strong>。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>img</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://mdn.mozillademos.org/files/7693/catfront.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>background-image</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>background<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.background</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://mdn.mozillademos.org/files/7693/catfront.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://mdn.mozillademos.org/files/7693/catfront.png" />

<div class="background"></div>

<style>
.background {
  width: 30px;
  height: 64px;
  margin: 0 auto;
  background-image: url('https://mdn.mozillademos.org/files/7693/catfront.png');
}
</style>

<p><em>虽然呈现的效果一致，意义却不一样。</em></p>
<!-- - [<img>：图像嵌入元素](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img) -->
<!-- - [background-image](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-image) -->

<h3 id="img之尺寸、居中"><a href="#img之尺寸、居中" class="headerlink" title="img之尺寸、居中"></a>img之尺寸、居中</h3><p><code>img</code>标签提供了关于设置尺寸的属性，分别是<code>width</code>和<code>height</code>，单位可以是css像素，也可以是百分比。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://mdn.mozillademos.org/files/7693/catfront.png<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>然而尺寸的百分比单位并不是相对于图片资源的比例，而是其容器的百分比。</em></p>
<p>所以并不推荐使用img标签的<code>width</code>及<code>height</code>设置属性，推荐使用css的<code>width</code>及<code>height</code>属性编写。</p>
<p>其实很多web开发者设置<code>100%</code>的本意是想让图片<strong>按父容器宽度自动缩放，并保持图片原本的长宽比</strong>。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">max-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除此之外，<code>img</code>的居中方式也是很容易让人误解，因<code>img</code>的<code>display</code>属性为<code>inline-block</code>，其居中方式（水平、垂直都是）更是让人误解。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://mdn.mozillademos.org/files/7693/catfront.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.block</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #333<span class="token punctuation">;</span>
  <span class="token comment">/* 垂直居中 */</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token comment">/* 水平居中 */</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">img</span> <span class="token punctuation">&#123;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">max-height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>没想吧？居然是加在img的容器标签上，虽然绝对居中（水平、垂直都同时居中）还有其他的方法，常见的<code>margin auto</code>居中还有绝对定位50%。不过个人觉得这是最值得开发着去记住的。除此之外，也建议给容器设置<code>font-size: 0;</code>，这可以解决两个相邻的img标签之间的空隙问题。</p>
<p>说了那么多的img，现在得回过头来谈论<code>background-image</code>了。</p>
<h3 id="background-image之位置、尺寸及重复"><a href="#background-image之位置、尺寸及重复" class="headerlink" title="background-image之位置、尺寸及重复"></a>background-image之位置、尺寸及重复</h3><p>虽然前面我们说的<code>background-image</code>一直说的是css的样式特性，然而<code>background-image</code>只能指定使用的图片资源（可以是一张、也可以是多张）。背景图片样式（如本节小标题所说的位置、尺寸及重复）的设置，往往还需要结合其他css特性。</p>
<ol>
<li><p><code>background-position</code>可以给背景图片定义位置，设置的是其图片的左上角要在容器的哪个偏移度位置。</p>
</li>
<li><p><code>background-size</code> 可设置背景图片大小。<code>contain</code>理解为等比例缩放图片，高度&#x2F;宽度其一先与容器尺寸相等，则停止缩放，若图片和容器宽高比例不一致，会出现白边；<code>cover</code>也是等比例缩放，高度&#x2F;宽度其一先与容器尺寸相等，继续缩放，（此时图片溢出），直到另一方向的尺寸占满容器，停止缩放。</p>
</li>
</ol>
<p><img src="/post/image/background-size_contain.png" alt="background-size:contai"></p>
<p><img src="/post/image/background-size_cover.png" alt="background-size:cover"></p>
<p><strong>更简易的理解： <code>contain</code>为最小化等比例缩放图片，<code>cover</code>则为最大化等比例缩放。</strong></p>
<p>除了这两个关键字，也可以用两个单位值指定背景图片的宽高，对于绝对单位（px、em、rem）没啥好说的，对于相对单位（百分比），是相对于容器的尺寸来计算的，<strong>有意思的是<code>100% 100%</code>，这代表着破坏原比例，把图片拉伸&#x2F;挤压到容器的尺寸。</strong>（很多css属性的相对单位都是根据容器来计算的，或许有特殊的属性我忘了。;-)</p>
<ol start="3">
<li><code>background-repeat</code> 设置图片重复使用的方式。</li>
</ol>
<p>以上就是关于背景常用的css样式特性，完整的css背景样式如下，并不复杂。</p>
<ul>
<li>background-attachment</li>
<li>background-clip</li>
<li>background-color</li>
<li>background-image</li>
<li>background-origin</li>
<li>background-position</li>
<li>background-position-x</li>
<li>background-position-y</li>
<li>background-repeat</li>
<li>background-size</li>
</ul>
<blockquote>
<p>不建议使用css简写属性<code>background</code>一次性设置背景特性。</p>
</blockquote>
<h3 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h3><p>CSS Sprite(CSS 精灵), 又名雪碧图，是一种图片合并技术，我们可以把一些小图，整合放在一张大图中，每次单独使用小图的时候，裁剪出指定位置，尺寸即可正常显示。</p>
<p><img src="/post/image/CSS-Sprites.gif" alt="CSS-Sprites.gif"></p>
<p>像上图就可以作为雪碧图的素材使用，以实现改方案。</p>
<p>简单分析一下这张图片：</p>
<ol>
<li>尺寸：134 * 44</li>
<li>小图数量：3</li>
<li>规范：固定大小，水平排列</li>
</ol>
<p>那我们可以定义一个通用的<code>class</code>，设置小图的尺寸；再定义一个<code>class</code>，设置图片裁剪位置即可。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.css-sprite</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"./CSS-Sprites.gif"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.hourse</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-position-x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.left-arrow</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-position-x</span><span class="token punctuation">:</span> -44px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.right-arrow</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-position-x</span><span class="token punctuation">:</span> -88px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol>
<li>减少服务器压力：多图合并成一张，只发送一次HTTP请求，并且可以被缓存，有助于提升页面加载性能</li>
<li>维护困难： 后期维护成本较高，添加一张图片需要重新制作。</li>
<li>应用麻烦：每应用一张图片都需要调整位置，误差要求严格。</li>
<li>局限：只能用在背景图片<code>background-image</code>上，不能用<code>&lt;img&gt;</code>标签来使用。</li>
</ol>
<h4 id="不同方式实现-CSS-Sprites"><a href="#不同方式实现-CSS-Sprites" class="headerlink" title="不同方式实现 CSS Sprites"></a>不同方式实现 CSS Sprites</h4><p>如果会使用<code>gulp</code>、<code>webkack</code> 等构建工具，可以借助工具自动生成雪碧图。</p>
<p><a href="https://github.com/twolfson/spritesmith">spritesmith</a>，是一个node工具，可以将多张图片合成一张图片——雪碧图，也提供了<code>grup</code>和 <code>gulp</code>插件，甚至是命令行工具。</p>
<ul>
<li><code>gulp</code> 结合<a href="https://www.npmjs.com/package/spritesmith">spritesmith</a>的插件 <a href="https://www.npmjs.com/package/gulp.spritesmith">gulp.spritesmith</a></li>
<li><code>webpack</code>结合对应的loader <a href="https://www.npmjs.com/package/webpack-spritesmith">webpack-spritesmith</a></li>
<li>svg <a href="https://www.npmjs.com/package/svg-sprite-loader">svg-sprite-loader</a></li>
</ul>
<h2 id="icon-font"><a href="#icon-font" class="headerlink" title="icon-font"></a>icon-font</h2><p><strong>首先我们得明白，icont-font本质上不是图片，而是一种比较特殊字体，这种字体，以图标的方式显示。</strong></p>
<h3 id="web字体"><a href="#web字体" class="headerlink" title="web字体"></a>web字体</h3><p>得益于<code>css3</code>的新特性“web字体”，我们可以为自己的网页定义在线字体，无论用户是否安装了我们指定的字体，我们都可以让网页呈现出我们想要的字体，突破了传统<a href="https://developer.mozilla.org/en-US/Learn/CSS/Styling_text/Fundamentals#Web_safe_fonts">Web-safe 字体</a>的限制。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 定义名为“Open Sans”字体  */</span>
<span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Open Sans"</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/fonts/OpenSans-Regular-webfont.woff2"</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"woff2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/fonts/OpenSans-Regular-webfont.woff"</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"woff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 应用于网页 */</span>
<span class="token selector">body</span> <span class="token punctuation">&#123;</span>
 <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Open Sans"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>web字体不是我们这次要重点的谈论范围，了解即可，这里提供了一些相关资料：</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/%E4%B8%BA%E6%96%87%E6%9C%AC%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/Web_%E5%AD%97%E4%BD%93">Web 字体</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face">@font-face</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">font-family</a></li>
</ul>
<p>所以icon-font，指的是使用自定义的字体展示图标。运用了上述介绍的web字体技术。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>字体图标技术已经是web主流使用icon的一种方案了，很多UI库都内置提供了一套图标库供开发者使用，当然也可以独立使用开源的图标库，或者使用工具生成自定义的图标库。</p>
<p>这里用常用的UI框架<code>elemment-ui</code>举例，其UI库提供了<a href="https://element.eleme.cn/#/zh-CN/component/icon">icon</a>组件，内置了图标库，使用方式也很简单。</p>
<p><img src="/post/image/element-ui_icon.png"></p>
<p>基本上，正确引用了icon-font，直接设置的类名即可展示对应的UI，那么我们究竟引用了什么东西呢？在<a href="https://element.eleme.cn/#/zh-CN/component/icon">icon</a>页面上，使用<code>F12</code>打开开发者工具、找到<code>element-ui-*.css</code>源码。</p>
<p><img src="/post/image/element-ui-css.png"></p>
<p> 独立的开源图标库有很多，名气比较大的有<a href="https://fontawesome.com/">Font Awesome</a>。使用方法也是类比UI库，引入相关的css源文件即可。css源文件也是类似<code>element-ui-*.css</code>的格式，引用外部资源、定义web字体、使用web字体，内置定义了<code>class</code>。直接在相关dom中使用class即可。</p>
<p>实际项目中，这种开源的集成图标库往往不能满足需求设计稿，我们需要使用一些自定义图标。我们可以使用一些工具：<a href="https://www.iconfont.cn/">iconfont</a>、<a href="https://fontello.com/">fontello</a>、<a href="https://icomoon.io/">icomoon</a>，都是很优秀的在线生成图标库，具体使用方式网站也有介绍，不再累述。教程中引入的<code>css</code>，也是跟<code>element-ui-*.css</code>的格式类似。</p>
<h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><p>icon-font最大的特性就是样式有更多的灵活性。<strong>我们可以像处理文字一样处理图标的样式。</strong>使用<code>font-size</code>控制图标的尺寸，<code>text-align</code>、<code>line-height</code>控制其居中方式，甚至是<code>color</code>为图标设置不同的样式。</p>
<p>一般使用icon-font都是一套一套的使用，而不是一个一个独立使用，所以这对减少网络请求次数也有优势。</p>
<p>矢量图形也意味着我们可以随意调整图标大小而不用担心其失真。</p>
<p>不过icon-font只适用于纯色图标，当然渐变效果也可以使用css样式编写。</p>
<h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p><a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">svg</a>——可缩放矢量图形(Scalable Vector Graphics)，是一种文件格式， 用XML 的格式定义图像。我们可以使用代码编辑器编辑svg文件，使用浏览器可直接预览。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span>
  <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span>
  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span>
  <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>125<span class="token punctuation">"</span></span> <span class="token attr-name">font-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SVG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>可以先将其拷贝保存为x.svg，待会用到的 。</p>
</blockquote>
<p>将在浏览器中呈现…</p>
<p><img src="/post/image/svg.png"></p>
<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>有几种使用方式，第一种是直接作为标签嵌入<code>HTML</code>源码中。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span>
    <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span>
    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span>
    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>125<span class="token punctuation">"</span></span> <span class="token attr-name">font-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SVG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第二种是将svg代码保存为一个单独的文件，如同png，jpg，git等图片资源一样使用。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>img svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>object svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.svg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>iframe svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.svg<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>背景图片也是可以的。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div-svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">#div-svg</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./x.svg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h3><p>svg基于<code>XML</code>语法实现，可以用DOM选择器获取该DOM对象。前提是用第一种方式直接将svg嵌入<code>HTML</code>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 先给刚才的svg加上id属性 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span>
    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dom-svg<span class="token punctuation">"</span></span>
    <span class="token attr-name">...</span><span class="token punctuation">></span></span>
    ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> domSvg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#dom-svg'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domSvg<span class="token punctuation">)</span> <span class="token comment">// &lt;svg id="dom-svg" version="1.1" baseProfile="full" width="300" height="200" xmlns="http://www.w3.org/2000/svg"></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domSvg<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span> <span class="token comment">// NodeList(7) [ #text, rect, #text, circle, #text, text, #text ]</span>
<span class="token keyword">const</span> divSvg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#div-svg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果有用过<code>icon-font</code>，会知道我们可以用多个svg制作成一套字体图标库。虽然字体图标然比传统的<code>img</code>，<code>background</code>方式有着更好的css样式灵活性，可终究直接使用的时候是纯色的。而svg有着更好的色彩表现能力，同样也是矢量图形，且可以进行DOM操作，这也意味着我们可以<strong>随时动态地改变图片的结构</strong>。<strong>而且svg不仅仅可以制作成字体图标库，也可以转换成png、jpg等传统图片格式甚至是<code>canvas</code>。</strong></p>
<blockquote>
<p> svg文件格式现在已经是主流web开发图片使用方案了，而且是目前最灵活的图片文件格式。</p>
</blockquote>
<h2 id="webpack-与-img"><a href="#webpack-与-img" class="headerlink" title="webpack 与 img"></a>webpack 与 img</h2><p><a href="https://webpack.js.org/">webpack</a>是一个前端打包工具，前端项目的每个静态资源都是一个单独的模块，<code>webpack</code>内部会<strong>自动管理这些依赖关系</strong>，编译源码时会自动根据这些依赖关系进行打开，最终生成<em>bundle</em>。其特点是拥有<strong>模块化机制</strong>、<strong>loader</strong>可以对各种类型的模块加载时运动不同的任务、<strong>插件化</strong>更是令其可以跟其他的构建工具（<code>grunt</code>、<code>gulp</code>等）结合使用、*<em>模块热替换</em>***更是大大加大了开发速度，模块的更新无需重新加载整个页面。</p>
<p><code>webpack</code>功能多样且强大，我们本次将重点放在webpack是如何处理图片资源的。<code>webpack</code>一般是跟<code>vue</code>或者<code>react</code>框架集成使用，当然也可以独立使用。原理都差不多，框架的脚手架会基于<code>webpack</code>进行对框架场景的适合或者说扩展。为了方便，这里以<code>vue</code>为例。</p>
<h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><p><a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">vue-cli</a>已有相关介绍，简单来说，就是在<code>template</code>中，还有在js中有不同的使用图片方式。</p>
<p>原生<code>html</code> 跟<code>vue</code>的<code>template</code>语法是一样的。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./image.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>script</code> 或者叫<code>js</code>中是这样使用的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">imgURL <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./image.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>require('./image.png')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>background</code>也类同<code>&lt;img&gt;</code>。</p>
<h3 id="裂图-x2F-空图"><a href="#裂图-x2F-空图" class="headerlink" title="裂图&#x2F;空图"></a>裂图&#x2F;空图</h3><p>裂图：指定的图片资源地址不存在，或者加载失败（404），此时界面出现一张小的占位“裂图”；</p>
<p>空图：不指定图片资源地址，如果样式有设置尺寸大小，会根据img&#x2F;background的原生特性占位。</p>
<p>裂图一般是bug，我们需要根据bug的场景去解决。</p>
<p>空图也有其使用的场景：如，初始img标签，动态加载不同的图片资源地址，默认占位。</p>
<p>实现空图也很简单，<code>src=&quot;&quot;</code> <code>:src=&quot;null&quot;</code> 即可，也可以直接不使用<code>src</code>属性。</p>
<p>有意思的是，当<code>src</code>的属性值为空时，chrome 和 firefox 渲染的DOM略有差异。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- chrome --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src(unknown)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- firefox --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="小图自动转成base64"><a href="#小图自动转成base64" class="headerlink" title="小图自动转成base64"></a>小图自动转成base64</h3><p>有时候我们会发现<code>webpack</code>自动把一些小内存的图片自动转换成<code>databas64</code>格式的编码。在<code>vue-cli</code>也有相关的资料介绍 —— <a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E4%BB%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%AF%BC%E5%85%A5">从相对路径导入</a>。</p>
<p>我们知道<code>vue-cli</code>是一个集成了<code>webpack</code>常用的功能实现的<code>vue</code>脚手架，为了是配置管理<code>vue</code>项目更加方便快捷，内置静默配置了<code>webpack</code>的常用功能。</p>
<blockquote>
<p> 究其原因还是使用了<code>webpack</code>的<code>file-loader</code>处理资源最终引用的路径。<code>url-loader</code>将小于<strong>指定大小</strong>的资源转成内联（这里包括<code>css</code>、<code>javascript</code>、图片字体等静态资源），<code>css</code> <code>javascript</code> 都拥有html对用的标签，图片资源则是处理成<code>base64</code>格式。为了是节约 HTTP 请求数量。</p>
</blockquote>
<p><code>vue-cli</code>可以使用<code>chainWebpack</code>设置指定大小，如果是单独使用<code>webpack</code>，则应该配置<code>url-loader</code>，以下是参考的<code>url-loader</code>配置。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
　　loaders<span class="token operator">:</span> <span class="token punctuation">[</span>
　　　　<span class="token punctuation">&#123;</span>
　　　　　　test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
　　　　　　loader<span class="token operator">:</span> <span class="token string">'url-loader?limit=8192'</span>
　　　　<span class="token punctuation">&#125;</span>
　　<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p><a href="https://zh.wikipedia.org/wiki/Base64">base64</a>是一种编码的方法，可以用来表示<strong>二进制</strong>数据。所以图片也可以被编码成<code>base64</code>，形成一条字符串。</p>
<p><em>试试将下面的这串字符复制在浏览器地址栏直接访问，看看是本文的出现的哪张图片。</em></p>
<pre class="line-numbers language-none"><code class="language-none">data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAAB4AAABACAIAAACC1lByAAAABnRSTlMAAAAAAABupgeRAAAACXBIWXMAAAsTAAALEwEAmpwYAAAOjUlEQVR42iXWS6+t2VXe8WeMMed7W7d9OfvsOuUqW3YZ28GWLIgUJJAQNDBCIEXp5ZOELp8njdCnGymNRIJEGBxju27nfmrf1l57rfcy5xgPjfoK&#x2F;8ZPf&#x2F;lvf&#x2F;t30ZBOMHyp8zKNT&#x2F;O71+&#x2F;effmuy&#x2F;ZHf&#x2F;0nV88uCDVqzdVgmakmT6IKHceRnq2PnHqNZIlUq3UWBsAkphYuWj2EiS8uP3k6PN7e3lOEGrpISDaZK1VEQPVUFQmAizd9FmgSkwTNOs+LRNQyQ5T0JAAkBUQgSfJq6Dfb9Xq3279&#x2F;XJ4eHW6yhBpDNESkShhBGAW2zGVZpq5paOhcUD3lpgBmOh2LhglJC6GVfmim&#x2F;dP9uw9tkr&#x2F;6L38xbLYlkosaFRqAgwyIgQQB18TNqltthufXl7ltrc2pbbphEFGzULKKuGsok1c&#x2F;POy9BBemLv35X&#x2F;1ZzgVQKkTMVavwdDoeR3doqZVVmpR7bWKcoe7V57LMsz8eH8ZlSiKUSKqlgkrxOPm8FGmiJhnSZ9c&#x2F;ur29&#x2F;bDfb1e7zWb48PbdzYfb+TheXT9LJldX17Q6lnu3pmRQaNDj8QFaXUtSkUiLEBBErV5lmk95dZaa8fTwtF8d7u7vvvn6A4Hzi+18mp8eRmtTmcfn3&#x2F;vOetciqpimPrWWl&#x2F;Ak1q8MVEanFI1Q+KqpKSLGaRpP8&#x2F;F4nOZlrn775vb1569LyBLFAx&#x2F;&#x2F;8NPNs1VuxaxR0fCScpKmJxLVQJ3nERTST+NTMlCgtFNQ1FWAZRznaWyHVdO3+6e7ftPOx&#x2F;nF1bNPPvvBZz&#x2F;65Hi7H7bb7WZo+46lmmKyYqIaUMQ4L&#x2F;NUxqd9breJYSKJMrsCzrzaXgzd7vo7Neb5VFbr3dnVdbe26+cvrl9cbjfrH&#x2F;&#x2F;8J+3Q9+shwQSV4zydDkKlpToe6MWybXdnJppgAbgQVsFkbZfGw1KX07Dph9Ua1xTTH3z&#x2F;e0lks15Jk37v93+4fzw0bU5iyihdw9MBQuES4iIwiqhUMhE01iJz0pZqNqy71So1lttWRc+252M5RURerzQ3gA+rnlB4FTVIaJNTNopOx3FZFlGCAaBORZWZKsY2VCGiOfWrVW47hW63Z3lourZ&#x2F;Op1MNSWAAkmiomaKyJLW66HpV&#x2F;Ay1xESwhDJVBn6PilYASrIaqB7nmpcnq9h&#x2F;Nd&#x2F;&#x2F;uU88qMX59vd9i41w6cfNWbui8&#x2F;z0+Mx5Xx2sUqazne7rx&#x2F;upuUoESEh0SaURXJygYgZ4OGkOQpctWuuXzz&#x2F;3&#x2F;&#x2F;zn375j78+X7c&#x2F;&#x2F;vlPq&#x2F;Pq+cXZ2e71q7d&#x2F;&#x2F;9&#x2F;&#x2F;x7TwP3z2gz&#x2F;9yz8209Ph+L&#x2F;+4f9M09GQPRaBOkMUCSJSoyaqGhcH6DqNx7HU+MV&#x2F;&#x2F;sV2s&#x2F;7q81dlnubTXJ0e&#x2F;vbLr81rM+Oz3&#x2F;t+bhtV++rl61e&#x2F;ebWMozTBohSnG9STeRVVEY0IFfUwuh8eD&#x2F;ubu2fPr&#x2F;76v&#x2F;7N5&#x2F;&#x2F;2u89&#x2F;9VtNctjvV33z3R9+7+Lqclh3u4tdn5uIuH91iwTA5iIpIlDpDmqKBGEAIqhMWSIUUk7z&#x2F;u4hNSl3tttu1tt1VJmnSVWurp73Xdf0bdsYhGWa85B&#x2F;9h9&#x2F;onQqUaGmCrpEgoRQCYOqUEQtwRZdnh5P55e+TGV&#x2F;&#x2F;5Capp4eseym47T7eAfxAEkj+Prt+2HVNN99RoEABJQSikYiESkg5vDkacmeqiSTmqF8OhymeSqTG9J4GuvD6bh+4IvrnDv3WnypxW9u3kaeM7NLVWnCZkhuA4AnKCEoqE1YtVBnaq1r8+K1LCFSc2OizbPrnxw&#x2F;3H60G2qpSxQRBGOap2msSZJkJSC+JGSgqJJoEggXz1VobljR62l&#x2F;3Fyuu94kQsKgAbFpXEaR&#x2F;cOodt80mlQg7LuutTRDKa5MakElkAJIUKUWBZnULYMFGWLx&#x2F;v3d4&#x2F;4pqj8c97c396fTodb5&#x2F;GJDWQ77h9N4nGs1a5NhWK1MIKImITQBiEgEAkkjXFxdjGyalSaeWMdvTof7hy8ex3n0p8Nhd3Hxs&#x2F;&#x2F;0Ixua5X7fdSvrcj+ImJhZt27kG1EWCRAIVEESIBQpmDQ8JDQLM5PkfisfNe3h8Wjd1Nf5ojkfhv7weLy43l4+&#x2F;yiZ9X3fNX1OirA2DwCERmqYmJsgUykaSd1FRNTNe7XERjft2q2mnCSlae8GfufTjzbrfrvZtKlJpikLEEIV0912m7RdWKssClDt2+5gSiEhkZSqneYcwW&#x2F;xa0&#x2F;vl&#x2F;Lyi+n2prGcfvy9i+cXbc6qpsksJUuAiEKtSZZFWBMpc6U1IlApgaThBECJgKbcrtaDJrU27x9u5PChwyjz6fDF5yZKESSYMiELzNRg3rZJFVIDzioKd7K4AKJKR9TiYcIiwb7rNttNlJif9kIVUVpMh6emaZKaBUhQwgBGrSUipO3WoaFUJIaRoiKqnJUeEZXhlW5i0ACRcsrtKiSUIlG7YQivIgpIQExUoABUKFLbrgGTA+YwUQgDDqgynBDSvXpliVLDq2Vdn1&#x2F;6sHKGZH3+wx9ECSGCNYFmoMDdw0Mg634QmkSI1IBImIZCkIgF0RBE8XkuzQQzN+ezq&#x2F;P29&#x2F;9Aj&#x2F;vu8nz78QsXEROlJGsJiLiaqalPPmz6ZLa4gn0ojQnhrp6iZlFXNpHrsvg8PwmqZTPl9cfX691PSkyqzEr32qSUkhmgUELpEERuvt0CQsLCICWUgGllcY8aYymT18UDEbVOtY5LJRafzYzOsjAqkzZmCqSgECRImFhOmhwOVtABb1wtQqO6u6OG09wZdaGHKFJOqmTAxOalqlnTNJaEQQ+nOCQACNiY5cYUDlKCEVEUBDXczYUEa6BGKVHDwys96OHz9PR0kBIKNwUEAVdQSaOQhIgohs1aAHoCSEDIYFVElIgIKFPEUotHIQhRpQpEylgqUUsJJ1QEpIqoBhAsEiTj&#x2F;Oyi789MECEaKeDGTt2DdEjKZhRVhhqookAwmj4TNVjnuYazlqoqphoUMsJLSDFLbdeknAOgzIJKUlC1SKlRVAmhmBBJGFJcu5SpQqSsAiAhOHspQXefvJZvhVAYgJxaU6EGRCkQ0BGqrspk0keohpMlXGhmYov7NI7rzWYYOi&#x2F;VXasv4aE0iKmpqoopxCxhtVml1DCEDvEsYeoeYYSFipCmtKKRcq5LQFiqNu26zW1WmabJa4AAtMtt02SzLCICUqAi4U4QAKSSoR5BF3VVJAGJUIqqpTYLRLVGnTWr5maajrXGtwcACRETmIYRoUjLUhCEB4OoFkIFoSFQEVOBQcIrUqNNl9uh7ftegGWcWGnITWoASZZFFeFkeITCcmO73aaoRwhDii2kJndQqkuhZYIRVsIFKTdNNgtSm3Z6fETKKTVQNTOVCGcQdEIrIBopDZ2hcUxCiItoVQ+v1S3EmEwahGNepnlU0dS0uU8KLo7pOKmEiAoIKIJeSzDEBa4exUQ8HLCAk1pZtVQPRghVKqW6Yym+jEcGm9S1ab1&#x2F;PJ3G0RlqbcrJzAQAtCzV3aswogql79ZD16h4EAEnWv3w8iiu6hokRNx9GZd5LF5cDE2Thcvp8QAoJNyreyVQa51Oo5MMhYIAvQa0kgIYoKzar+XpcCjLUrkoQlQr6vG4HI&#x2F;HiKqJlvrT8RS+SFBVVaGSDscH1yoigiADHvcPD9N4EGcA7hnIenmx06a9edzPU0RkEarEcTyeDsdaKqi505QbYQpAxCAK8dPhKFRBuItXd&#x2F;L4dCgupAbJCHpJxcfXX950fbPqhiY1mqWKxFyXpSzzFDG0qWdUiJhYo2qmp+mkggRElRAPFxHOU415ISFMlBKAfniz3z88PB5Oh&#x2F;1+PI0sFJfA8nC3Px3mqGGteVSRUJVQqqTj4RGplSRBeiUZHpWmSzgCoAhUQtPbr1+HGLHcfPOobQ5hMvOIw+P+9DSOc1lvNs1mZ0bLpqJGOU3jqlsFjSji9Aj3Op8mqUKJUBdUCtPs1qih+u3N41I8FtnsGlou8+n29m59vh761bBqKCk3aqYBmqokAyRq8UpA9ofDzZs3dSnRqFUEFCZJDZZzMpnnU7ldVHwpl5tNB9rD3cP6m2F7frbut01KObVNbiRpCERIMujjab49PH35qy&#x2F;vXn+jjuBS3brVsPv0me3Wz+GEsm1bFT+dxlJF1YDKQNfms7NdahPJzXY39D0Z7z+8b9tOQIC&#x2F;&#x2F;uLdb3&#x2F;9BirSZmaTOp+Oy7BedbtevYYos+ZxPs0TLDdPh4ebd3dl5lSfHk&#x2F;7+&#x2F;3dZr2uUWqd5mUK4WaziigKPT6V+7vDaqWIZX4c728ef&#x2F;XbD6WW9fkFZySAdSmLtV58tUHbmFd6nbsht5ZiYSkVdFM8PNyXsrStDW0&#x2F;jsdI9f7wgKj1cTo9Pr599y7medvky+uraNXn2TbdFZI6Fgpy2yyz1xJN1hBvunaz3mxWfagnS69evhJLSs1tC9H72&#x2F;svP395+PD+&#x2F;v7xzcv3eVw+++Tq+sWz4fn54fDU9pZCaUov0rcJ1ZfC3KdTqcdXt6c5rj6+ki6t15u2ax72jw83DwLZnG2mUv&#x2F;l&#x2F;&#x2F;7m8Wa&#x2F;fzoe7u5Sma8vL07TfP1sM0LaVvvGbDN8FEuoEhI1iIhGc6kzi5fjGMKr5xeXz66c9eUXb&#x2F;Z3p65vk+nLl2++&#x2F;t2r+&#x2F;vD&#x2F;sN9N6eL3dZNR8fmk4&#x2F;HMl6st9NxSgoJq4ROhT2USSOcNSzlMH39u7f&#x2F;L7XfvLq7uX+6+eb+O9&#x2F;9dB6Xz&#x2F;&#x2F;&#x2F;6y8&#x2F;&#x2F;8pjPuyfLmxYXwzFQIn1xZlKs+6aw+kYXpKp5Nx5eJ2mmXljic4whFUjqw9ffPH6n3&#x2F;5b1i0265&#x2F;+oc&#x2F;Pd3cffHVa&#x2F;dQk&#x2F;PzYdWtLGXxGOnb5xfH+XG7zrfvH7a7jZ2fX8MBImgIR9bV2a7MBWIIkqHWd20DUTE53N9&#x2F;9du3ZZ5Lmc5WQ9+027MNBhVhNwyXnz57&#x2F;bt39Hp+tSZzqgWgB0FWUIiy2q0BnMYjAgAjlm4zrJ+fa07Z7Nm2h2q23LfSt7vRZ5HUDd3588vjzen+zf3Z7sWmWz+U+d8BxLQ80KidgBcAAAAASUVORK5CYII&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这条字符串有特定的格式的，这种格式叫<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/data_URIs"><strong>Data URL scheme</strong></a>，意为data协议（类同http协议）。base64编码不仅仅可以表示图片，也可以表示其他类型的数据。</p>
<pre class="line-numbers language-none"><code class="language-none">data:[&lt;mediatype&gt;][;base64],&lt;data&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>再次区别：base64是一种编码方法。Data URL表示一个文件，可以是图片，也可以是其他格式的文件。base64对其来说更是一种可选的编码方法。</strong></p>
<h3 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h3><ol>
<li>体积会比原来大1&#x2F;3</li>
<li>不需要请求服务器资源，减少HTTP请求次数</li>
<li>编码、解码方便，算法可逆，不适用于私密信息通信</li>
<li>无法缓存，不建议使用在改动频繁的地方</li>
</ol>
<p>js创建<code>base64</code>的方法：</p>
<ol>
<li><p><code>canvas</code> 将图片转化为 <code>base64</code> 编码</p>
</li>
<li><p><code>FileReader</code> 将图片转化<code>base64</code>格式</p>
</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><code>base64</code>的使用场景比较少，个人之前的工作经历是img url 有token认证机制，直接使用<code>&lt;img src=&quot;https://HOST/xx.jpg&quot;&gt;</code>，接口状态码返回403。而后端整个api系统都是有token认证的机制，不太好改，img标签又不支持添加HTTP请求头。最后用js发起http请求，设置token请求头。</p>
<ol>
<li>使用XHR发送http请求，设置响应类型 <code>xhr.responseType = &#39;blob&#39;</code></li>
<li>构建 <code>new FileReader()</code>实例，实例事件 <code>onloadend</code>获取<code>base64</code></li>
<li>将<code>base64 </code>赋值给<code>&lt;img&gt;</code>标签的<code>src</code>属性</li>
</ol>
<p>其他常见的编码格式</p>
<ul>
<li>Unicode</li>
<li>UTF-8</li>
<li>URL12</li>
<li>Unix时间戳</li>
<li>Ascii&#x2F;Native</li>
<li>Hex</li>
<li>Html</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我们介绍了从各个话题介绍了浏览器中使用的图片，现在是时候来一波总结了。</p>
<ol>
<li><code>img</code> &#x2F; <code>background</code> - 原生<code>html</code>、<code>css</code>实现，分别作为<strong>内容主体</strong>、<strong>样式装饰</strong>功能</li>
<li><code>CSS Sprites</code> （技术方案） - 一种优化图片方案，有不同的实现方式</li>
<li><code>icon-font</code> - 基于<code>h5</code>的<code>web-font</code>特性实现，使用在线工具可生成一套矢量图片库，样式控制灵活</li>
<li><code>svg</code> - 一种很灵活的图片格式，浏览器原生支持，可转换成传统图片格式或者制作成<code>icon-font</code></li>
<li><code>webpack</code>中使用<code>img</code> - img在工程化中的简单实现</li>
<li><code>base64</code> - 一种编码方式，格式为Data URL scheme， 可表示图片等二进制文件流</li>
</ol>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>此本从开发者拿到一张图片素材开始。以在不同场景在，选择最合适的实现方式。尽管写得比较长，可还是少了一点东西。比如<code>canvas</code>没有讲，不过一般<code>canvas</code>用于脚本绘制渲染可视化数据多一些，当然能渲染成img，场景少，就没在这里讨论。本意也是觉得一张图片在浏览器上有多种使用方式，就整理了一下，写下以上内容，算是个人的知识总结回顾吧。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
